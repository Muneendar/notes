<<<<<<< HEAD
Today users expect the websites that are dynamic interactive custom taiolred..

To build the powerful Web App's --> Needs the java servlets & jsps

The web consists of gazillions of clients (using browsers like Mozilla or Safari) and servers (using web server apps like Apache) connected through wires and wireless networks
				HttpRequest
	Clients----------------------------------------------->Server	Webserver APP Apache(on Machine)
				HttpResponse
Clients asks for resource using request-url from webbrowser		Server gets the Request finds the resource(HTMLPage/PDF File/Soundfile/Picture) and 									send 
Display the content sent from the server

Client asks for resource and server sends back unless if it cannot find..at least it’s not where the server is expecting it to be.404 Response from server.

Request::The client’s request contains the name and address (the URL), of the resource the client is looking for...

Response::The server’s response contains the actual document that the client requested (or an error code if the request could not be processed).


Role of Client:The browser is the piece of software (like Netscape or Mozilla) that knows how to communicate with the server. The browser’s other big job
is interpreting the HTML code and rendering the web page for the user.

Role of Server:Server gets the Request finds the resource(HTMLPage/PDF File/Soundfile/Picture) and send

HTTP::
-----

Most of the conversations held on the web between clients and servers are held using the HTTP protocol, which allows for simple request and response
conversations. The client sends an HTTP request, and the server answers with an HTTP response.When a web server sends an HTML page to the client, it sends it using HTTP.


Network Protocols::
------------------

TCP:: Chunks ends up as complete file at destination while moving
IP:: It routes the chunks of the data from the one host to the another host
http: It has webspecific features but it depends on the TCP/IP to get the complete request and response from one place to another..
The structure of an HTTP conversation is a simple Request/ Response sequence; a browser requests, and a server responds.


Key elements of the requeststream::1)HTTP method (the action to be performed) 2)The page to access (a URL) 3)Form parameters (like arguments to a method)

Key elements of the responsestream:A status code (for whether the request was successful) Content-type (text, picture,HTML, etc.) The content (the actual
HTML, image, etc.)


HTML coming from the server is part of the HTTPResponse Object..HTTP adds header information to the top of whatever content is in the response
An HTML browser uses that header info to help process the HTML page. Think of the HTML content as data pasted inside an HTTP response.

-------------------
HTTP header info   |
  |		   |	
<html>		   |	
<head>		   |	
...		   |-----------> HttpResponse Object 
</head>		   |	
<body>		   |	
<img src=...>	   |-----------> when the browser gets to an image tag, it generates another HTTP request to go get the resource described.
</body>		   |		 make a second HTTP request to get the picture referenced in the <img> tag.
</html>		   | 	
-------------------

The ResponseObject of the secondrequest contains the image file...


What's in the HTTPRequest:: 

HTTP method name: The method name tells the server the kind of request that’s being made, and how the rest of the message will be formatted.

The HTTP protocol has several methods, but the ones you’ll use most often are GET and POST..

Example:: Link to new Page will be Get Request & Form Based submission will be POST Request..

Browser sends an HTTP GET to the server, asking the server to GET the page...Browser sends an HTTP POST to the server, giving the server what the user typed
into the form.


Diffrenece between the GET & POST Request?

GET is the simplest HTTP method, and its main job in life is to ask the server to get a resource and send it back. That resource might be an HTML page, a JPEG, a PDF, etc. Doesn’t matter. The point of GET is to get something back from the server.

POST is a more powerful request. It’s like a GET plus plus. With POST, you can request something and at the same time send form data to the server (later in this chapter we’ll see what the server might do with that data

Wait a minute... I could swear I’ve seen GET requests that did send some parameter data to the server?

I's true you can send the littile data along with the GETRequest?

1)The total amount of characters in a GET is really limited (depending on the server). If the user types, say, a long passage into a “search” input box, the GET might not work.2)The data you send with the GET is appended to the URL up in the browser bar, so whatever you send is exposed. Better not put a password or some other sensitive data as part of a GET..3)Because of number two above, the user can’t bookmark a form submission if you use POST instead of GET. Depending on your app, you may or may not want users to be able to bookmark the resulting request from a form submission.

***Formsubmission can be the GET or POST Request


--------------
21-01-2021:   |
--------------
HTTP Resource Request +  Resource Required Arguments{Need to be inside the HTTP Body if they are seceret..} Casual Arguments of resource goes with GET

Anatomy of Http Request:

GET /select/selectBeerTaste.jsp?	color=dark&taste=malty 						HTTP/1.1
  The path to resource on webserver	In a Get request parameters if there are any appended		Protocol version webbrowser is requesting
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.4) Gecko/20030624 Netscape/7.1
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/
plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive

Hey server... GET me the page on this host that’s at /select/selectBeerTaste.jsp and, oh yeah,here are the parameters for you:color = dark & taste = malty

Anatomy of Http Response:

POST /advisor/selectBeerTaste.do HTTP/1.1

Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.4) Gecko/20030624 Netscape/7.1
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
|
|	color=dark&taste=malty			---> Message Body/PayLoad
|

***text/html , text/xml , text/plain , application/xml , application/xhtml+xml , image/jpeg , image/gif , image/png


The parameters are down here in the body, so they aren’t limited the way they are if you use a GET and have to put them in the Request line

Hey server... please POST this to the resource at on the Host: /advisor/selectBeerTaste.do. Don’t forget to look inside the body for the important data I’m sending

****GET & POST Requests can go directly to the JSP pages also.. Depending on the type of HTTP method server has to handle diiferently


Anatomy of an HTTP response::
---------------------------

An HTTP response has both a header and a body. The header info tells the browser about the protocol being used, whether the request was successful, and
what kind of content is included in the body. The body contains the contents (for example, HTML/PDF/Image etc..) for the browser to display

HTTP/1.1 200 OK		The Protocol version webserver is using..Response Code .. Response Text 
Set-Cookie: JSESSIONID=0AAB6C8DE415E2E5F307CF334BFCA0C1; Path=/testEL
Content-Type: text/html
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close

<html>
...		The body holds the HTML or the other content that needed to be rendered...
</html


The Http Response can be a dynamic HTML/PDF/Image/ generated by the server side programs or the static content like the HTML,CSS,JavaScript

The main request & response headers:Content Type & Content Lenght and response status code..Http headers the Accept is important

The content-type response header’s value is known as a MIME type. The MIME type tells the browser what kind of data the browser is about to receive so that the browser will know how to render it.Notice that the MIME type value relates to the values listed in the HTTP request’s “Accept” header.

Internally if the request is forwarded to the JSP then the MIME type we need not to set explicitly..

A user is returning a login name and password.POST 			A user is requesting a new page via a hyperlink. GET

A chat room user is sending a written response. POST 			A user hits the ‘next’ button to see the next page.GET

A user hits the ‘log out’ button on a secure banking site. GET 		A user hits the ‘back’ button on the browser. GET

A user sends a name and address form to the server.POST   		A user makes a radio button selection.GET

----------------------------------------------------------------------------------
URL::Every resource on the web has its own unique address, in the URL format      | For every programming webcomponent or static component has the url's
----------------------------------------------------------------------------------

http://		www.wickedlysmart.com:	80		/beeradvice/select/			beer1.html
Protocol	Server:			Port:		Directory Path to the resource		Actual Resource
	
Protocol: Tells the server which communications protocol..

Server:The unique name of the physical server you’re looking for. This name maps to a unique IP address.You can specify an IP address here instead of a server name, but a server name is a lot easier to remember.

Port: This part of the URL is optional. A single server supports many ports. A server application is identified by a port..If you don’t specify a port in your URL, then port 80 is the default, and as luck would have it, that’s the default port for web servers.

Directory Path to the resource::The path to the location, on the Webserver/container(Apache/JBOSS) of the resource being requested. 

Resource:The name of the content being requested. This could be an HTML page, a servlet, an image, PDF, music, video, or anything else the server feels like serving.If this optional part of the URL is left out, most web servers will look for index.html by default

Optional QueryString: Remember, if this was a GET request, the extra info (parameters) would be appended to the end of this URL, starting with a question mark “?”, and with each parameter (name/value pair) separated by an ampersand “&”.


x/y/server.html		x/ 	 x/y/servlet.do	 x/y/jsp 	x/y/nameofpdffile   x/y/nameofimagefile
Extension Matching 	Directory Matching 

Url matching

TCP Port numbers:A TCP port is just a number it identifies a specific software program on the server hardware...

Your internet web (HTTP) server software runs on port 80.A Port represents a logical connection to a particular piece of software running on the server hardware.

http://www.wickedlysmart.com:80	  Connects to HttpServer
www.wickedlysmart.com:23	  Connects to TelentServer
www.wickedlysmart.com:21	   Connects to FTP server

Without port numbers, the server would have no way of knowing which application a client wanted to connect to. And since each application might have its own unique protocol, think of the trouble you’d have without these identifiers. What if your web browser, for example, landed at the POP3 mail server instead of the HTTP server? The mail server won’t know how to parse an HTTP request! And even if it did, the POP3 server doesn’t know anything about serving back an HTML page.

***If you’re writing services (server programs) to run on a company network, you should check with the sys-admins to find out which ports are already taken


For the Website: www.wickedlysmart.com   Assume it is having/hosting the two Web applications..

***For all the applications common we can have one index.html page.. For the every individual application also we can have the separate index.html pages..

For all the actions within each application also we can maintain the index.html

Action specific request's creations: /select/someservlet     /select/some.html  /select/some.jsp /select/pdffile  /select/imagefiles ...so..on

Webservers Love serving the static webpages:
-------------------------------------------

A static page just sits there in a directory. The server finds it and hands it back to the client as is.Every client sees the same thing.

Are we even maintaing the static PDF files imagefiles soundfiles xmlfiles or anything on directories and is the webserver is returing them 

Webserver's can't generate the Dynamic WebPages.
--------------------------------------------

I’m a web server application. I SERVE things. I don’t do computation on the things I serve. But... I know a real nice program(another application) on the same machine that CAN help you out...Webserver will take care of getting the request to the right helper app(applicationserver), then I’ll take that app’s response and send it back to the client. In fact, the client never needs to know that someone else did some of the work.

Two things webserver can't do alone:

If you need just-in-time pages (dynamically-created pages that don’t exist before the request) and the ability to write/save data on the server (which means writing to a file or database), you can’t rely on the web server alone.

The web server application serves only static pages, but a separate “helper” application that the web server can communicate with can build non-static, just-in-time pages.Just-in-time pages don’t exist before the request comes in. It’s like making an HTML page out of thin air.The request comes in, the helper app “writes” the HTML, and the web server gets it back to the client.

Saving data on the server:To process that form data,either to save it to a file or database or even just to use it to generate the response page, you need another app. When the web server sees a request for a helper app, the web server assumes that parameters are meant for that app. So the web server hands over the parameters, and gives the app a way to generate a response to the client.

The non-Java term for a web server helper app is “ CGI” program
--------------------------------------------------------------
The web server launches and runs the program. The web server app sends along any parameters from a GET or POST

The helper app constructs the brand new page (that has the current date inserted) and sends the HTML back to the server. As far as the web server is concerned, the HTML from the helper app is a static page

Disdvanatge of CGI:With Perl, the server has to launch a heavy-weight process for each and every request for that resource!

This is no different from Java... what do you callthe JVM? Is not every instance of the JVM a heavy-weight process..Ah, yes, but you see Servlets stay loaded and client requests for a Servlet resource are handled as separate threads of a single running Servlet. There’s no overhead of starting the JVM, loading the class, and all that...

Servlet can be a J2EE Client: A Servlet running in a J2EE web container can participate in security and transactions right along with enterprise beans

Webserver vs/Application server:
---------------------------------
Dynamic WebPage:: Sticking some dynamic content to the HTML after processing the request and generating the webpage is called Dynamicwebpage i.e JSP

Requests shouldn't go directly to resources(PDF/JSP) they should be placed inside the WEB-INF folder seprately

I know PDF files are generated randomly with some data after processing request. Image files are static content on the server.. 
Resuable static HTML CSS/Javascript content for static/dynamic webpage on the Website. Where to maintain the static HTML CSS & JS files and JSP files
Dynamic contents are JSP's not HTML/CSS/JavaScript/ImageFiles..

Application::Attach the reusable staticContent CSS/JavaScript/Imagefiles to the Dynamically generated WebPages in the WEB-INF folders..
Application:Attach the resuable staticContent CSS/JavaScript/Imagefiles to the static HTML Pages in the actionspecfic folders..

https://mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/


How your Web application looks in Eclipse is different from the look of directories structure when its deployed in the Container?

If you prepare manually you need to prepare the Project structure format according to container exceptations..If you use the eclipse then it automates the preparation of directories in the format that container is expecting...Eclipse with maven based projects we configure the war plugin that creates the war file and also automatically deploys the application in to the applicationserver

******All the urls should match to any of the dynamic Component or static component on the server...

For our server side programs servlet/JSP we need to configure the services(security,transcation,DI,JNDI,concurrency) which are provided by the Application servers..Server side programs like servlet/jsp/webservice/jsf components takes the web request and send the dynamic content and attach the model data to jsp
or attach the model data in the form of JSON/XML to other consumers of api.. Handling the security for the Servlets and JSP would be same as the handling security for the Rest API's/Webservices..

Moving from the http to https for servlet/jsp/webservices programs:

http://localhost:70/01FirstDynamicWebProject/?action=1&static=2	--->Request is for the Web Component (servlet/jsp/webservices) but it is not matching to any of the resource program.. Webserver simply ignores the request parameters and prints the index.html of the Application.

http://localhost:70/01FirstDynamicWebProject/?action=1&static=2 to https://localhost:70/01FirstDynamicWebProject/?action=1&static=2 then 
Exception::java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens

Servlets Demistyified:
-One DD per web application. -A DD can declare many servlets - A <servlet-name> ties the <servlet> element to the <servlet-mapping> element
- A <servlet-class> is the Java class. - A <url-pattern> is the name the client uses for the request.

Devloping the WebApplications manaully as per container requirement::

From the Project directory:
src
 |-->packagefolder
	|-->Servlets.java
WEB-INF
 |-->Web.xml	
 |-->classes(dir)
 |
	
From the project1 directory: %javac -classpath /yourpath/tomcat/common/lib/servlet-api.jar -d WEB-INF/classes src/Ch1Servlet.java

For now, every time you update either a servlet/jsp/webservice program or the deployment descriptor, shutdown Tomcat and restart it..

Stuffing properly formatted HTML tags into the println(), just so that you can insert variables and method calls, is just brutal.

Developing into the out.println() Remember, you can’t have a carriage return (a real one) inside a String literal. And while we’re talking about Strings... what about all your HTML that has double-quote marks in it?

Inserting the java methods or varaibles inside the JSP..Instead of building the dynamic HTML inside the java program


JSP is what happened when somebody introduced Java to HTML::
------------------------------------------------------------

Benefits of JSP:

1)Not all HTML page designers know Java::App developers know Java. Web page designers know HTML. With JSP, Java developers can do Java, and HTML developers can do web pages.

2)Formatting HTML into a String literal is REALLY ugly

Wait... there’s still something wrong here! Benefit number one says “Not all page designers know Java...” but the HTML page designer still has to write Java inside the JSP page!! JSP lets the Java programmer off the hook for writing HTML, but it doesn’t really help the HTML designer. It might be easier to write HTML in a JSP rather than in a println(), but the HTML developer still has to know Java.

****But with the new JSP spec, and by following best practices, the page designer should be putting very little (or no) real Java into a JSP. They do have to learn something... but it’s more like putting in labels that call real Java methods rather than embedding the actual Java code into the page itself

**JSP/ErrorPages/WelcomePages will be developed by the webdesigner..Web.xml/servelet/Listener's/Filters devloped by the Servlet or server side Devloper

Servlets don’t have a main() method. They’re under the control of another Java application called a Container.
--------------------------------------------------------------------------------------------------------------
Servlets need Help:: Some one has to create the new Thread for every new rquest, Some one has to instantiate the servlet,Somebody has to call the servlet’s doPost() or doGet() method.And, oh yes, those methods have crucial arguments—the HTTP request and HTTP response objects. Somebody has to get the request and the response to the servlet.Somebody has to manage the life, death, and resources of the servlet. That somebody is the web Container.

What does WebServer do? How it is calling the Application Server or WebContainer? Why WebServers and ApplicationSevers are put into the different nodes?

Roles of the WebContainer?

Communications support:The container provides an easy way for your servlets to talk to your web server. You don’t have to build a ServerSocket, listen on a port, create streams, etc. The Container knows the protocol between the web server and itself, so that your servlet doesn’t have to worry about an API between, say, the Apache web server and your own web application code. All you have to worry about is your own business logic that goes in your Servlet (like accepting an order from your online store).

Lifecycle Management::The Container controls the life and death of your servlets. It takes care of loading the classes, instantiating and initializing the servlets, invoking the servlet methods, and making servlet instances eligible for garbage collection. With the Container in control, you don’t have to worry as much about resource management.

Multithreading Support:: The Container automatically creates a new Java thread for every servlet request it receives. When the servlet’s done running the HTTP service method for that client’s request, the thread completes (i.e. dies). This doesn’t mean you’re off the hook for thread safety—you can still run into synchronization issues. But having the server create and manage threads for multiple requests still saves you a lot of work

Declarative Security With a Container, you get to use an XML deployment descriptor to configure (and modify) security without having to hard-code it into your servlet (or any other) class code. Think about that! You can manage and change your security without touching and recompiling your Java source files.

Now a days we got the all the Annotations.. But when you apply/change on the class it needs to be recompiled so the solution is Spring Dev Tools..Spring Boot Dev Tools:: Automatically compiling the changes and deploying it into the webcontainers without your intervention?

JSP Support: You already know how cool JSPs are. Well, who do you think takes care of translating that JSP code into real Java? Of course. The Container
COntainer takes care of the security networking threading...


The API In between the WebServer and Applicationserver is the least.. you dont bother about them...Just assume Webserver gave/handover the request to the Application container... It is the networking/socket based programming that is actually in between the Container and Webserver

Does Webserver is also preparing the Response Headers if the request is for the Static Resources like the Videos/Images/gifs?

Request to Response flow handled from the Container::

1)User clicks a link that has a URL to a servlet instead of a static page
2)The container “sees” that the request is for a servlet, so the container creates two objects: 1) HttpServletResponse 2) HttpServletRequest
3)The container finds the correct servlet based on the URL in the request, creates or allocates a thread for that request, and passes the request and response objects to the servlet thread.
4)The container calls the servlet’s service() method. Depending on the type of request, the service() method calls either the doGet() or doPost method..For this example, we’ll assume the request was an HTTP GET
5)The doGet() method generates the dynamic page and stuffs the page into the response object. Remember, the container still has a reference to the response object!!
6)The thread completes, the container converts the response object into an HTTP response, sends it back to the client, then deletes the request and response objects.

The URL that comes in as part of the request from the client is mapped to a specific servlet on the server.

The user does something in the browser (clicks a link, hits the “Submit” button, enters a URL, etc.) and that something is supposed to send the request to a specific servlet (or other web app resource like a JSP/Webservice) you built. How might that happen?

Servlet's urls RestfulService urls

This mapping of URLs to servlets might be handled in a number of different ways, and it’s one of the most fundamental issues you’ll face as a web app developer.

Different Ways::

1)Hardcode the mapping into your HTML page. In other words, the client is using the exact path and file (class) name of the servlet.
2)Use your Container vendor’s tool to do the mapping
3)Use some sort of properties table to store the mappings

Three names for the servlet:: 

Public Url(FakeName of Servlet):The client sees a URL for the servlet (in the HTML), but doesn’t really know how that servlet name maps to real directories and files back on the server. The public URL name is a fake name, made up for clients.

Deployer-known secret internal name(FakeName of Servlet):The deployer can create a name that’s known only to the deployer and others in the real operational environment. This name, too, is a fake name, made up just for the deployment of the servlet. It doesn’t have to match the public URL used by the client, OR the real servlet file and path name of the servlet class.but it can also be something completely different (like EnrollServlet).

Actual File name:The developer’s servlet class has a fully-qualified name that includes both the class name and the package name. The servlet class file has a real path and file name, depending on where the package directory structure lives on the server.

So you’ve hard-coded the real path and file name into all the JSPs and other HTML pages that use that servlet.Now what happens when you need to reorganize your application, and possibly move things into different directory structures? Do you really want to force everyone who uses that servlet to know (and ever follow) that same directory structure?

By mapping the name instead of coding in the real file and path name, you have the flexibility to move things around without having the maintenance nightmare of tracking down and changing client code that refers to the old location of the servlet files.

And what about security? Do you really want the client to know exactly how things are structured on your server? Do you want them to, say, attempt to navigate directly to the servlet without going through the right pages or forms? Because if the end-user can see the real path, she can type it into her browser and try to access it directly

So you map to client request to Servlet inside the web.xml? when change directories you should then change fullyqualified name inside the web.xml and should restart the conatiner.If you use the Annotation Approach then the

Do JSP's are also having the public url name and it can point to JSP without going the request to Servlet and internally forwarding to JSP? Yes
How the client urls of the JSP's are then mapped? It is the very rare scenario but it can be possible

When you deploy your servlet into your web Container, you’ll create a fairly simple XML document called the Deployment Descriptor (DD) to tell the Container how to run your servlets and JSPs. Although you’ll use the DD for more than just mapping names, you’ll use two XML elements to map URLs to servlets—one to map the client-known public URL name to your own internal name, and the other to map your own internal name to a fully-qualified class name

---------------------------------------------------
<servlet>					   |
<servlet-name>Internal name 1</servlet-name>	   |	
<servlet-class>foo.Servlet1</servlet-class>	   |
</servlet>					   |
						   |
<servlet>					   |	
<servlet-name>Internal name 2</servlet-name>	   |	
<servlet-class>foo.Servlet2</servlet-class>	   |
</servlet>					   |
						   |
<servlet-mapping>				   |This is what the client sees (and uses) to get to the servlet... but it’s a made-up name that is NOT the
<servlet-name>Internal name 1</servlet-name>	   |the name of the actual servlet class.It’s possible to use wildcards in the <url-pattern> element... more 						   |on that and paths later
<url-pattern>/Public1</url-pattern>		   |
</servlet-mapping>				   |	
----------------------------------------------------

The <servlet> elements tells the Container which class files belong to a particular web application.

Think of the <servlet-mapping> element as what the Container uses at runtime when a request comes in, to ask,which servlet should I invoke for this requested URL...Can I use both the xml and annotation approach for the configuring the clients request to a servlets/jsp/webservice

Besides mapping URLs to actual servlets, you can use the DD to customize other aspects of your web application including security roles, error pages, tag libraries, initial configuration information, and if it’s a full J2EE server, you can even declare that you’ll be accessing specific enterprise javabeans.

The deployment descriptor (DD), provides a “declarative” mechanism for customizing your web applications without touching source code..Even those who aren't the java programmers can configure your webapplication without having to drag you back from the Tropical vacation

If there was no dev tools introduction in the spring boot then the XML approach could been the best approach..Can the changes made to the xml files will be recognised and deployed to the Application Container..

I’m confused. Looking at the DD, you still don’t have anything that indicates the actual path name of the servlet! It just says the class name. This still doesn’t answer the question of how the Container uses that class name to find a specific servlet class file

Is there yet ANOTHER mapping somewhere that says that such and such a class name maps to such and such a file in such and such a location?


Advantages of having the Declartive Approach:
---------------------------------------------

Testing::Minimizes touching source code that has already been tested..Lets you fine-tune your app’s capabilities, even if you don’t have the source code

Lets you adapt your application to different external resources (like databases,Redis caches env,Security), without having to recompile and test any code.

All the configurations should be seprated from the Servlet's/WebService's Controller classes you should focus more on the Business Logic devlopment..

The configurations related informations should be placed inside the mvcappconfig.xml files or in inside @Configuration classes..

Nowadays all the configurations related to databases like the information that change from one env to other environment are maintained using the Spring Boot Profiles concept...
			database related information loads..
application-dev.xml 	application-prod.xml application-uat.xml.. The files like the mvcappconfig.xml or securityconfig.xml files will remain constant..

Based on the environment Spring Boot running the application it automatically picks the env specific files and loads the values inside the properties files and attach to the values wherver it is required...

Makes it easier for you to maintain dynamic security info like access control lists and security roles...Lets non-programmers modify and deploy your web 
applications while you can focus on the more interesting things...

Based on the environment Spring Boot is running the application it automatically picks the environment specific files and collects the values and intializes our Springbeans readily by the time container is started

Loading is getting automated by Spring boot but the maintenance of the properties files with the environment specific values or the configurations isn't changing..Chnage the web.xml files configuration based on the environment..

MVC Architecture:
-----------------

Good OO design —where each servlet should have one responsibility like the query page, the sign-up page, the search results page, etc.

Each servlet will have all the business logic it needs to modify or read the database, and prints the HTML to the response stream back to the client

Each servlet is having the logics to read or modify the data from the Database stuffing the Model data in to the HTML inside the servlet only...

/servlet--->	Requests for the one servlet will handle the GET POST PUT DELETE OPTIONS CONNECT httpmethod request's.. you can use the different JSP's for the every http method..

/reqservlet-->Can multiple requests will have mapping to the same servlet..What is use case

But then it gets ugly, so he adds JSPs::
--------------------------------------

JSP prepare the Dynamic HTML content that needs to be sent to the Client via WebServer..

Those pesky println() statements for the output response get really ugly, really quickly...So he reads up on JSPs and decides to have each servlet do whatever business logic it needs to do (query the database, insert or update a new record, etc.) then forward the request to a JSP to do the HTML for the response. This also separates the business logic from the presentation... and since he’s been reading up on design, he knows that separation of concerns is a Good Thing.

What if you want to make a Swing GUI app for the dating service, and it uses the same business logic? The business logic is struck up in the Servlet class and it is not reusable

With MVC the business logic is not only separate from the presentation... it doesn’t even know that there IS a presentation.Business logic is developed as the separte layer to make the Business logics as the reusable logics..


https://stackoverflow.com/questions/4415904/business-logic-in-mvc#:~:text=Domain%20logic%20most%20certainly%20goes,application%20layer%20hosting%20those%20rules.

Model*View*Controller (MVC) takes the business logic out of the servlet, and puts it in a “Model”— a reusable plain old Java class. The Model is a combination of the business data (like the state of a Shopping Cart) and the methods (rules) that operate on that data.


MVC Pattern Break Down:
----------------------

Controller:Takes user input from the request and figures out what it means to the model.. Forwards the model state to View

MODEL(Plain Old Java):Holds the real business logic and the state. In other words, it knows the rules for getting and updating the state.A Shopping Cart’s contents (and the rules for what to do with it) would be part of the Model in MVC.It’s the only part of the system that talks to the database

VIEW::Responsible for the presentation. It gets the state of the model from the Controller (although not directly; the Controller puts the model data in a place where the View can find it). It’s also the part that gets the user input that goes back to the Controller.


The servlet Controller isn’t doing much except some generic application stuff for this app, and, oh yeah, it does update the Model and then it kicks the View into gear.But the worst part is that all that generic application logic is duplicated in every single frickin’ servlet! If one thing needs to change, it has to change everywhere. A maintenance train wreck waiting to happen.Surely you don’t mean for me to put everything in a single servlet again? How could that be good?”

Forward all the clients requests to the one common Servlet and it takes care of forwarding to the right controller and view...It takes the help of the HandlerMappings and ViewResolvers..

The Container creates a request and response object that servlets (and other parts of the web app) can use to get information about the request and send information to the client.

J2EE Specs':
----------

All the Application servers are built following the J2EE Specifications

The Java 2 Enterprise Edition is kind of a super-spec—it incorporates other specifications, including the Servlets 2.4 spec and the JSP 2.0 spec for WebContainer.But the J2EE 1.4 spec also includes the Enterprise JavaBean 2.1 specification, for the EJB Container.But the J2EE 1.4 spec also includes the Enterprise JavaBean 2.1 specification, for the EJB Container.The web Container is for web components (Servlets and JSPs), and the EJB Container is for business components...A fully-compliant J2EE application server must have both a web Container and an EJB Container(plus other things including a JNDI and JMS implementation)

Apache Tomcat is Webserver/Application server. It has internally only containers{Servlet Container/JSP Container} 

Non-EJB web apps usually use Apache and Tomcat configured together—with Apache as the HTTP web Server, and Tomcat as the web Container...

In the old days, say, the year 2000, you could find complete J2EE application servers, standalone web Containers, and standalone EJB Containers. But today, virtually all EJB Containers are part of full J2EE servers, although there are still a few standlone web Containers,including Tomcat and Resin. Standalone web Containers are usually configured to work with an HTTP web server (like Apache), although the Tomcat Container does have the ability to act as a basic HTTP server. But for HTTP server capability, Tomcat is not nearly as robust as Apache, so the most common non-EJB web apps usually use Apache and Tomcat configured together—with Apache as the HTTP web Server, and Tomcat as the web Container.


MVC Application:
---------------

Need to setup the devlopment environment & deployment environment following the servlet and JSP specs and Tomcat requirements.

You can have any devlopment environment in any format but the deployement should be in the container expecting format...

Does the Deployment environment changes from server to server? say Apache Tomcat to JBoss Server.. No

ProjectRoot Folder: This directory name also represents the “context root” which Tomcat uses when resolving URLs. We can also re-configure the application context.. With the help of Spring Boot this is made easy 

All the dependencies that our Project use into the Web-application development should go into the WEB-INF/lib deployment folder.. There will be some dependencies(servlet.jar) that (runtime environments/server/applicationserver) will be provide.. We shouldn't move while preparing the war file.

Is there any maven plugin that automatically moves the maven dependencies into the lib folder..maven-war plugin that copies the dependencies to lib folder

or we can use the deployment descriptor assembly option of the eclipse...

/Beer-v1/input.html:
-------------------
<form action="selectBeer.do" method="POST">	<!--check out the relative url always-->

<url-pattern>/SelectBeer.do</url-pattern>  The / infront is mandatory

www.addrees.com			/				Beer-v1			/SelectBeer.do
IP address		   The host server root		The webapp context root		The logical resource name

In the HTML, the “/Beer-v1/” isn’t part of the path. In the HTML, it just says:But the browser prepends “/Beer-v1/” on to the request, because that’s where the client request is coming from. In other words, the “SelectBeer.do” in the HTML is relative to the URL of the page it’s on.

The Container searches the DD and finds a <servlet-mapping> with a <url-pattern> that matches /SelectBeer.do, where the slash (/) represents the context root of the web app, and SelectBeer.do is the logical name of a resource.

Model: You can do the Testing with out any Tomcat server. Just test like Plain Old Java CLass Testing..

For the components like Servlets & JSP & RestControllers if you need to Test then you need the Application to get deployed in the ApacheTomcat Server

JSP generates the page for the conatiner.. the container returns the page to the Happy User...

Request Dispatching:
-------------------

The Container provides a mechanism called “request dispatching” that allows one Container-managed component to call another, and that’s what we’ll use—the servlet will get the info from the model, save it in the request object, then dispatch the request to the JSP.

RD:: servlet can call servlet  jsp -->jsp servlet-->jsp  jsp-->servlet

Add the model component’s answer to the request object, so that the JSP can access it..Ask the Container to forward the request to “result.jsp”.
// response.setContentType(“text/html”);
// PrintWriter out = response.getWriter();
// out.println(“Beer Selection Advice<br>”);

request.setAttribute(“styles”, result);
RequestDispatcher view =request.getRequestDispatcher(“result.jsp”);view.forward(request, response);

Use the request dispatcher to ask the Container to crank up the JSP, sending it the request and response.Container doesn't even no that response is coming from the .jsp page.

What happens if we map the two urls to one servlet?  Tomcat container doesn't allow you to deploy the Application.. It throws RuntimeError.. The tomcat server itself will not start..

You can place the jsp files in the static area content or inside the Private Area content WEB-INF folder..

in the client requests urls::/select/select.do   some part of url can correspond to the directory on the server.but last part of the url should be corresponded to the servlet url jsp file url or the html file 

Servlets Life Cycle:
-------------------

Stepped into the middle of the servlets life: When was the servlet class loaded? When did the servlet’s constructor run?

How long does the servlet object live? When should your servlet initialize resources? When should it clean up its resources?

The servlet lifecycle is simple; there’s only one main state—initialized.If the servlet isn’t initialized, then it’s either being initialized (running
its constructor or init()method), being destroyed (running its destroy() method), or it simply does not exist.

Phases:

1)Container Loads the class:

2)Instanitaite the Servlet(Constructor is run):Your servlet class no-arg constructor runs (you should NOT write a constructor; just use the compiler-supplied default). If you place userdefined constructor in the servlet and configure the load-on-startup=1 then Tomcat Conatiner cannot intialise the Servlet.. Other servlets will be intialized and container can run the other servlets..

3)init(): Called only ONCE in the servlet’s life, and must complete before Container can call service().

4)service():This is where the servlet spends most of its life..Each request runs in a separate thread

5)destroy():Container calls to give the servlet a chance to clean up before the servlet is killed (i.e., made ready for garbage collection). Like init(), it’s called only once


Life Cycle Methods:
------------------

Servlet(I):	The Servlet interface says that all servlets have these five methods (the three in bold are lifecycle methods).
----------
service(ServletRequest, ServletResponse)
init(ServletConfi g)
destroy()
getServletConfig()
getServletInfo()

GenericServlet(I):GenericServlet is an abstract class that implements most of the basic servlet methods you’ll need, including those from the Servlet interface
-----------------
init()				-->internally called by the init(Config) method in Genric servelet Implementation..init() in GS is Empty Implementation
getInitParameter(String)
getInitParameterNames()
getServletContext()
log(String)
log(String, Throwable)
service(ServletRequest, ServletResponse)-->It is the abstract Method

HttpServlet:
-----------
HttpServlet (also an abstract class) implements the service() method to reflect the HTTPness of the servlet--the service() method doesn’t take just ANY old servlet request and response, but an HTTP-specific request and response

service(HttpServletRequest, HttpServletResponse).. This Method calls doGet or doPost based on the Request that is coming
service(ServletRequest, ServletResponse).. The method is overridden to call the service(HttpServletRequest, HttpServletResponse)
doGet(HttpServletRequest, HttpServletResponse)
doPost(HttpServletRequest, HttpServletResponse)
doHead(HttpServletRequest, HttpServletResponse)
doOptions(HttpServletRequest, HttpServletResponse)
doPut(HttpServletRequest, HttpServletResponse)
doTrace(HttpServletRequest, HttpServletResponse)
doDelete(HttpServletRequest, HttpServletResponse)
getLastModified(HttpServletRequest)

MyServlet:
---------
doPost(HttpServletRequest, HttpServletResponse)
myBizMethod()

Most of your servletness is handled by superclass methods. All you do is override the HTTP methods you need.

HttpServletRequest HttpServletResponse HttpServlet ServletConfig ServletContext-->All these Objects are implementations of the Tomcat Conatiner

ServletConfig
------------
String getServletName();ServletContext getServletContext();String getInitParameter(String name);Enumeration<String> getInitParameterNames();

ServletContext::  There are more no:of methods inside the ServletContext 
-------------

LifeCycle Methods:

1)init(): The Container calls init() on the servlet instance after the servlet instance is created but before the servlet can service any client requests.
------
Gives you a chance to initialize your servlet before handling any client requests.If you have initialization code (like getting a database connection or registering yourself with other objects), then you’ll override the init() method in your servlet class.

2)service():
---------
When the first client request comes in, the Container starts a new thread or allocates a thread from the pool, and causes the servlet’s service() method to be invoked.This method looks at the request, determines the HTTP method (GET, POST, etc.) and invokes the matching doGet(), doPost(), etc. on the servlet.
You should NOT override the service() method. Your job is to override the doGet() and/or doPost() methods and let the service() implementation from HTTPServlet worry about calling the right one.

3)doGet() or doPost():
----------------------
This is where your code begins! This is the method that’s responsible for whatever the heck your web app is supposed to be DOING..You can call other methods on other objects, of course, but it all starts from here.Whichever one(s) you override tells the Container what you support. If you don’t override doPost(), for example, then you’re telling the Container that this servlet does not support HTTP POST requests.

The service() method is always called in its own stack...

At any given time, you’ll have at least as many runnable threads as there are client requests, limited by the resources or policies/configuration of the Container. (You might, for example, have a Container that lets you specify the maximum number of simultaneous threads, and when the number of client requests exceeds that, some clients will just have to wait.)


Each request runs in the seprate Thread..You might hear people say things like,Each instance of the servlet...There aren’t multiple instances of any servlet class, except in one special case (called SingleThreadModel, which is inherently evil),

This is confusing... in the picture above you show two different clients, each with its own thread. What happens if the same client makes multiple requests? Is it one thread per client or one thread per request?One thread per request. The Container doesn’t care who makes the request—every incoming request
means a new thread/stack.

What if the Container uses clustering, and distributes the app on more than one JVM?

Imagine the picture above is for a single JVM, and each JVM has the same picture. So for a distributed web app, there would be one instance of a particular servlet per JVM, but each JVM would still have only a single instance of that servlet.

Tomcat: finds for the deployed webapps and searches for all the servlets(how,why,where it looks?) that configured with load-on-startup=1 and creates the instance of the servlet and runs the init method. or else creates the instance of servlet on fly when the first client request and runs the init method

Service() method will not run until the servlet is fully initialized{init is also run}.

Why is there an init() method? In other words, why isn’t the constructor enough for initializing a servlet? What kind of code would you put in the init() method?the init() method takes an object reference argument. What do you think the argument to the init() method might be, and how (or why) would you use it?

The proudest moment of my life is when the Grand Master Container makes me a servlet, by making a ServletConfig for me, and calling my init() . Before that, I’m just an ordinary object. But as a servlet, I have special privileges (besides the secret handshake), like the ability to log events, get references to other resources, and store attributes for other servlets...

When an Object becomes servlet, it gets all the unique previleges that comes with being servelt use its ServletContext reference to get information from the
Container.

Between the constructor and the init() method, the servlet is in a Schroedinger’s* servlet state:

You might have servlet initialization code, like getting web app configuration info, or looking up a reference to another part of the application, that will fail if you run it too early in the servlet’s life. It’s pretty simple though, if you remember to put nothing in the servlet’s constructor!


Servlet Config Object(per Servlet):Use it to pass deploy-time information to the servlet (a database or enterprise bean lookup name, for example) that you ---------------------------------
don’t to hard-code into the servlet (servlet init parameters).Use it to access the ServletContext.

A ServletContext:
----------------

One ServletContext per web app. (They should have named it AppContext)..Use it as a kind of application bulletin-board, where you can put up messages (called attributes) that other parts of the application can access (way more on this in the next chapter)..Web app parameters can be accessed..
Use it to get server info, including the name and version of the Container, and the version of the API that’s supported.

ServletConfig parameters won’t change for as long as this servlet is deployed and running. To change them, you’ll have to redeploy the servlet.

Request & Response :
-------------------

ServletRequest:
--------------
Object getAttribute(String name); Enumeration<String> getAttributeNames();void setAttribute(String name, Object o);void removeAttribute(String name);
String getParameter(String name); Enumeration<String> getParameterNames();String[] getParameterValues(String name);Map<String, String[]> getParameterMap();
String getRemoteAddr();String getRemoteHost();int getRemotePort();String getLocalName();String getLocalAddr();int getLocalPort();

String getCharacterEncoding();setCharacterEncoding(String env);
int getContentLength();long getContentLengthLong();String getContentType();ServletInputStream getInputStream() throws IOException;BufferedReader getReader() throws IOException;

String getProtocol();String getScheme();String getServerName(); 
Locale getLocale();Enumeration<Locale> getLocales();boolean isSecure();RequestDispatcher getRequestDispatcher(String path);
ServletContext getServletContext()

HttpServletRequest
-------------------
String getAuthType();Cookie[] getCookies();long getDateHeader(String name);String getHeader(String name); Enumeration<String> getHeaders(String name); 
Enumeration<String> getHeaderNames();int getIntHeader(String name);String getMethod();String getPathInfo();String getPathTranslated();

String getContextPath();String getQueryString();String getRemoteUser();boolean isUserInRole(String role);java.security.Principal getUserPrincipal();
String getRequestedSessionId();String getRequestURI();StringBuffer getRequestURL();String getServletPath();HttpSession getSession(boolean create);
HttpSession getSession();String changeSessionId(); boolean isRequestedSessionIdValid();boolean isRequestedSessionIdFromCookie();
boolean isRequestedSessionIdFromURL(); boolean authenticate(HttpServletResponse response) throws IOException,ServletException;
void login(String username, String password) throws ServletException;void logout() throws ServletException;
Collection<Part> getParts() throws IOException, ServletException;Part getPart(String name) throws IOException, ServletException;

Servlet is mapped as /test%3F/* and the application is deployed under /app. 
http://30thh.loc:8480/app/test%3F/a%3F+b;jsessionid=S%3F+ID?p+1=c+d&p+2=e+f#a  Encoded Url that is sent from Client Browser

Method              URL-Decoded Result           
----------------------------------------------------
getContextPath()        no      /app
getLocalAddr()                  127.0.0.1
getLocalName()                  30thh.loc
getLocalPort()                  8480
getMethod()                     GET
getPathInfo()           yes     /a?+b								
getProtocol()                   HTTP/1.1
getQueryString()        no      p+1=c+d&p+2=e+f
getRequestedSessionId() no      S%3F+ID
getRequestURI()         no      /app/test%3F/a%3F+b;jsessionid=S+ID				without QueryString
getRequestURL()         no      http://30thh.loc:8480/app/test%3F/a%3F+b;jsessionid=S+ID	without QueryString
getScheme()                     http
getServerName()                 30thh.loc
getServerPort()                 8480
getServletPath()        yes     /test?								The currently mappedPortion
getParameterNames()     yes     [p 2, p 1]
getParameter("p 1")     yes     c d


"+" is handled as space only in the query string..Anchor "#a" is not transferred to the server. Only the browser can work with it.
If the url-pattern in the servlet mapping does not end with * (for example /test or *.jsp), getPathInfo() returns null.


ServletResponse interface:
-------------------------

String getCharacterEncoding();String getContentType();ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;
void setCharacterEncoding(String charset);void setContentLength(int len);void setContentLengthLong(long len);void setContentType(String type);
void setBufferSize(int size); int getBufferSize();void flushBuffer() throws IOException;void resetBuffer(); boolean isCommitted();void reset();
void setLocale(Locale loc);Locale getLocale();

HttpServletResponse:
-------------------
addCookie(Cookie cookie);boolean containsHeader(String name);String encodeURL(String url);String encodeRedirectURL(String url);
void sendError(int sc, String msg) throws IOException;void sendError(int sc) throws IOException;void sendRedirect(String location) throws IOException;
void setDateHeader(String name, long date);void addDateHeader(String name, long date);void setHeader(String name, String value);
void addHeader(String name, String value);void setStatus(int sc);int getStatus();String getHeader(String name); Collection<String> getHeaderNames();


Who implements the ServletRequest and ServletResponse?Are those classes in the API?

The classes aren’t in the API because they’re left to the vendor to implement. The good news is, you don’t have to worry about it. Just trust that when the service() method is called in your servlet, it’ll be handed references to two perfectly good objects that implement HttpServletRequest and HttpServletResponse.


GET POST:Asks server to accept the body info attached in the request and give it to the thing at the requested url its like fat GET.
HEAD: Gives only the Header info in response without actual resource.
PUT:Says to put the enclosed info (the body) at the requested URL 	DELETE:Says to delete the thing (resource/file) at the requested URL.
OPTIONS: Asks for a list of the HTTP methods to which the thing at the requested URL can respond.

Example of a response to an HTTP OPTIONS request:
----------------------------------------------
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Date: Thu, 20 Apr 2004
16:20:00 GMT
Allow: OPTIONS, TRACE,GET, HEAD, POST *****
Content-Length: 0

Differences between the GET & POST?

But besides size, security, and bookmarking, there’s another crucial difference between GET and POST—the way they’re supposed to be used. GET is meant to be used for getting things. Period. Simple retrieval. Sure, you might use the parameters to help figure out what to send back, but the point is—you’re not making any changes on the server! POST is meant to be used for sending data to be processed. This could be as simple as query parameters used to figure out what to send back, just as with a GET, but when you think of POST, think: update. Think: use the data from the POST body to change something on the server

Idempotent & NOn Idempotent:?Double POST? How you handle?

Repatable Operations: GET PUT DELETE HEAD   Non-Repetable Operations: POST.. Watch the javabrains tutorial for the more details..

What are some of the ways in which a developer could reduce the risk of this?
(Hint: they might not all be programmatic solutions.)

Being idempotent is GOOD. It means you can do the same thing over and over again, with no unwanted side effects!

POST is not idempotent—the data submitted in the body of a POST might be destined for a transaction that can’t be reversed. So you have to be careful with
your doPost() functionality!

GET is idempotent. POST is not. It’s up to you to make sure that your web app logic can handle scenarios like Diane’s, where the POST comes in more than once.

What’s to stop me from using the parameters in GET to update the server? But don't do as per HTTP spec it supposed to be Ideompotent

Note: there are several different uses of the word idempotent; we’re using it in the HTTP/servlet way to mean that the same request can be made twice with
no negative consequences on the server. We do *not* use idempotent to mean that the same request always returns the same response, and we do NOT mean that a
request has NO side effects.

What determines whether the browser sends a GET or POST request?

a simple hyperlink always means a GET:: <A HREF=”http://www.wickedlysmart.com/index.html/”>click here</A>

<form method=”POST” action=”SelectBeer.do”> if you explicitly SAY method=”POST”, then, surprisingly, it’s a POST.

<form action=”SelectBeer.do”> The default is GET and parameters are sent inthe request Header..Because if the request comes in as a GET, that means you’ll run into big trouble at runtime if you have only a doPost() and not a doGet() in your servlet!

What if I want to support both GET and POST from a single servlet? Usually put logic in doGet(), then have the doPost() method delegate to the doGet() method if necessary.

public void doPost(...) throws ... { doGet(request, response); } forms and HTTP

Some form input types, like a set of checkboxes, can have more than one value. That means a single parameter (“sizes”, for example) will have multiple values, depending on how many boxes the user checked off.

Can Sizes: <p>
<input type=checkbox name=sizes value=”12oz”> 12 oz.<br>
<input type=checkbox name=sizes value=”16oz”> 16 oz.<br>
<input type=checkbox name=sizes value=”22oz”> 22 oz.<br>
<br><br>

String one = request.getParameterValues(“sizes”)[0]; String [] sizes = request.getParameterValues(“sizes”);

To collect all the front end Objects we maintain one Object that is VTO or DTO in the Types the inputs are coming from the Front end...

Request API::

String client = request.getHeader(“User-Agent”); Cookie[] cookies = request.getCookies(); HttpSession session = request.getSession();
String theMethod = request.getMethod();  InputStream input = request.getInputStream();

Why would I ever want to get an InputStream from the request?

With a GET request, there’s nothing but the request header info. In other words,there’s no body to care about. BUT... with an HTTP POST, there’s body info.
Most of the time, all you care about from the body is sucking out the parameter values (for example,“color=dark”) using request.getParameter()..But sometimes there could be client request that sends the textual or Binary information to process..In this case you can use the getReader or getInputStream methods. These streams will only contain the body of the HTTP request and not the headers.

What’s the diff erence between getHeader() and getIntHeader()? Far as I can tell, headers are always Strings! Even the getIntHeader() method takes a String
representing the name of the header, so what’s the int about

The values that come back from headers are always in a String form, but for a few headers, the String represents a number..The “Content-Length” header returns the number of bytes that make up the message-body. The “Max-Forwards” HTTP header, for example, returns an integer indicating how many router hops the request is allowed to make

String forwards = request.getHeader(“Max-Forwards”);
int forwardsNum = Integer.parseInt(forwards);		Alternative----->int forwardsNum = request.getIntHeader(“Max-Forwards”);

getServerPort(), getLocalPort(), and getRemotePort() are confusing!

The difference between getLocalPort() and getServerPort() is more subtle—getServerPort() says, “to which port was the request originally SENT?”

While getLocalPort() says, “on which port did the request END UP?” Yes, there’s a difference, because although the requests are sent to a single port (where
the server is listening), the server turns around and finds a different local port for each thread so that the app can handle multiple clients at the same time.


HttpServletReponse:
------------------

Typically, you use the response object to get an output stream (usually a Writer) and you use that stream to write the HTML (or some other type of content) that goes back to the client..sendErrors sendCookies otherHeaders

ServletResponse:
---------------
String getCharacterEncoding();String getContentType();ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;
void setCharacterEncoding(String charset);void setContentLength(int len);void setContentLengthLong(long len); void setContentType(String type);
void setBufferSize(int size);int getBufferSize();void flushBuffer() throws IOException;void resetBuffer();boolean isCommitted();void reset();
void setLocale(Locale loc);Locale getLocale();

HttpServletResponse:
-------------------

void addCookie(Cookie cookie);boolean containsHeader(String name);String encodeURL(String url);String encodeRedirectURL(String url);
void sendError(int sc, String msg) throws IOException;void sendError(int sc) throws IOException;void sendRedirect(String location) throws IOException;
void setDateHeader(String name, long date);void addDateHeader(String name, long date);void setHeader(String name, String value);
void addHeader(String name, String value);void setIntHeader(String name, int value);void addIntHeader(String name, int value);void setStatus(int sc);
int getStatus();String getHeader(String name); Collection<String> getHeaders(String name);Collection<String> getHeaderNames();


Using the response for I/O:	
--------------------------
Who said that HTML was the only thing you could send back in a response? You might send something other than HTML back to the client. Something for which an output stream makes perfect sense.

Sending the JarFile to Client:
------------------------------
Instead of sending back an HTML page, the response contains the bytes representing the JAR

response.setContentType(“application/jar”);
ServletContext ctx = getServletContext();
InputStream is = ctx.getResourceAsStream(“/bookCode.jar”);  Place the file in the root directory of the App
int read = 0;
byte[] bytes = new byte[1024];					*** This is just the sample to write the file that is already existing on the server
OutputStream os = response.getOutputStream();
while ((read = is.read(bytes)) != -1) {
os.write(bytes, 0, read);			bytes:actual data,  offset,	read:The no: of bytes to write 
}

Load the data to the existing byte[]...

**Content type is an HTTP header that must be included in the HTTP response..

text/html,application/pdf,video/quicktime,application/java,image/jpeg,application/jar,application/octet-stream,application/x-zip

setContentType:  That will set the Content-Type header in the response Object
--------------

Why do you have to set the content type? Can’t servers figure it out from the extension of the file?

Most servers can, for static content. In Apache, for example, you can set up MIME types by mapping a specific file extension (.txt, .jar, etc.) to a specific content type, and Apache will use that to set the content type in the HTTP header.But we’re talking about what happens inside a servlet where there IS no file! You’re the one who is sending back the response; the Container has no idea what you’re sending.

But what about that last example where you read a specific JAR file? Can’t the Container see that you’re reading a JAR?

You can also look in your browser preferences for a list of those that have been configured for your browser, and you can check your Web server configuration files as well

Wait a second... why would you use a servlet to send back that JAR file when you can just have the web server send it back as a resource? In other words, why wouldn’t you have the user click a link that goes to the JAR instead of to a servlet? Can’t the server be configured to send back the JAR directly without even GOING through a servlet? 

To figure out which jar file to send..take the parameters and genrate only fly the file that is not existed on the server deployment directories..
Maybe it’s something as simple as putting code in your servlet that—along with sending back the JAR—writes some info to a database about this particular user. Or maybe you have to check to see if he’s even allowed to download this JAR, based on something you first read from the database

How do you Handle the static Pdf files and Dynamic Pdf files/jar files that are generated on the server? Will you delete them immediately or store them somewhere?

ServletOutputStream for bytes, or a PrintWriter for character data.
-------------------------------------------------------------------
PrintWriter writer = response.getWriter();
writer.println(“some text and HTML”);	

**Although you can still write character data to an OutputStream, this is the stream that’s designed to handle character data		

out.write(aByteArray);

Make sure you remember that the method names for getting the stream or the writer both drop the first word in the returned type

public ServletOutputStream getOutputStream() throws IOException; public PrintWriter getWriter() throws IOException;

The PrintWriter actually “wraps” the ServletOutputStream. In other words, the PrintWriter has a reference to the ServletOutputStream and delegates calls
to it.There’s just ONE output stream back to the client, but the PrintWriter “decorates” the stream by adding higher-level character-friendly methods
       add
"name" ---->"Muni"
       add
      ----->"Pavan"	
	set
"name"--->"Ammu"		Replaces the two existing headers

add and set behaves differently only when the haeder with the name is already existing..

When you call setContentType(“text/html”), you’re setting a header just as if you said: setHeader(“content-type”, “text/html”);

So what’s the difference? No difference... assuming you type the “content-type” header correctly. The setHeader() method won’t complain if you misspell the header names—it just thinks you’re adding a new kind of header.


Sometimes you just don't handle the response yourself:
-----------------------------------------------------

You can either redirect the request to a completely different URL..you can dispatch the request to some other component in your web app

The servlet/jsp/webservice decides that the request should go to a completely different URL..The servlet calls sendRedirect(aString) on the response and that’s it.The HTTP response has a status code “301” and a “Location” header with a URL as the value...The browser gets the response, sees the “301” status code, and looks for a “Location” header..The browser makes a new request using the URL that was the value of the “Location” header in the previous
response. The user might notice that the URL in the browser bar changed...The HTTP response is just like any other response... except it isn’t coming
from the location the client typed in.

Servlet/Jsp/Webservice Decision Making
---------------------------------------
if (worksForMe) {
// handle the request
} else {
response.sendRedirect(“http://www.oreilly.com”);	The URL you want the browser to use for the request. This is what the client will see.			
}//	Container logics takes care of adding the location header 


Using relative URLs in sendRedirect():

Imagine the client originally typed in:http://www.wickedlysmart.com/myApp/cool/bar.do

In servlet/webservice/jsp named “bar.do”, the servlet calls sendRedirect() with a relative URL that does NOT start with a forward slash

sendRedirect(“foo/stuff.html”);The Container knows the original request URL started from the myApp/cool path, so if you don’t use a forward slash, that part of the path is prepended to the front of “foo/stuff.html”. final Url will be:http://www.wickedlysmart.com/myApp/cool/foo/stuff.html

But if the argument to sendRedirect() DOES start with a forward slash::The forward slash at the beginning means “relative to the root of this web Container.

The Container builds the complete URL relative to the web Container itself, instead of relative to the original URL of the request. So the new URL will be:

http://www.wickedlysmart.com/foo/stuff.html....****"foo" is a web app, separate from the "myApp" web app.

****if the sendRedirect Urls starts with /. Then the container considers the url to be root of the webcontainer while building..

**If you want to forward the request to another webapp deployed on the same container use the /(forward-slash..).. If you want to forward the another component(servlet/jsp/webservice) deployed on the same-webapp then url shouldn't start with slash. If you want to forward to a completely another App deployed on samecontainer on same machine (or) other container on same machine or the other container on the different machine then you should use the encodeRedirectUrl

How to deploy the multiple webapplications on the same container and on different Ports? With SpringBoot it is made easy with just a server.port specified on the each application individually. How it is different if you deploy the application on the GlassFish or WebLogic..Just with the server.port will it work or any other changes

Wrong time calling of the object method: IllegalStateException

If you look up sendRedirect() in the API, you’ll see that it throws an IllegalStateException if you try to invoke it after “the response has already been
committed.By committed, they mean that the response has been sent. That just means the data has been flushed to the stream. For practical purposes, it means you can’t write to the response and then call sendRedirect()!But some picky professor will tell you that technically, you could write to the stream
without flushing, and then sendRedirect() wouldn’t cause an exception. But it would be a completely stupid thing to do..

***By the way, this idea that “once it’s committed it’s too late” also applies to setting headers, cookies, status codes, the content-type, and so on...)

Well, it takes a String that IS a URL. The point is, sendRedirect() does NOT take an object of type URL. You pass it a String that’s either a complete URL or a relative one. If the Container can’t build a relative URL into a full one, it’ll throw an IllegalStateException. The tricky part is to remember that THIS is wrong: sendRedirect(new URL(“http://www.oreilly.com”));

Difference between the RequestDispatch & Redirect:
--------------------------------------------------
When a servlet does a redirect, it’s like asking the client to call someone else instead. In this case, the client is the browser, not the user. The browser makes the new call on the user’s behalf, after the originally-requested servlet says, Sorry, call this guy instead...The user sees the new URL in the browser

When a servlet does a request dispatch, it’s like asking a co-worker to take over working with a client. The co-worker ends up responding to the client, but the client doesn’t care as long as someone responds.

How do you do the HTTP Post Redirect?

Deployment Descriptor:
---------------------

Kim wants to configure his email address in the DD, not hard-code it inside the servlet class

PrintWriter out = response.getWriter();
out.println("blooper@wickedlysmart.com");

What happens when his email changes? He’ll have to recompile...He’d much rather put his email address in the Deployment Descriptor (web.xml file) so that when he deploys his web app, his servlet can somehow “read” his email address from the DD.and to change his email he modifies only the web.xml file, without having to touch his servlet source code.

You already have seen the requestParameters that can come over to the doGet and doPost, but servlets can also have the Intialization parameters as well..

<servlet>
<servlet-name>BeerParamTests</servlet-name>
<servlet-class>TestInitParams</servlet-class>
<init-param>
<param-name>adminEmail</param-name>
<param-value>likewecare@wickedlysmart.com</param-value>			Just make sure that it is inside the <servlet> element in DD
</init-param>
</servlet>

Servlet Code:out.println(getServletConfig().getInitParameter("adminEmail"));Every servlet inherits a getServletConfig() method.

Remeber you cannot call the getServletConfig() from the constructor of the servlet

That’s too early in the servlet’s life... it won’t have its full servletness until the Container calls init().

The Container “reads” the servlet init parameters from the DD and gives them to the ServletConfig, then passes the ServletConfig to the servlet’s init()
method.

Wait a minute! In the last chapter you said that we could override the init() method, and nobody said a word about the ServletConfig argument?

**There’s no law that stops you from overriding the one that takes a ServletConfig, but if you DO, then you better call super.init(ServletConfig)!

 public void init(ServletConfig config) throws ServletException {
	this.config = config;			//As the config Object is getting assigned....
	this.init();
    }


There is need to override the init(ServletConfig) method,since you can always get your ServletConfig by calling your inherited getServletConfig() method.

The servlet init parameters are read only ONCE—when the Container initializes the servlet..The servletConfig is the Interface and don't worry about the implementation

What is the benefit that you achive with the web.xml DD? You can avoid the recompilation of the code.But with SpringBoot that is ignored..

Sure it’s easy to tell Tomcat to shutdown and startup, but what about the web apps that are running? They all have to go down!

All the other webapps going down for sake of one initialization parameter change is BAD.production-quality Web Containers let you do a hot redeploy, which means that you don’t have to restart your server or take any other web apps down.In fact, Tomcat does include a manager tool that will let you deploy, undeploy, and redeploy entire web apps without restarting

But in the real world, even a hot redeploy is a Big Deal, and taking even a single app down just because the init parameter value changed can be a bad idea. If the values of your init parameters are going to change frequently, you’re better off having your servlet methods get the values from a file or database, but this approach will mean a lot more overhead each time your servlet code runs, instead of only once during initialization.


How can the JSP get the servlet InitParameters? Put them in requestAttribute

The request object lets you set attributes (think of them as a name/value pair where the value can be any object) that any other servlet or JSP that gets the request can use. That means any servlet or JSP to which the request is forwarded using a RequestDispatcher..

Why the servlet initParameters are required for other component in Webapp? initParams are specific to the one servlet configuration only na !!!

There is a way to have a servlet read the init parameters and then store them in a place other parts of the app could use, but then we’d have to know which servlet would always run first when the app is deployed, and any changes to the web app could break the whole thing. No, that won’t do either.

But I really want ALL the parts of my web app to have access to the email address. With init parameters, I have to configure them in the DD for every servlet, and then have all the servlets make them available for the JSPs. How boring is that? Not maintainable either. I need something more global

Context Parameters:
------------------
Context Parameters are avaialble to entire webapp servlet/jsp/webservice..So that means any servlet and JSP in the app automatically has access to the context init parameters, so we don’t have to worry about configuring the DD for every servlet, and when the value changes, you only have to change it one place!

<context-param>
<param-name>adminEmail</param-name>				Delcare them outside of the <servlet> & inside the <web-app> tag..As the contextparameters 	<param-value>clientheaderror@wickedlysmart.com</param-value>	are for entire webapp and not for the single servlet
</context-param>

out.println(getServletContext().getInitParameter(“adminEmail”));Every servlet inherits a getServletContext() method (and JSPs have special access to a context as well).

ServletContext is one per app, but only if the app is in a single JVM!In a distributed environment, you’ll have one ServletContext per JVM If the app is distributed, there’s one ServletContext per JVM!Now, chances are this won’t create problems, but if you have a distributed web app, you better consider the
consequences of having different contexts for each JVM

Yes, JSPs are turned into first-class servlets, so they also get their own ServletConfig..

You can only get the SevletInitParameter or ContextInitParameter but you cannot modify the values of them using the code in the servlet..

Perhaps the most common use of a context parameter is storing database lookup names. You’d want all parts of your app to have access to the correct name, and when it changes, you want to change it in only one place.

If you modify the XML to change the value of an init parameter (either servlet or context), when does the servlet or the rest of the web app see the change?

ServletContext and ServletConfig objects are created after reading the xml file.. If you change then you should redeploy inorder to change the values..
ONLY when the web app is redeployed. Remember—we talked about this before—the servlet is initialized only once, at the beginning of its life, and that’s when it’s given its ServletConfig and ServletContext. The Container reads the values from the DD when it creates those two objects, and sets the values.

Think Context-Params & init-Params are as deployment time constants.You can get them at runtime, but you can’t set them. There’s no setInitParameter().

Main Methods Inside the ServletContext:
--------------------------------------
getInitParameter(String)				
getInitParameterNames()
getAttribute(String)			--->Get init parameters and get/set attributes
getAttributeNames()
setAttribute(String, Object)
removeAttribute(String)
getMajorVersion()			--->Information about the Server/Container
getServerInfo()
getRealPath(String)
getResourceAsStream(String)
getRequestDispatcher(String)
log(String)				--->Write to the server’s log file (vendor-specific) or (System.out.)


getServletConfi g(). getServletContext(). getInitParameter() In a servlet, the only time you would NEED to go through your ServletConfi g to get your ServletContext is if you’re in a Servlet class that doesn’t extend HttpServlet or GenericServlet (the getServletContext() method you inherit comes from GenericServlet


It’s fine to use the ServletContext log() method for simple experiments, but in a real production environment, you will almost certainly want to choose something else

Hate to spoil your ServletContext party, but, um, those init parameters can’t be anything except STRINGS! That’s it! What if I want to initialize my app with a database DataSource that all the servlets can use..


What if you really want all the parts of your web app to have access to a shared database connection? You can certainly put the DataSource lookup name in a context init parameter, and that’s probably the most common use of context parameters today.But then who does the work of turning the String parameter into an actual DataSource reference that all parts of the web app can share..You can’t really put that code in a servlet, because which servlet would you choose to be The One To Lookup The DataSource And Store It In An Attribute? Do you really want to try to guarantee that one servlet in particular will always run first? Think about it.

You cannot Gurantee which servlet will first.. Based on the request that is coming the servlet would execute...

Listener: She needs someone who is sitting there, waiting to be notified that the app is starting up.She wants to listen for a context initialization event,
so that she can get the context init parameters and run some code before the rest of the app can service a client

Listener JOb:You need something else. Not a servlet or JSP, but some other kind of Java object whose sole purpose in life is to initialize the app (and possibly to uninitialize it too, cleaning up resources when it learns of the app’s demise...


ServletContextListener:: Listening for the two key events of ServletContxt creation and ServletContextDestruction

Get notified when the context is initialized (app is being deployed).
Get the context init parameters from the ServletContext.Use the init parameter lookup name to make a database connection
Store the database connection as an attribute, so that all parts of the web app can access it.

Get notified when the context is destroyed (the app is undeployed or goes down).Close the database connection

public class MyServletContextListener implements ServletContextListener {
	public void contextInitialized(ServletContextEvent event) {
	//code to initialize the database connection
	//and store it as a context attribute						These are the two notifications you get. Both give you a
											ServletContextEvent
}
public void contextDestroyed(ServletContextEvent event) {
	//code to close the database connection
}
}

What do I do? Where do I put the class? Who instantiates it? How do I register for the events? How does the listener set the attribute in the right ServletContext

Our Servlets JSP's and Listener all the Objects will be created by the ServletContainers..Spring Container takes care of creation of Bean Type Objects

***Now ServletContext has the Shared Object(listner kept in attribute) which can be used by multiple servlets at the same time

Listener is now like a factory class..with the help of parameter that is in the <init-param> we are creating the Object..

How container discovers and uses listener? Container can search for the classes inside the classes folder or the lib/ folder if it is deployed as Jar

<listener>
<listener-class>com.example.MyServletContextListener</listener-class>
</listener>

***How many Objects of listners will be created by the container? It will be one

Does the attributes need to be Serializable?

There are several different attribute types, and whether the attribute should be Serializable only matters with Session attributes. And the
scenario in which it matters is only if the application is distributed across more than one JVM. 

There’s no technical need to have any attributes (including Session attributes) be Serializable, although you might consider making all of your attributes Serializable by default, unless you have a really good reason NOT to.

Think about it—are you really certain that nobody will ever want to use objects of that type as arguments or return values as part of a remote method call? Can you really guarantee that anyone who uses this class (Dog, in this case) will never run in a distributed environment?

**Intializing the Application before any other Servlet is being serviced

Hold on... how are you telling the Container that this is a listener for ServletContext events? There doesn’t seem to be an XML element for <listener-type> or anything that says what type of events this listener is for. But I noticed you have “ServletContextListener” as part of the class name—is that how the Container knows? By the naming convention?.. Use the ServletContextListener

**One Listener can implement multiple Listeners

I just thought of something... since attributes can be set programmatically (unlike init parameters), can I listen for attribute
events? Like if someone adds or replaces a Dog?


Where there’s a lifecycle moment, there’s usually a listener to hear about it...Besides context events, you can listen for events related to context attributes, servlet requests and attributes, and HTTP sessions and session attributes

***You DO need to know the what kinds of events that you(Listener) can listen for?

ServletContextAttributeListener  ServletContextAttributeEvent
ServletContextListener		 ServletContextEvent
HttpSessionListener		 HttpSessionEvent
HttpSessionActivationListener    HttpSessionEvent
HttpSessionBindingListener	 HttpSessionBindingEvent
HttpSessionAtrributeListener	 HttpSessionBindingEvent
ServletRequestListener		 ServletRequestEvent
ServletRequestAttributeListener  ServletRequestAttributeEvent


HttpSessionBindingListener::You have an attribute class (a class for an object that will be stored as an attribute) and you want objects of this type to be notified when they are bound to or removed from a session..

HttpSessionActivationListener::You have an attribute class, and you want objects of this type to be notified when the session to which they’re bound is migrating to and from another JVM

HttpSessionBindingListener and HttpSessionActivationListener will be implemented by the attribute classes that will be part of the Session Attribute..

A plain old HttpSessionAttributeListener is just a class that wants to know when any type of attribute has been added, removed, or replaced in a Session. But the HttpSessionBindingListener exists so that the attribute itself can find out when it has been added to or removed from a Session.

****Note: binding listeners are NOT registered in the DD... it just happens automatically.

What is the reason for the BindingListener?

Imagine the Dog is a Customer class, with each active instance representing a single customer’s info for name, address, order info, etc. The real data is stored in an underlying database. You use the database info to populate the fields of the Customer object, but the issue is how and when do you keep the database record and the Customer info synchronized? You know that whenever a Customer object is added to a session, it’s time to refresh the fields of the Customer with this customer’s data from his record in the database. So the valueBound() method is like a kick that says, “Go load me up with fresh data from the database... just in case it changed since the last time I was used.” Then valueUnbound() is a kick that says, “Update the database with the value of the Customer object fields.


Sharing data to the other Parts of Web-App using the Atrributes.

Putting the Model in the request Object as the attribute and JSP is able to see them..ServletContextListener is able to get the context param and prepared the dog object and put it into the Context Scope. Now all parts of Web app is able to see the Attribute.

An attribute is an object set (referred to as bound) into one of three other servlet API objects—ServletContext, HttpServletRequest (or ServletRequest), or HttpSession. You can think of it as simply a name/value pair (where the name is a String and the value is an Object) in a map instance variable. In reality, we don’t know or care how it’s actually implemented—all we really care about is the scope in which the attribute exists. In other words, who can see it and how long does it live

Differences between the Atrribute and Parameters?

Types		Application/context,Request,Session         Application/context init parameters (&) Request parameters & Servlet init parameters

Notes:There is no servlet-specific attribute (just use an instance variable).No such thing as session parameters

setMethods:	setAttribute(String name, Object value)	    You CANNOT set Application and Servlet init parameters—they’re set in the DD, remember..

Return type:	Object					    String

Method to get:  getAttribute(String name)		    getInitParameter(String name)

Notes:Don’t forget that attributes must be cast, since the return type is Object
------------------------------------------------------------------------------------------------------------------------------------------------------------

The Three Scopes: Context, Request, and Session.

ContextAttributes: Everyone in the application has access

Session Attributes:: Accessible to only those with access to a specific HttpSession

REQUEST Attributes:: Accessible to only those with access to a specific ServletRequest

**The one who has access can set/remove or just read the attribute

Note: you should think about the implications of garbage collection when you think about scope... some attributes won’t be GC’d until the application is undeployed or dies

The three attribute scopes—context, request, and session—are handled by the ServletContext, ServletRequest, and HttpSession interfaces. The API
methods for attributes are exactly the same in every interface.

***There is a possibility if the scope of the attributes is higher then two resources in the webapp can be modifying them simulatenously...

**ServletContext & HttpSession Objects are sharable across multiple components in the WebApp. They have to be ThreadSafe Objects or Operations you perfom on them should be in Synchronized Fashion.

ContextScope isn't Thread Safe:
------------------------------

Remember, everyone in the app has access to context attributes, and that means multiple servlets. And multiple servlets means you might have multiple threads, since requests are concurrently handled, each in a separate thread.This happens regardless of whether the requests are coming in for the same or different servlets

Imagine Servlet-A

getServletContext().setAttribute(“foo”, “22”);
getServletContext().setAttribute(“bar”, “42”);		1)Lets assume request is first made to this servlet.. It was running and moved to runnable
out.println(getServletContext().getAttribute(“foo”));
out.println(getServletContext().getAttribute(“bar”));	3) Imagine this Thread has got again the chance now it will get the bar as 16 instead 42

Imagaine Servlet-B
getServletContext().setAttribute(“bar”, “16”); 		2) The second Thread has modified the attribute for the bar.


Why didn’t the Servlet spec developers just synchronize the get and set attribute methods in ServletContext, to make the attributes thread-safe?

The spec says you’re on your own if you need to protect attributes. Why force you to have all that synchronization overhead if you don’t need it? Of course some Web Containers do implement that synchronization anyway, but there’s no guarantee so you better be careful.

Options to get ThreadSafety on ServletContext & ServletSession:

***Synchronizing the doGet is Bad Idea?Synchronizing on the doGet() means kissing your concurrency goodbye. If you synchronize doGet(), it means that servlet can handle only ONE client at a time..


Synchronizing the service method means that only one thread in a servlet can be running at a time... but it doesn’t stop other servlets or JSPs from accessing the attribute!Synchronizing the service method would stop other threads from the same servlet from accessing the context attributes, but it won’t do anything to stop a completely different servlet...

You won’t do anything to stop OTHER servlets! Regardless of whether the service methods in other servlets are synchronized or not... it still means other parts of the app have access to the context attributes.

You don’t need a lock on the servlet... you need the lock on the context

If everyone accessing the context has to first get the lock on the context object, then you’re guaranteed that only one thread at a time can be getting or setting the context attribute. But... there’s still an if there. It only works if all of the other code that manipulates the same context attributes ALSO synchronizes on the ServletContext. If code doesn’t ask for the lock, then that code is still free to hit the context attributes. But if you’re designing
the web app, then you can decide to make everyone ask for the lock before accessing the attributes


HttpSessions:
------------

HTTP sessions  is an object used to maintain conversational state with a client.The session persists across multiple requests from the same client. But it’s still just one client we’re talking about..And if it’s one client, and a single client can be in only one request at a time, doesn’t that automatically mean that sessions are thread-safe? In other words, even if multiple servlets are involved, at any given moment there’s only one request from that particular client..


Can you think of a scenario in which there could be more than one request at the same time, from the same client? What do you think? Are session attributes
guaranteed thread-safe?

It is not that the Client is making the requests only from the WebBrowser.. Lets think it is coming from the POSTMAN.. What is now... The client could open a new browser window!So the Container can still use the same session for a client...

HttpSession session = request.getSession();

synchronized(session) {
	session.setAttribute(“foo”, “22”);
	session.setAttribute(“bar”, “42”);
	out.println(session.getAttribute(“foo”));
	out.println(session.getAttribute(“bar”));
}

synchronized(getServletContext()) {
	getServletContext().setAttribute(“foo”, “22”);
	getServletContext().setAttribute(“bar”, “42”);
	out.println(getServletContext().getAttribute(“foo”));
	out.println(getServletContext().getAttribute(“bar”));
}


If you need protection, then use synchronization but remember the standard rule of all forms of locking—keep the lock for the shortest amount of time to accomplish your goal! In other words, don’t synchronize the code that doesn’t access the protected state. Make your synchronized block as small as possible. Get the lock, get in, get what you need, and get the heck out so the lock can release and other threads can run that code.

SingleThreadModel:
-----------------
If a servlet implements this interface, you are guaranteed that no two threads will execute concurrently in the servlet’s service method.

The servlet container can make this guarantee by synchronizing access to a single instance of the servlet, or by maintaining a pool of servlet instances and
dispatching each new request to a free servlet.

The container can maintain a single servlet, but queue every request and process one request completely before allowing the next request to proceed. Or the container can create a pool of servlet instances and process each request concurrently, one per servlet instance.

Queuing Strategy or Multiple Instances:what if one of the instance variables is meant to record how many requests have been processed. The counter variable would have several different counts, and none of them would be right... only the summation of them is correct

Different venodors will be using the different strategy..The specification writers wanted to give the container vendors the opportunity to compete with each other in terms of performance and flexibility.

How will the STM strategy change how I write my servlet code?

If the container uses a queuing strategy, then the “single servlet instance” semantics still hold and you do not need to make any code changes. But if the container uses a pooling strategy, then the semantics of some instance variables might change. For example, if you have an instance variable that holds a “request counter,” then that variable no longer can be counted on when multiple servlet instances are created in the pool. In this case, you could choose to
make the counter variable a class variable instead

Why STM is introduced? To protect the instance varaibles from the ThreadSafety inside the servlet the STM was introduced...but by pooling multiple instances
the semantics of the servlet changes..Furthermore, STM does not help with other variable or attribute scopes.

But are class variables thread-safe?No, they are not, and the STM mechanism does not help with class variables..


Only Request attributes and method parameters & local variables are thread-safe!!!

That’s right. If you have multiple clients making requests on that servlet, that means multiple threads running that servlet code. And all threads have access to the servlet’s instance variables, so instance variables aren’t thread-safe.

But they WOULD be thread-safe if you implemented the SingleThreadModel, right!!Yes, because you’d never have more than one thread for that servlet, so the instance variables would be thread-safe. But of course nobody would ever allow you into the servlets club ever again.

What if synchronize the service method?idiot. The effect of implementing SingleThreadModel is virtually the same as synchronizing the service method. Both can bring a web app to its knees without protecting the session and context state.

But if you’re not supposed to use SingleThreadModel or synchronize the service method, then how DO you make instance variables thread-safe?

Look at a well-written servlet, and chances are you won’t find any instance variables. Or at least any that are non-final. (And since you’re a Java programmer you know that even a final variable can still be manipulated unless it’s immutable..just don’t use instance variables if you need thread-safe state, because all threads for that servlet can step on instance variables.

*****If you want all the threads or (multiple servelts) to access a value, decide which attribute state makes the most sense, and store the value in an attribute.


RequestDispatcher:
------------------

So how do we make another part of the component take over the request? With a RequestDispatcher..

RequestDispatchers have only two methods— forward() and include().Both take the request and response objects (which the component you’re forwarding to will need to finish the job).

Of the two methods, forward() is by far the most popular. It’s very unlikely you’ll use the include method from a controller servlet;however, behind the scenes the include method is being used by JSPs in the <jsp:include> standard action..

You can get a RequestDispatcher in two ways: from the request or from the context. Regardless of where you get it, you have to tell it the web component to which you’re forwarding the request..In other words, the servlet or JSP that’ll take over.

RequestDispatcher view = request.getRequestDispatcher(“result.jsp”);

The getRequestDispatcher() method in ServletRequest takes a String path for the resource to which you’re forwarding the request. If the path starts with
a forward slash (“/”), the Container sees that as “starting from the root of this web app”. If the path does NOT start with a forward slash, it’s considered
relative to the original request...But you can’t try to trick the Container into looking outside the current web app. In other words, just because you have
lots of “../../../” doesn’t mean it’ll work if it takes you past the root of your current web app!

RequestDispatcher view = getServletContext().getRequestDispatcher(“/result.jsp”);

Like the equivalent method in ServletRequest, this getRequestDispatcher() method takes a String path for the resource to which you’re forwarding the
request, EXCEPT you cannot specify a path relative to the current resource (the one that received this request). That means you must start the path with a
forward slash!

RequestDispatcher view = getServletContext().getRequestDispatcher(“/result.jsp”);

Like the equivalent method in ServletRequest, this getRequestDispatcher() method takes a String path for the resource to which you’re forwarding the
request, EXCEPT you cannot specify a path relative to the current resource (the one that received this request). That means you must start the path with a
forward slash..

view.forward(request, response);“Hey, RequestDispatcher, please forward this request to the thing I told you about earlier (in this case, a
JSP), when I first got you. And here’s the request and response, because that new thing is going to need them in order to finish handling the request

You can’t forward the request if you’ve already committed a response!Container will throw an IllegalStateException.

byte[] bytes = new byte[1024];
OutputStream os = response.getOutputStream();
while ((read = is.read(bytes)) != -1) {
os.write(bytes, 0, read);
}
os.flush();
RequestDispatcher view = request.getRequestDispatcher(“result.jsp”);
view.forward(request, response);
os.close();

os.flush();

That’s the line that causes the response to be sent to the client, and at that point, this response is DONE. FINISHED. OVER. You can’t possibly forward the
request at this point, because the request is history!You’ve already responded,

In other words, include() means asking for help in handling the request, but it’s not a complete hand-off. It’s a temporary, rather than permanent transfer of control. With forward(), you’re saying, “That’s it, I’m not do-ing anything else to process this request and response.” But with include(), you’re saying, “I want someone else to do some things with the request and/or response, but when they’re done, I want to finish handling the request and
response myself (although I might decide to do another include or forward after that...”).
	

view.inlcude() view.forward() shouldn't be called after you have commiteed the response...

**** Some Exceptions are thrown by Container like ServletException,IllegalThreadStateExceptionIOException other than the Programmer thrown Exceptions..

Context:(Entire APP)
--------
Visibility:Any part of the web app including servlets, JSPs, ServletContextListeners, ServletContextAttribute-Listeners

Scope:Lifetime of the ServletContext, which means life of the deployed app. If server or app goes down, the context is destroyed (along with itsattributes).
									
Usage:Resources you want the entire application to share, including database connections, JNDI lookup names, email addresses., etc.


HttpSession:(Servlet/JSP/WebService)
------------

Visibility:Any servlet or JSP with access to this particular session. Remember, a session extends beyond a single client request to span multiple requests by the same client, which could go to different servlets.

Life/Scope:The life of the session. A session can be destroyed programmatically or can simply time-out. 

Usgae:Data and resources related to this client’s session, not just a single request. Something that requires an ongoing conversation with the client. A shopping cart is a typical example.

Request:(Servlet/JSP/WebService)
-------

Visibility:Any part of the application that has direct access to the Request object. That mostly means only the Servlets and JSPs to which the request is forwarded using a RequestDispatcher. Also Request-related listeners

Life/Scope:The life of the Request, which means until the Servlet’s service() method completes. In other words, for the life of the thread (stack) handling this request.

Usage:Passing model info from the controller to the view... or any other data specific to a single client request.

If a servlet's RequestDispatcher was obtained using one of the getRequestDispatcher methods (and not using getNamedDispatcher), the following attributes are available in the ServletRequest:

When?	Name					Description
forward	javax.servlet.forward.request_uri	original request URI (see getRequestURI)
forward	javax.servlet.forward.context_path	original context path (see getContextPath)
forward	javax.servlet.forward.servlet_path	original context path (see getServletPath)
forward	javax.servlet.forward.path_info		original path info (see getPathInfo)
forward	javax.servlet.forward.query_string	original query string (see getQueryString)
include	javax.servlet.include.request_uri	included request URI (see getRequestURI)
include	javax.servlet.include.context_path	included context path (see getContextPath)
include	javax.servlet.include.servlet_path	included context path (see getServletPath)
include	javax.servlet.include.path_info		included path info (see getPathInfo)
include	javax.servlet.include.query_string	included query string (see getQueryString)


Forward to Static Content:
--------------------------
 // before or after noon? determine path to the right image in the WAR
boolean isPM = new GregorianCalendar().get(Calendar.AM_PM) == Calendar.PM; 
String resName = "/WEB-INF/images/time" + (isPM ? "PM" : "AM") + ".png";
getServletContext().getRequestDispatcher(resName).forward(request, response);

But sometimes you need to keep conversational state with the client across multiple requests...

A shopping cart wouldn’t work if the client had to make all his choices and then checkout in a single request

Wouldn’t it be cool if the user answers a question, and then the web app responds with a new question based on the answer to the previous ones?

Nobody in the app remembers anything that went on with this client prior to the current request !!!
-------------------------------------------------------------------------------------------------
The model (the business logic) has to figure out whether it has enough information to make a recommendation (in other words, to give final advice), and if it doesn’t, it has to give back the next question to ask the user.

public class BeerExpert {
	public NextResponse getAdvice(String answer) {
	// Process client answer by looking at ALL of the client’s previous answers, as well as the answer from the current request.
	// if there’s enough info, return final advice,else, return the next question to ask
}
}

Note:: Assume the NextResponse class encapsulates the next thing to display for the user, and something that indicates whether it’s the final advice recommendation or another question


It’s supposed to work like a REAL conversation!!!

Kim’s design won’t work unless he can keep track of everything the client has already said during the conversation, not just the answer in the current request. He needs the servlet to get the request parameters representing the client’s choices, and save it somewhere. Each time the client answers a question, the advice engine uses all of that client’s previous answers to come up with either another question to ask, or a final recommendation.

Choices: Servlet becomming the client to the StatefulSession Bean.But that’s way too much overhead (overkill) for this app! Besides, Kim’s hosting provider doesn’t have a full J2EE server with an EJB Container. He’s got Tomcat (a web Container) and that’s it

Use a database:His hosting provider does allow access to MySQL, so he could do it. He could write the client’s data to a database... but this is nearly as much of a runtime performance hit as an enterprise bean would be, possibly more. And way more than he needs.

***Login is Success then Sesssion Is created.. User Logout Then Session Object is destroyed.

We can use an HttpSession object to hold the conversational state across multiple requests. In other words, for an entire session with that client...

Actually, Kim would still have to use an HttpSession even if he did choose another option such as a database or session bean, because if the client is a web browser, Kim still needs to match a specific client with a specific database key or session bean ID, and as you’ll see in this chapter, the HttpSession takes care of that identification

An HttpSession object can hold conversational state across multiple requests from the same client.In other words, it persists for an entire session with a specific client..We can use it to store everything we get back from the client in all the requests the client makes during a session.

The HTTP protocol uses stateless connections. The client browser makes a connection to the server, sends the request, gets the response, and closes the connection. In other words, the connection exists for only a single request/response.Because the connections don’t persist, the Container doesn’t recognize that the client making a second request is the same client from a previous request. As far as the Container’s concerned, each request is from a new client.

Why can’t the Container just use the IP address of the client? It’s part of the request, right?

To the server, your IP address is the address of the router, so you have the same IP address as everybody else on that network! So that wouldn’t help. You’d have the same problem—the stuff Jim puts in his shopping cart might end up in Pradeep’s cart, and vice versa. So no, IP address isn’t a solution for uniquely identifying a specific client on the internet.


Well then how about security info? If the user is logged in, and the connection is secure (HTTPS), the Container knows EXACTLY who the client is, right

Yes, if the user is logged in and the connection is secure, the Container can identify the client and associate him with a session. But that’s a big if. Most good web site design says, “don’t force the user to log in until it really matters, and don’t switch on security (HTTPS) until it really matters.” If your users are just browsing, even if they’re adding items to a shopping cart, you probably don’t want the overhead (for you or the user) of having them authenticate to the system until they decide to checkout! So, we need a mechanism to link a client to a session that doesn’t require a securely authenticated client

What is the process container uses to identify the prvious client requests?

The idea is simple: on the client’s first request, the Container generates a unique session ID and gives it back to the client with the response. The client sends back the session ID with each subsequent request. The Container sees the ID, finds the matching session, and associates the session with the request

How do the Client and Container exchange Session ID info?

Somehow, the Container has to get the session ID to the client as part of the response, and the client has to send back the session ID as part of the request. The simplest and most common way to exchange the info is through cookies

HttpResponse:
------------
HTTP/1.1 200 OK
Set-Cookie: JSESSIONID=0AAB6C8DE415	
	    ------------------------- Cookie	
Content-Type: text/html
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close

HTTP REQUEST:
------------
POST /select/selectBeerTaste2.do HTTP/1.1
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=0AAB6C8DE415
        ------------------------- Cookie
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate


*** For the GET HttpRequests the JSESSIONID will be in the Request Headers only

The best part: the Container does virtually all the cookie work!

Our Role: Request.getSession();

Container Role: Container takes care of generating the SessionId 2)Creating the new Cookie Object 3)Stuffing the sessionId into the Cookie 4)Stuffing the Cookie into the Response Header..

And on subsequent requests, the Container gets the session ID from a cookie in the request, matches the session ID with an existing session, and associates that session with the current request.

HttpSession session = request.getSession();
------------------------------------------
You don’t make the new HttpSession object yourself.
You don’t generate the unique session ID.
You don’t make the new Cookie object.
You don’t associate the session ID with the cookie.
You don’t set the Cookie into the response
(under the Set-Cookie header).All the cookie work happens behind the scenes

Cookie::Cookie is the small piece of information. String value pair that we need from the client recognise.

HttpSession session = request.getSession();

IF (the request includes a session ID cookie)
	find the session matching that ID

ELSE IF (there’s no session ID cookie OR there’s no current session matching the session ID)
	create a new session.

All the cookie work happens behind the scenes.

What if I want to know whether the session already existed or was just created?


HttpSession session = request.getSession();getSession() returns a session no matter what.... but you can’t tell if it’s a new session unless you ask the session

if (session.isNew()) {}	isNew() returns true if the client has not yet responded with this session ID.

**You get a session by calling request.getSession(), but is that the only way to get the session? Can’t you get it from the ServletContext?

But there is another way that you can get a session... from a session event object. Remember, a listener class isn’t a servlet or JSP—it’s just a class that wants to know about the events. For example, the listener might be an attribute trying to find out when it (the attribute object) was added to or removed from a session..The event-handling methods defined by the listener interfaces related to sessions take an argument of type HttpSessionEvent, or its subclass, HttpSessionBindingEvent. And HttpSessionEvent has a getSession() method!So, if you implement any of the four listener interfaces related to sessions (we’ll get to that later in the chapter), you can access the session through the event-handling callback methods. For example, this code is from a class that implements the HttpSessionListener interface

public void sessionCreated(HttpSessionEvent event) {
HttpSession session = event.getSession();
// event handling code
}

What if I want ONLY a pre-existing session?It might not make sense for the checkout servlet, for example, to start a new session.

So there’s an overloaded getSession(boolean) method just for that purpose. If you don’t want to create a new session, call getSession(false), and you’ll get either null, or a pre-existing HttpSession

HttpSession session = request.getSession(false);	the no-arg getSession() would NEVER return null
Passing “false” means the method returns a pre-existing session, or null if there was no session associated with this client

if (session==null) {
out.println(“no session was available”);
out.println(“making one...”);
session = request.getSession();
} else {
out.println(“there was a session!”);	Here we KNOW we’re making a new session.
}

So it looks like getSession(true) is exactly the same as getSession()...

Right again. The no-arg version is a convenience for those times when you know that you always want a session, new or existing. The version that takes a boolean is useful when you know that you don’t want a new session, or when the decision of whether to make a new session happens at runtime (and you’re passing a variable into the getSession(someBoolean) method).

What if the cookies are disabled?You can do sessions even if the client doesn’t accept cookies.. But you have to do little more extra work

A client with cookies disabled will ignore “Set-Cookie” response headers..If your app depends on sessions, you need a different way for the client and Container to exchange session ID info. Lucky for you, the Container can handle a cookie-refusing client, but it takes a little more effort from you.

If you use the session code on the previous pages—calling getSession() on the request—the Container tries to use cookies. If cookies aren’t enabled, it means the client will never join the session. In other words, the session’s isNew() method will always return true

A client with cookies disabled will ignore “Set-Cookie” response headers?

If a client doesn’t accept cookies, you won’t get an exception. No bells and sirens going off to tell you that your attempt to have asession with this client went wrong. No, it just means the client ignores your attempt to set a cookie with the session ID.In your code, if you do NOT use URL rewriting, it means that getSession() will always return a NEW session (i.e. one that always returns “true” when you call isNew() on it). The client simply never sends
back a request that has a session ID cookie header.

URL Rewriting:
-------------

Remember the goal is for the client and Container to exchange session ID info. Passing cookies back and forth is the simplest way to exchange session IDs, but if you can’t put the ID in a cookie, where can you put it? URL rewriting takes the session ID that’s in the cookie and sticks it right onto the end of every URL that comes in to this app.

Imagine a web page where every link has a little bit of extra info (the session ID) tacked onto the end of the URL. When the user clicks that “enhanced” link, the request goes to the Container with that extra bit on the end, and the Container simply strips off the extra part of the request URL and uses it to find the matching session

DOes you change every url that you write as part of the webapp with Url Rewrting? Only the links that want the sessionState Compulsory.

In the HttpRespone Dynamic Reposne we should send using JSP always..

HTTP/1.1 200 OK
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close

<html>					Assume JSP:
<body>				***We add the session ID to the end of all the URLs in the HTML we send back in the Response.
<a href=”http://www.wickedlysmart.com/BeerTest.do;jsessionid=0AAB6C8DE415“>click me</a>
</body>
</html>

GET /BeerTest.do;jsessionid=0AAB6C8DE415	The session ID comes back as “extra” info stuck to the end of the Request URL. (The semicolon separator is 						vendor-specific
HTTP/1.1
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/
plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,defl ate

***URL rewriting kicks in ONLY if cookies fail, and ONLY if you tell the response to encode the URL

If you want the Container to always default to using cookies first, with URL rewriting only as a last resort, you can relax. That’s exactly how it works (except for the first time, but we’ll get to that in a moment). But if you don’t explicitly encode your URLs, and the client won’t accept cookies, you don’t get to use sessions. If you do encode your URLs, the Container will first attempt to use cookies for session management, and fall back to URL rewriting only if the cookie approach fails.

response.setContentType(“text/html”);
PrintWriter out = response.getWriter();
HttpSession session = request.getSession();
out.println(“<html><body>”);
out.println(“<a href=\”” + response.encodeURL(“/BeerTest.do”) + “\”>click me</a>”);
out.println(“</body></html>”);

What encodeURL does?

Wait a minute... how DOES the Container know that cookies aren’t working? At what point does the Container decide to use URL rewriting?

A really dumb Container doesn’t care whether cookies work or not—the dumb Container will always attempt to send the cookie AND do URL rewriting each time, even if cookies are working. But here’s how a decent Container handles it:When the Container sees a call to getSession(), and the Container didn’t get a session ID with the client’s request, the Container now knows that it must attempt to start a new session with the client. At this point, the Container doesn’t know if cookies will work, so with this first response back to the client, it tries BOTH cookies and URL rewriting

Why can’t it try cookies first... and do URL rewriting on the next response if it doesn’t get back a cookie?

Remember, if the Container doesn’t get a session ID from the client, the Container won’t even KNOW that this is the next request from that client. The Container won’t have any way to know that it tried cookies the last time, and they didn’t work. Remember, the ONLY way the Container can recognize that it has seen this client before is if the client sends a session ID!So, when the Container sees you call request.getSession(), and realizes it needs to start a new session with this client, the Container sends the response with both a “Set-Cookie” header for the session ID, and the session ID appended to the URLs (assuming you used response.encodeURL()).Now imagine the next request from this client—it will have the session ID appended to the request URL, but if the client accepts cookies, the request will ALSO have a session ID cookie. When the servlet calls request.getSession(), the Container reads the session ID from the request, finds the session, and thinks to itself,This client accepts cookies, so I can ignore the response.encodeURL() calls. In the response, I’ll send a cookie since I know that works, and there’s no need for any URL rewriting, so I won’t bother...

You might have a scenario in which you want to redirect the request to a different URL, but you still want to use a session.
There’s a special URL encoding method just for that:

response. encodeRedirectURL(“/BeerTest.do”)

What about all my static HTML pages... they are full of <a href> links. How do I do URL rewriting on those static pages?

You can’t! The only way to use URL rewriting is if ALL the pages that are part of a session are dynamically-generated! You can’t hard-code session ID’s, obviously, since the ID doesn’t exist until runtime. So, if you depend on sessions, you need URL rewriting as a fall-back strategy. And since you need URL rewriting, you have to dynamically generate the URLs in the response HTML! And that means you have to process the HTML at runtime.

Yes, this is a performance issue. So you must think very carefully about the places where sessions matter to your app, and whether sessions are critical to have or merely good to have

**For Sessions Management you need to depend on the Cookies or URL Rewriting 

URL rewriting is automatic but only if you encode your URLs. YOU have to run all your URLs through a method of the response object—encodeURL() or
encodeRedirectURL()—and the Container does everything else

You can do URL-rewriting in a JSP, and there’s even a simple JSTL tag that makes it easy, <c:URL>, that you’ll see when you get to the chapter on using custom tags...

Yes, URL rewriting is handled in a vendor-specific way. Tomcat uses a semicolon “;” to append the extra info to the URL. Another vendor might use a comma or something else. And while Tomcat adds “jsessionid=” in the rewritten URL, another vendor might append only the session ID itself. The point is, whatever the Container uses as the separator is recognized by the Container when a request comes in. So when the Container sees the separator that it uses (in other words, the separator that it added during URL rewriting), it knows that everything after that is “extra info” that the Container put there.


Don't ever do this:

String sessionID = request.getParameter(“jsessionid”)

And you shouldn’t see a custom “jsessionid” header in a request or response:

POST /select/selectBeerTaste.do HTTP/1.1
User-Agent: Mozilla/5.0
JSESSIONID: 0AAB6C8DE415	Don’t do this! It’s supposed to be a header!

In fact, the ONLY place a “jsessionid” belongs is inside a cookie header:
POST /select/selectBeerTaste.do HTTP/1.1
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=0AAB6C8DE415	This is right, but you don’t do it yourself

POST /select/selectBeerTaste.do;jsessionid=0AAB6C8DE415--->


*** If it is the GET Request or the POST request the in the URL Rewriting the jsessionId will be useful. That will be used for HACKING. So whenever you login to the website you should logout/invalidate the session before you come out of any site..


Getting rid of sessions:
========================

Changes the mind, Client Browser crashes or then completes the session by making a purchase and computer crashes.. Client didn't hit his logout Button

Now how long the session Object stays !!The point is, session objects take resources. You don’t want sessions to stick around longer than necessary. Remember, the HTTP protocol doesn’t have any mechanism for the server to know that the client is gone

But how does the Container (or you) know when the client walked away? How does the Container know when the client’s browser crashed? How does the Container know when it’s safe to destroy a session..

What is the mechanisms the container uses to manage the sessions?

Some distributed apps use leasing as a way for the server to know when a client is gone. The client gets a lease from the server, and then must renew the lease at specified intervals to tell the server that the client is still alive. If the client’s lease expires, the server knows it can destroy any resources it was holding for that client..


HttpSessionInterface Methods:

getCreationTime() 	Returns the time the session was first created.
>To find out how old the session is. You might want to restrict certain sessions to a fixed length of time. For example, you might say, Once you’ve logged in, you have exactly 10 minutes to complete this form...

getLastAccessedTime()   Returns the last time the Container got a request with this session ID (in milliseconds).
>To find out when a client last accessed this session. You might use it to decide that if the client’s been gone a long time you’ll send them an email asking if they’re coming back. Or maybe you’ll invalidate() the session

setMaxInactiveInterval() Specifies the maximum time, in seconds, that you want to allow between client requests for this session
>To cause a session to be destroyed after a certain amount of time has passed without the client making any requests for this session. This is one way to reduce the amount of stale sessions sitting in your server

getMaxInactiveInterval() Returns the maximum time, in seconds, that is allowed between client requests for this session
>To find out how long this session can be inactive and still be alive. You could use this to judge how much more time an inactive client has before the session will be invalidated

invalidate()		Ends the session. This includes unbinding all session attributes currently stored in this session.
>To kill a session if the client has been inactive or if you KNOW the session is over (for example, after the client does a shopping check-out or logs out). The session instance itself might be recycled by the Container, but we don’t care. Invalidate means the session ID no longer exists, and the attributes are removed from the session object.

Setting session timeout::  
------------------------

Good news: you don’t have to keep track of this yourself. See those methods on the opposite page? You don’t have to use them to get rid of stale (inactive) sessions. The Container can do it for you

Three ways sessions can die: > It times out  > You call invalidate() on the session object > The application goes down (crashes or is undeployed)

Configuring session timeout in the DD

<web-app ...>
<servlet>
...
</servlet> <session-config>
<session-timeout>15</session-timeout>***The 15 is in minutes. This says if the client doesn’t make any requests on this session for 15 minutes, kill it...
</session-confi g>
</web-app>

If you want to change the session-timeout value for a particular session instance (without affecting the timeout length for any other sessions in the app):

session.setMaxInactiveInterval(20*60);The argument to the method is in seconds, so this says if the client doesn’t make any requests on the session for 20 minutes, kill it.

Timeouts in the DD are in MINUTES:Here’s a big inconsistency to watch out for... you specify timeouts in the DD using MINUTES, but if you set a
timeout programmatically, you specify SECONDS..

HttpSession session = request.getSession();
session.setAttribute(“foo”, “42”);
session.setMaxInactiveInterval(0);
String foo = (String) session.getAttribute(“foo”);
if (session.isNew()) {
out.println(“This is a new session.”);
}

Result: a runtime exception (IllegalStateException) is thrown because you can’t call isNew() on the session AFTER the session becomes invalid. Setting the maximum inactive interval to 0 means the session times out and is invalidated immediately!!

Cookies for the other things:
----------------------------

Although cookies were originally designed to help support session state, you can use custom cookies for other things. Remember, a cookie is nothing more than a little piece of data (a name/value String pair) exchanged between the client and server. The server sends the cookie to the client, and the client returns the cookie when the client makes another request.

One cool thing about cookies is that the user doesn’t have to get involved—the cookie exchange is automatic (assuming cookies are enabled on the client, of course).By default, a cookie lives only as long as a session; once the client quits his browser, the cookie disappears. That’s how the “JSESSIONID” cookie works. But you can tell a cookie to stay alive even AFTER the browser shuts down.

<session-config>
    <session-timeout>720</session-timeout> <!-- 720 minutes = 12 hours -->
    <cookie-config>
        <max-age>43200</max-age> <!-- 43200 seconds = 12 hours -->		Client can comeback and use the same session..
    </cookie-config>
</session-config>

****Stale sessions on the server is increasing but they have some architecture that stores the huge amount of the data...


You can tell a cookie to stay alive even AFTER the browser shuts down.That way, your web app can still get the cookie information even though the session with that client is long gone. Imagine that Kim wants to display the user’s name each time he returns to the beer site. So he sets the cookie the first time he receives the client’s name, and if he gets the cookie back with a request, he knows not to ask for the name again. And it doesn’t matter if the user restarted his browser and hasn’t been on the site for a week!

How the Cookies to the specific site are sent ? How cookies are stored in the webbrowser?

When we access the flipkart does only the flipkart Cookies sent or all the Websites cookies are sent?

HTTP/1.1 200 OK
Set-Cookie: username=TomasHirsch		***Server sends this first
Content-Type: text/html
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close
<html>
...
</html>

POST /select/selectBeerTaste2.do HTTP/1.1
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0
Cookie: username=TomasHirsch			***Client sends this back
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,defl ate

Everything you need to do with cookies has been encapsulated in the Servlet API in three classes: HttpServletRequest, HttpServletResponse, and Cookie.

HttpServletRequest:getCookies()

HttpServletResponse:addCookie()

javax.servlet.http. Cookie	What is Domain? What is Path?
--------------------------

Cookie(String, String)

String getDomain() int getMaxAge() String getName() String getPath() boolean getSecure() String getValue()
void setDomain(String) void setMaxAge(int) void setPath(String) void setValue(String)

Cookie[] cookies = request.getCookies();
for (int i = 0; i < cookies.length; i++) {
Cookie cookie = cookies[i];
if (cookie.getName().equals(“username”)) {			There’s no getCookie(String) method... you can only get cookies in a Cookie
								array, and then you have to loop over the array to find the one you want.
String userName = cookie.getValue();
out.println(“Hello “ + userName);
break;
}

Cookie Test:
-----------

public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
response.setContentType(“text/html”);
String name = request.getParameter(“username”);
Cookie cookie = new Cookie(“username”, name);
cookie.setMaxAge(30*60);
response.addCookie(cookie);
RequestDispatcher view = request.getRequestDispatcher(“cookieresult.jsp”);
view.forward(request, response);
}

The fact that we’re forwarding to a JSP doesn’t change the cookie setting. The cookie is already in the response by the time the request is forwarded to the JSP...

public class CheckCookie extends HttpServlet{		Another servlet getting cookies

public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
response.setContentType(“text/html”);
PrintWriter out = response.getWriter();
Cookie[] cookies = request.getCookies();
if ( cookies != null ) {
for (int i = 0; i < cookies.length; i++) {
Cookie cookie = cookies[i];
if (cookie.getName().equals(“username”)) {
String userName = cookie.getValue();
out.println(“Hello “ + userName);
break;
}
}
}

When you add a header to a response, you pass the name and value Strings as arguments: response.addHeader(“foo”, “bar”);
But when you add a Cookie to the response, you pass a Cookie object. You set the Cookie name and value in the Cookie constructor.

Cookie cookie = new Cookie(“name”, name);
response.addCookie(cookie);

And remember, too, that there’s both a setHeader() and an addHeader() method (addHeader adds a new value to an existing header, if there is one, but setHeader replaces the existing value). But there’s NOT a setCookie() method. There’s only an addCookie() method!


Lifecycle of Sessions:
---------------------

The session was created
When the Container first creates a session. At this point, the session is still considered new (in other words, the client has not yet sent a request with the session ID).

The session was destroyed
When the Container invalidates a session (because the session timed out or some part of the application called the session’s invalidate() method).

An attribute was added
When some part of the app calls setAttribute() on the session.

An attribute was removed
When some part of the app calls removeAttribute() on the session.

An attribute was replaced
When some part of the app calls setAttribute() on the session, and the name of the attribute has already been bound to the session


The session is about to be passivated
When the Container is about to migrate (move) the session into a different VM. Called before the session moves, so that attributes have a chance to prepare themselves for migration.

The session has been activated
When the Container has just migrated (moved) the session into a different VM. Called before any other part of the app can call getAttribute() on the session, so the just-moved attributes have a chance to get themselves ready for access.


HttpSessionBindingListener:: The attribute class itself gets notified..

public class Dog implements HttpSessionBindingListener {

public void valueBound(HttpSessionBindingEvent event) {
// code to run now that I know I’m in a session
}
public void valueUnbound(HttpSessionBindingEvent event) {
// code to run now that I know I am no longer part of a session
}

}
** We don't need to declare the Binding Listeners in the DD..

If an attribute class (like the Dog class here) implements the HttpSessionBindingListener, the Container calls the event-handling callbacks (valueBound() and valueUnbound()) when an instance of this class is added to or removed from a session. That’s it. It just works. But this is NOT true for the other session-related listeners. HttpSessionListener and HttpSessionActivationListener must be registered in the DD, since they’re related to the session itself, rather than an individual attribute placed in the session

** Who creates the Objects of the Listener? When it creates the Object First time when the event is triggered or before only?

we talked briefly about distributed web apps, where the pieces of the app might be replicated across multiple nodes in the network. In a clustered environment, the Container might do load-balancing by taking client requests and sending them out to JVMs (which may or may not be on different physical boxes, but that doesn’t matter to us). The point is, the app is in multiple places.

That means each time the same client makes a request, the request could end up going to a different instance of the same servlet. In other words, request A for Servlet A could happen on one VM, and request B for Servlet A could end up on a different VM. So the question is, what happens to things like ServletContext, ServletConfig, and HttpSession objects?


Only HttpSession objects (and their attributes) move from one VM to another.
There is one ServletContext per VM. There is one ServletConfig per servlet, per VM. But there is only one HttpSession object for a given session ID per web app, regardless of how many VM’s the app is distributed across.

How to replicate the APP in the same machine on multiple VMS by using the Tomcat/Weblogic/Websphere?

How to replicate the one APP in different machine?

Everything is duplicated in the second server EXCEPT the HttpSession objects.Sessions live in only ONE place at any given moment. The same session ID for a given web app will NEVER appear in two VMs at the same time


App server vendor handles clustering and web app distribution varies with each vendor, and there’s no guarantee in the J2EE spec that a vendor has to support distributed apps. But the picture here gives you a high-level idea of how it works. The key point is that while other parts of the app are replicated on each node/VM,the session objects are moved. And that is guaranteed. In other words, if the vendor does support distributed apps, then the Container is required to migrate sessions across VMs. And that includes migrating session attributes as well.

A Container is required to migrate Serializable attributes (which assumes that all instance variables within the attribute are either Serializable or null).

But a Container is not required to use Serialization as the means for migrating the HttpSession object! What does this mean to you? Simple: make sure your attribute class types are Serializable and you never have to worry about it. But if they’re not Serializable (which could be because one of the
attribute object’s instance variables is not Serializable), have your attribute object class implement HttpSessionActivationListener and use the activation/passivation callbacks to work around

The Container is not REQUIRED to use Serialization, so there’s no guarantee that readObject() and writeObject() will be called on a Serializable attribute or one of its instance variables

If you’re familiar with Serialization, you know that a class that implements Serializable can also choose to implement a writeObject() method, called by the VM whenever an object is serialized, and a readObject() method, called when an object is deserialized. A Serializable object can use these methods to, for example, set non-Serializable fields to null during Serialization (writeObject()) and then restore the fields during deserialization (readObject()). (If you’re NOT familiar with the details of Serialization, don’t worry about it.) But the methods won’t necessarily be called during session migration! So if you need to save and restore instance variable state in your attribute, use HttpSessionActivationListener, and use the two event call- backs (sessionDidActivate() and sessionWillPassivate()) the way you’d use readObject() and writeObject().

public class BeerSessionCounter implements HttpSessionListener {
	static private int activeSessions;
public static int getActiveSessions() {
	return activeSessions;
}
public void sessionCreated(HttpSessionEvent event) {
	activeSessions++;
}
public void sessionDestroyed(HttpSessionEvent event) {
	activeSessions--;
}
}

This class will be deployed in WEB-INF/classes like all the other web-app classes, so all servlets and other helper classes can access this method..

FYI- this wouldn’t work correctly if the app is distributed on multiple JVMs, because there is no way to keep the static variables in sync. If the class is loaded on more than one JVM, each class will have its own value for the static counter variable

what the heck are you printing to? Where does System.out go in a web app?

Wherever this Container chooses to send it (which may or may not be configurable by you). In other words, in a vendor-specific place, often a log file. Tomcat puts the output in tomcat/logs/catalina.log. You’ll have to read your server docs to find out what your Container does with standard output.


public class Dog implements HttpSessionBindingListener, HttpSessionActivationListener,Serializable {
private String breed;

// imagine more instance variables, including
// some that are not Serializable
// imagine constructor and other getter/setter methods
public void valueBound(HttpSessionBindingEvent event) {
// code to run now that I know I’m in a session
}

public void valueUnbound(HttpSessionBindingEvent event) {
// code to run now that I know I am no longer part of a session
}

public void sessionWillPassivate(HttpSessionEvent event) {
// code to get my non-Serializable fields in a state
// that can survive the move to a new VM
}

public void sessionDidActivate(HttpSessionEvent event) {
// code to restore my fields... to redo whatever I undid
// in sessionWillPassivate()
}
}

***A session whose timeout period has been set to -1 will never expire.A session will become invalid after a timeout period defined by the servlet container.

** The app1 session Objects are not accessible inside the app-2. Suppose from your app-1 you redirect request to app2 & want to use the same session then it is not possible.. You have to configure within the context.xml to have the Sharable SessionContext..

<Valve className="org.apache.catalina.valves.PersistentValve"/>
    <Manager className="org.apache.catalina.session.PersistentManager">
        <Store className="org.apache.catalina.session.FileStore" directory="${catalina.base}/temp/sessions"/>
    </Manager>

https://www.cacheonix.org/articles/How_to_Distribute_Java_Application_on_Multiple_JVMs.htm

Multi Layered Architecture..


							JSP:
							----

JSP finally will be become servlet..It’s a lot like any other servlet, except that the servlet class is written for you—by the Container..

The Container takes what you’ve written in your JSP, translates it into a servlet class source (.java) file, then compiles that into a Java servlet class. After that, it’s just servlets all the way down, and the servlet runs in exactly the same way it would if you’d written and compiled the code yourself. In other words, the Container loads the servlet class, instantiates and initializes it, makes a separate thread for each request, and calls the servlet’s service() method

container Translates		   Compiles		  Loaded and Intialized	
MyJSP.jsp----------->MyJSP_jsp.java--------->MyJSP_jsp.class---------------------->MYJSP_jsp(ServletObject)


Questions:
---------
Where does each part of your JSP file end up in the servlet source code?Do you have access to the “servletness” of your JSP page?For example, does a JSP have a concept of a ServletConfig or ServletContext..What are the types of elements you can put in a JSP?What’s the syntax for the different elements in a JSP?What’s the lifecycle of a JSP, and can you step into the middle of it?How do the different elements in a JSP interact in the fi nal servlet?

You can put regular old Java code in a JSP using a scriptlet—which just means Java code within a <% ... %> tag.

<html>
<body>
The page count is:
<%
out.println(Counter.getCount()); %>	The “out” object is implicitly there. Everything between <% and %> is a scriptlet, which is just plain old Java
</body>
</html>

The only tricky part is making sure that the Counter class is available to the JSP, and that’s easy—just be sure the Counter class is in the WEB-INF/
classes directory of the web app. She accesses the JSP directly in the browser at http://localhost:8080/testJSP1/BasicCounter.jsp

When You have some changes to JSP.. Does changes get reflected immediately or it needs to deployed again? Reflected Immediately

On First request to the jsp ..The jsp will be converted to java file and compile it and intialize.. If you make some changes then does the jsp need to reconverted and recompile the file and load and intialize.(Yes.. All that happen on fly without even deploying again)

For the Normal Servlets you need to need to do the maven compile.. But it is not the case with the JSP's

****Container takes care of the conversion of the JSP file to .java file..

A directive is a way for you to give special instructions to the Container at page translation time. Directives come in three flavors: page, include, and taglib

<%@ page import=”foo.*” %> 		Importing the package..See carefully there is no semicolon at end..
<%@ page import=”foo.*,java.util.*” %>	Importing multiple packages..Use a comma to separate the packages. The quotes go around the entire list of packages

<%out.println(Counter.getCount()); %> Scriplets are like the regualr java statements ..All staements should end with ;

<%="Counter value is "+ Counter.getCount()  %> Expressions doesn't end with.. It avoids using the out Object

<%! %>

If you did put a semicolon in your expression	<%= Counter.getCount(); %>

That would be bad. It would mean this:out.print(Counter.getCount(););Yikes!! This will never compile.

Well, if you’re supposed to use expressions INSTEAD of putting out.println() into a scriptlet, then why is the implicit “out” there?

You probably won’t use the implicit out variable from within your JSP page, but you might pass it to something else... some other object that’s part of your app that does not have direct access to the output stream for the response

In an expression, what happens if the method doesn’t return anything?

You’ll get an error!! You cannot, MUST NOT use a method with a void return type as an expression. The Container is smart enough to figure out that there won’t be anything to print if the method has a void return type

Why does the import directive start with the word “page”? Why is it <%@ page import...%> instead of just <%@ import... %>.

Good question! Rather than having a whole big pile of different directives, the JSP spec has just three JSP directives, but the directives can have attributes. What you called “the import directive” is actually “the import attribute of the page directive

What are the other attributes for the page directive?

Remember, the page directive is about giving the Container information it needs when translating your JSP into a servlet. The attributes we care about (besides import) are session, contentType, and isELIgnored (we’ll come back to these later in the chapter).

<html><body>		The argument to the out.write
<% int count=0; %>
The page count is now:	The argument to out.write
<%= ++count %>		The argument to the out.print
</body></html>


public class basicCounter_jsp extends SomeSpecialHttpServlet {

     public void _jspService(HttpServletRequest request,HttpServletResponse response)throws java.io.IOException,ServletException {
	
	PrintWriter out = response.getWriter();
	response.setContentType(“text/html”);
	out.write(“<html><body>”);
	int count=0;
	out.write(“The page count is now:”);
	out.print( ++count );
	out.write(“</body></html>”);
}

}

***The Container puts all the code into a generic service method. Think of it as a catch-all combo doGet/doPost...The Get/Post sends to JSP directly

Every you invoke the jsp value of count is created and instatinated with 0. So every time we get the value=1.

But there’s another JSP element called a declaration			<%! int count=0; %>

Put an exclamation point (!) after the percent sign (%). This isn’t an expression—you NEED the semicolon here..

JSP declarations are for declaring members of the generated servlet class. That means both variables and methods! In other words, anything between the <%! and %> tag is added to the class outside the service method. That means you can declare both static variables and methods.

<%! int count=0; %>	This isn’t an expression—you NEED the semicolon here!

****This is also servlet so not recommeded to take the class level varaibles they are subjected to Multiple Threads modifications..

Time to see the REAL generated servlet:
-------------------------------------

1) Looks at the directives, for information it might need during translation

2) Creates an HttpServlet subclass. For Tomcat 5, the generated servlet extends: org.apache.jasper.runtime.HttpJspBase

3) If there’s a page directive with an import attribute, it writes the import statements at the top of the class file, just below the package statement.
   For Tomcat 5, the package statement (which you don’t care about) is: package org.apache.jsp;

4)If there are declarations, it writes them into the class file, usually just below the class declaration and before the service method. Tomcat 5 declares   one static variable and one instance method of its own

5)Builds the service method. The service method’s actual name is _jspService(). It’s called by the servlet superclass’ overridden service() method, and receives the HttpServletRequest and HttpServletResponse. As part of building this method, the Container declares and initializes all the implicit objects. (You’ll see more implicit objects when you turn the page.)

6)Combines the plain old HTML (called template text), scriptlets, and expressions into the service method, formatting everything and writing it to the PrintWriter response output.


public final class BasicCounter_jsp extends org.apache.jasper.runtime.HttpJspBase implements org.apache.jasper.runtime.JspSourceDependent {
 int count=0;
 private static java.util.Vector _jspx_dependants;
  public java.util.List getDependants() {
		return _jspx_dependants;
}
public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {
	JspFactory _jspxFactory = null;				
	PageContext pageContext = null;				** This service method can handle all the doGet & doPost requests..
	HttpSession session = null;
	ServletContext application = null;			The Container declares a bunch of its own local variables, including those that represent 								the “implicit objects” your code might need, like “out” and “request
	ServletConfig config = null;
	JspWriter out = null;
	Object page = this;
	JspWriter _jspx_out = null;
	PageContext _jspx_page_context = null;

	try {
	_jspxFactory = JspFactory.getDefaultFactory();
	response.setContentType(“text/html”);
	pageContext = _jspxFactory.getPageContext(this, request, response,null, true, 8192, true);
	_jspx_page_context = pageContext;
	application = pageContext.getServletContext();
	config = pageContext.getServletConfig();
	session = pageContext.getSession();
	out = pageContext.getOut();
	_jspx_out = out;
	out.write(“\r<html>\r<body>\r”);
	out.write(“\rThe page count is now: \r”);
	out.print( ++count );
	out.write(“\r</body>\r</html>\r”);
	} 
	catch (Throwable t) {
		if (!(t instanceof SkipPageException)){
			out = _jspx_out;
		if (out != null && out.getBufferSize() != 0)
			out.clearBuffer();
		if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
	}
} 	finally {
	if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
}
}
}
}

The implicit Objects:

With implicit objects, you can write a JSP knowing that your code is going to be part of a servlet. In other words, you can take advantage of your servletness, even though you’re not directly writing a servlet class yourself

JspWriter		-	out
HttpServletRequest	-	request	
HttpServletResponse	-	response
HttpSession		-	session
ServletContext		-	application
ServletConfig		-	config
Throwable		-	exception		This implicit object is only available to designated “error pages”.
PageContext		-	pageContext
Object			-	page

But now there’s a NEW fourth scope, “page-level”, and page-scoped attributes are stored in pageContext

PageContext:A PageContext encapsulates other implicit objects, so if you give some helper object a PageContext reference, the helper can use that reference to get references to the OTHER implicit objects and attributes from all scopes.

What’s the difference between a JspWriter and a PrintWriter I get from an HttpServletResponse?

The JspWriter is not in the class hierarchy of PrintWriter, so you can’t use it in place of a PrintWriter. But it has most of the same print methods, except it adds some buffering capabilities


JSP Comments:
-------------
The template text inside the jsp should go into the HTML Comment: <!-- HTML comment -->

The <% %> <%! %> <%= %> JSP elements should go inside the JSP Comments..<%-- JSP comment --%>

If you’re a Java programmer with very little HTML experience, you might find yourself typing:
// this is a comment without thinking twice. But if you do, then unless it’s within a scriptlet or declaration tag, you’ll end up DISPLAYING that to the client as part of the response. In other words, to the Container, those two slashes are just more template text, like “Hello” or “Email is:”.

HTML Comments---> Use them only for the Template Text  JSP Comments---> Use them for the JSP Elments Java Comments-->Use them inside the jsp elements

HTML Comments are passed on but browser will not intrpret.. JSP Comments are removed during the pageTranslation..


JspPage:	All Superinterfaces: javax.servlet.Servlet All Known Subinterfaces: HttpJspPage
--------
 
Methods:
--------
public void jspDestroy()    public void jspInit()... You can override this methods.

public void _jspService(ServletRequestSubtype request,ServletResponseSubtype response)throws ServletException, IOException; You shouldn't ovveride
          

HttpJspPage:	All Superinterfaces: JspPage, javax.servlet.Servlet
-----------
void	_jspService(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)..

The _jspService()method corresponds to the body of the JSP page.
 

HttpJspBase:
---------

All Implemented Interfaces:javax.servlet.jsp.HttpJspPage, javax.servlet.jsp.JspPage, java.io.Serializable, javax.servlet.Servlet,javax.servlet.ServletConfig

Fields:protected  javax.servlet.jsp.PageContext	pageContext

Methods:
-------

abstract  void	_jspService(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
void destroy()
java.lang.String getServletInfo()
void init(javax.servlet.ServletConfig config)
void jspDestroy()
void jspInit()
void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) ****Entry point into service.


public abstract class HttpJspBase extends HttpServlet implements HttpJspPage {		This class is a Servlet

    private static final long serialVersionUID = 1L;

    protected HttpJspBase() {
    }

    @Override
    public final void init(ServletConfig config)
        throws ServletException
    {
        super.init(config);
	jspInit();
        _jspInit();
    }

    @Override
    public String getServletInfo() {
	return MESSAGES.jspInfo();
    }

    @Override
    public final void destroy() {
	jspDestroy();
	_jspDestroy();
    }

    /**
     * Entry point into service.
     */
    @Override
    public final void service(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {
        _jspService(request, response);
    }

    @Override
    public void jspInit() {
    }

    public void _jspInit() {
    }

    @Override
    public void jspDestroy() {
    }

    protected void _jspDestroy() {
    }

    @Override
    public abstract void _jspService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException;
}


jspInit():This method is called from the init() method. You can override this method.

jspDestroy():This method is called from the servlet’s destroy() method. You can override this method as well.

_jspService():This method is called from the servlet’s service() method,which means it runs in a separate thread for each request. The Container passes the Request and Response objects to this method. You can’t override this method! You can’t do ANYTHING with this method yourself..(except write code that goes inside it), and it’s up to the Container vendor to take your JSP code and fashion the _jspService() method that uses it.

LifeCycle of the JSP:
--------------------

1) You write the .jsp file. The Container writes the .java file for the servlet your JSP becomes.

2)Kim writes a .jsp file, and deploys it as part of a web app.The Container “reads” the web.xml (DD) for this app, but doesn’t do anything else with the
.jsp fi le (until the first time it’s requested).It’s just sitting here on the server...waiting for a client to request it.

3)The client hits a link that asks for the .jsp.The Container tries to TRANSLATE the .jsp into .java source code for a servlet class.JSP syntax errors are
caught in this phase.

4)The Container tries to COMPILE the servlet .java source into a .class file.Java language/syntax errors are caught here..

5)The Container LOADS the newly-generated servlet class

6)The Container instantiates the servlet and causes the servlet’s jspInit() method to run.The object is now a full-fl edged servlet, ready to accept client requests.

7)The Container creates a new thread to handle this client’s request, and the servlet’s _jspService() method runs..Everything that happens after
this is just plain old servlet request-handling.Eventually the servlet sends a response back to the client (or forwards the request to another web app component

During the Translation time: JSP Syntax Errors are caught COMPILE: During the compilation java syntax errors are caught..

Translation and compilation happens only ONCE:
----------------------------------------------
When you deploy a web app with a JSP, the whole translation and compilation step happens only once in the JSP’s life. Once it’s been translated and compiled, it’s just like any other servlet. And just like any other servlet, once that servlet has been loaded and initialized, the only thing that happens at request time is creation or allocation of a thread for the service method. So the picture on the previous two pages is for only the first request.

OK, so that means only the first client to ask for the JSP takes the big hit. But there MUST be a way to configure the server to pre-translate and compile...right?

Although it’s only the first client that has to wait, most Container vendors DO give you a way to ask for the whole translation/compilation thing to happen in advance, so that even the first request happens like any other servlet request..But watch out—it’s vendor-dependent and not guaranteed. There IS a mention in the JSP spec (JSP 11.4.2) of a suggested protocol for JSP precompilation


Initializing your JSP:
--------------------
You can do servlet initialization stuff in your JSP, but it’s slightly different from what you do in a regular servlet.

You configure servlet init params for your JSP virtually the same way you configure them for a normal servlet. The only difference is that you have to add a <jsp-file> element within the <servlet> tag.

<web-app ...>
<servlet>
	<servlet-name>MyTestInit</servlet-name>
	<jsp-file>/TestInit.jsp</jsp-file>	This is the only line that’s different from a regular servlet. It basically says, “apply everything in this 						<servlet> tag to the servlet created from this JSP page...”
	<init-param>
	<param-name>email</param-name>
	<param-value>ikickedbutt@wickedlysmart.com</param-value>
	</init-param>
</servlet>
<servlet-mapping>
	<servlet-name>MyTestInit</servlet-name> **When you define a servlet for a JSP, you must also define a servlet mapping to the JSP page.
	<url-pattern>/jspservlet</url-pattern>
</servlet-mapping>


Even the Jsp's can also have the URLS..When you invoke the appname/jspservlet --->It will map to servlet called /TestInit.jsp or /WEB-INF/TestInt.jsp

This way you can hide the .jsp extension to the user..

** Is there any annotation style of configuring the init-params for the JSP..

Overriding the jspint():
------------------------

Yes, it’s that simple. If you implement a jspInit() method, the Container calls this method at the beginning of this page’s life as a servlet. It’s called from the servlet’s init() method, so by the time this method runs there is a ServletConfig and ServletContext available to the servlet. That means you can call getServletConfig() and getServletContext() from within the jspInit() method.

This example uses the jspInit() method to retrieve a servlet init parameter (configured in the DD), and uses the value to set an application-scoped attribute

<%!						         //Override the jspInit() method using a declaration
public void jspInit() {
ServletConfig sConfig = getServletConfig();		//You’re in a servlet, so you can call your inherited getServletConfig() method
String emailAddr = sConfig.getInitParameter(“email”);	
ServletContext ctx = getServletContext();		//Get a reference to the ServletContext and set an application-scope attribute.
ctx.setAttribute(“mail”, emailAddr);
}
%>


The example on the opposite page shows the JSP setting an application-scoped attribute using a method declaration that overrides jspInit(). But most of the
time you’ll be using one of the four implicit objects to get and set attributes corresponding to the four attribute scopes available in a JSP.

**The implicit Objects will not be available in the jsp init and jspdestroy methods that you write..


In JSP the things that go into the service method:


Application 		getServletContext().setAttribute(“foo”, barObj); 			application.setAttribute(“foo”, barObj);
Request 		request.setAttribute(“foo”, barObj); 					request.setAttribute(“foo”, barObj);
Session 		request.getSession().setAttribute(“foo”, barObj); 			session.setAttribute(“foo”, barObj);
Page			Page Does not apply! 							pageContext.setAttribute(“foo”, barObj);

But this isn’t the whole story! In a JSP, there’s another way to get and set attributes at any scope, using only the pageContext implicit object

There’s no such thing as “context” scope... even though attributes in application scope are bound to the ServletContext object	

The naming convention might trick you into thinking that attributes stored in the ServletContext are... context scope. But there’s no such thing.
Remember, when you see “Context”, think “application”. But there’s an inconsistency between the servlet and JSP names used to get app-scoped attributes—in a servlet, you say:

getServletContext().getAttribute(“foo”)  but in a JSP you say:
application.getAttribute(“foo”)

Using PageContext for attributes:
---------------------------------

You can use a PageContext reference to get attributes from any scope, including the page scope for attributes bound to the PageContext

The methods that work with other scopes take an int argument to indicate the scope. Although the attribute access methods come from JspContext, you’ll find the constants for the scopes inside the PageContext class

JspContext:
   |	
getAttribute(String name)
getAttribute(String name, int scope)
getAttributeNamesInScope(int scope)
findAttribute(String name)

PageContext

APPLICATION_SCOPE
PAGE_SCOPE
REQUEST_SCOPE			static final fields
SESSION_SCOPE

getRequest()
getServletConfi g()
getServletContext()
getSession()


Examples using pageContext to get and set attributes:::
-----------------------------------------------------

Setting a page-scoped attribute:

<% Float one = new Float(42.5); %> <% pageContext.setAttribute(“foo”, one); %>

Getting a page-scoped attribute :   <%= pageContext.getAttribute(“foo”) %>

Using the pageContext to set a session-scoped attribute

<% Float two = new Float(22.4); %>
<% pageContext.setAttribute(“foo”, two, PageContext.SESSION_SCOPE); %>

Using the pageContext to get a session-scoped attribute

<%= pageContext.getAttribute(“foo”, PageContext.SESSION_SCOPE) %> (Which is identical to: <%= session.getAttribute(“foo”) %> )


<%= pageContext.getAttribute(“mail”, PageContext.APPLICATION_SCOPE) %> identical to (Email is: <%= application.getAttribute(“mail”) %>)

****Using the PageCOntext for getting & setting the attributes is bit uglier and heavy.. But there is no way for setting and retriving the page scoped attributes...

Using the pageContext to find an attribute when you don’t know the scope

<%= pageContext.findAttribute(“foo”) %>find it where?

Where does the findAttribute() method look? It looks first in the page context, so if there’s a “foo” attribute with page context scope, then calling findAttribute(String name) on a PageContext works just like calling getAttribute(String name) on a PageContext. But if there’s no “foo” attribute, the method starts looking in other scopes, from most restricted to least restricted scope —in other words, first request scope, then session, then finally application scope. The fi rst one it fi nds with that name wins.

The below things are like expressions.. 

<%= request.getAttribute()%> <%= session.getAttribute()%> <%= application.getAttribute()%> <%= pageContext.getAttribute("“foo”")%>(for pagescope)

The below things are like statements

<% request.setAttribute()%> <% session.setAttribute()%> <% application.setAttribute()%> <% pageContext.setAttribute("foo",one)%>(for pagescope)

We already looked at the directive used for getting import statements into the generated servlet class made from your JSP. That was a page directive (one of the three directive types) with an import attribute (one of 13 attributes of the page directive).

<%@ page import=”foo.*” session=”false” %>  ****Translation time Accordingly servlet code will be written

Defines page-specific properties such as character encoding, the content type for this page’s response, and whether this page should have the implicit session object.A page directive can use up to thirteen different attributes (like the import attribute), although only four attributes are covered on the exam.

The taglib directive:			*** Translation time accordingly the taglibs will be used..
--------------------

<%@ taglib tagdir=”/WEB-INF/tags/cool” prefix=”cool” %>Defines tag libraries available to the JSP. We haven’t talked about using custom tags and standard actions yet... 

The include directive:
---------------------

<%@ include file=”wickedHeader.html” %> ****Translation time

Defines text and code that gets added into the current page at translation time. This lets you build reusable chunks (like a standard page heading or navigation bar) that can be added to each page without having to duplicate all that code in each JSP.

Attributes to the page directive:
---------------------------------

import: for free (by default): java.lang (duh), javax.servlet, javax.servlet.http, and javax.servlet.jsp
isThreadSafe: by default true.. if false it implements the SingleThreadModel
contentType:Defines the MIME type (and optional character encoding) for the JSP response
isELIgnored:Defines whether EL expressions are ignored when this page is translated.

isErrorPage:Defines whether the current page represents another JSP’s error page. The default value is “false”, but if it’s true, the page has access to 		    the implicit exception object..If false, the implicit exception object is not available to the JSP.
errorPage:Defines a URL to the resource to which uncaught Throwables should be sent. If you define a JSP here, then that JSP will have an isErrorPage=”true” 	  attribute in its page directive

language: Defines the scripting language used in scriptlets, expressions, and declarations.
extends: Defines the superclass of the class this JSP will become. You won’t use this unless you REALLY know what you’re doing—it overrides the class 	 hierarchy provided by the Container

session: Defines whether the page will have an implicit session object. The default value is “true”.
buffer: Defines how buffering is handled by the implicit out object (reference to the JspWriter).
autoFlush: Defines whether the buffered output is flushed automatically. The default value is “true”.
info: Defines a String that gets put into the translated page, just so that you can get it using the generated servlet’s inherited getServletInfo() method
pageEncoding: Defines the character encoding for the JSP. The default is “ISO-8859-1”


Writing the Scriplets, Expressions and declartions code in the jsp page is Bad Programming practisce..Some people believe (OK, technically a lot of people including the JSP and Servlet spec teams) that it’s bad practice to put all this Java into your JSP.To clearly give the seprate roles for the webdesigners and Java Developers..

1) Web page designers shouldn’t have to know Java.
2) Java code in a JSP is hard to change and maintain

							EL is answer for everything:

Oh if only there were a way in a JSP to use simple tags that cause Java methods to run, without having to put actual Java code into the page

EL stands for “Expression Language”, and it became officially part of the spec beginning with JSP 2.0 spec..EL is nearly always a much simpler way to do some of the things you’d normally do with scriptlets and expressions..

But if I want my JSP to use custom methods, how can I declare and write those methods if I can’t use Java..Ahhhh... writing the actual functionality (method code) is not the purpose of EL. The purpose of EL is to offer a simpler way to invoke Java code—but the code itself belongs somewhere else.
That means in a regular old Java class that’s either a JavaBean, a class with static methods, or something called a Tag Handler. In other words, you don’t write method code into your JSP when you’re following today’s Best Practices. You write the Java method somewhere else, and call it using EL...

An EL expression ALWAYS looks like this: ${something} In other words, the expression is ALWAYS enclosed in curly braces, and prefixed with a dollar ($) sign

EL expression:Please contact: ${applicationScope.mail}
Java expression:Please contact: <%= application.getAttribute(“mail”) %>

EL it’s not always about you. EL is much easier for a non-Java programmer to learn and get up to speed in. And for a Java programmer, it is still much
easier to maintain a scriptless page..

You can make it invalid for a JSP to have scripting elements (scriptlets, Java expressions, or declarations) by putting a <scripting-invalid> tag in the DD:

<web-app>
<jsp-config>
	<jsp-property-group>
	<url-pattern>*.jsp</url-pattern>
	<scripting-invalid>true</scripting-invalid>
	</jsp-property-group>
</jsp-config>
</web-app>

This disables scripting elements for ALL JSPs in the app (because we used the wildcard *.jsp as the URL pattern.).. You cannot disable it for the particular JSP

Scripting validity:

DD configuration <scripting-invalid>	
------------------------------------
unspecified	evaluated
true		error
false		evaluated

****You can only disable scripting elements through the DD. The <jsp-property-group> element allows you to disable scripting in selective JSPs by specifying URL patterns to be disabled

You can also choose to Ignore the EL:
-------------------------------------

It’s kind of the same thing with disabling EL—if you happened to have template text (plain old HTML or text) in your JSP that included something that looked like EL (${something}), you’d be in Big Trouble if you couldn’t tell the Container to just ignore anything that appears to be EL and instead treat it like any other unprocessed text....

If you want EL-looking things in your JSP to be ignored, you have to say so explicitly, either through a page directive or a DD element.

<web-app ...>
<jsp-confi g>
	<jsp-property-group>
	<url-pattern>*.jsp</url-pattern>
	<el-ignored>true</el-ignored>
	</jsp-property-group>
</jsp-config>
</web-app>

Using the isELIgnored page directive attribute::<%@ page isELIgnored=”true” %>

The page directive takes priority over the DD setting:: If there’s a conflict between the <el-ignored> setting in the DD and the isELIgnored page directive attribute, the directive always wins! That lets you specify the default behavior in the DD, but override it for a specific page using a page directive

DD el-ignored		Page Directive(isElIgnored)     
unspecified		unspecified				evaluated
false			unspecified				evaluated
true			unspecified				ignored
false			false					evaluated
false			true					ignored
true			false					evaluated


JSP Actions:
-----------

Standard Action: <jsp:include page=”wickedFooter.jsp” />  Custom Action: <c:set var=”rate” value=”32” />

Although that’s misleading, because there are some actions that aren’t considered standard actions, but which are still part of a now-standard library. In other words, you’ll later learn that some of the non-standard (the objectives refer to them as custom) actions are... standard, but yet they still aren’t considered “standard actions”. Yes, that’s right—they’re standardized non-standard custom actions.

***Custom actions are part of the standard Library but they aren't considered as the Standard Actions.(they’re standardized non-standard custom actions)

The word “expression” by itself means “scripting expression” NOT “EL expression”....

Of course the word “expression” is overloaded for JSP elements. If you see the word “expression” or “scripting expression” it means the same thing—an expression using Java language syntax: <%= foo.getName() %>..The only time the word “expression” refers to EL is if you specifically see “EL” in the descriptions or label! So, always assume that the default for the word “expression” is “scripting/Java expression”, not EL.

****All the standardActions/CustomActions & Expression language statements,scriplets,expressions and declrations are translated into the Java Statements before they are itself put into the service methods..


							Expression Language:
							--------------------

Inside the Scripting elements we can use the jsp default Objects.. In the expression language we should use the Expression Language implicit Objects..

JSP View Code: Hello <%= request.getAttribute(“name”) %>

Use a scripting expression to get the attribute and print it to the response..scripting expressions are ALWAYS the argument to the out.print() method

But what if the attribute is not a String, but an instance of Person?

foo.Person p = new foo.Person();
p.setName(“Evan”);
request.setAttribute(“person”, p);

Person is: <%= request.getAttribute(“person”) %>	Person is: foo.Person@512d66

Modify the JSP Code to: <% foo.Person p = (foo.Person) request.getAttribute(“person”); %> 		Person is: <%= p.getName() %>

OR using an expression:: Person is: <%= ((foo.Person) request.getAttribute(“person”)).getName() %>


JavaBean Spec:And not just a Person, but a Person with a “name” property. We’re using the term “property” in the non-enterprise JavaBean* way—the Person ------------
class has a getName() and setName() method pair, which in the JavaBean spec means Person has a property called “name”.

Bean Realted Standard Actions:
------------------------------
With a couple of standard actions, we can eliminate all the scripting code in our JSP (remember: scripting code includes declarations, scriptlets, and expressions) and still print out the value of the person attribute’s name property. Don’t forget that name is not an attribute—only the person object is an attribute. The name property is simply the thing returned from a Person’s getName() method.

<jsp:useBean id=”person” class=”foo.Person” scope=”request” /> Search for the attribute "person" in the Request scope..need to give class name

Person created by servlet: <jsp:getProperty name=”person” property=”name” />

<!-- Java in the JSP.. Dont use the scripting   -->
		<% Person person=(Person)request.getAttribute("person"); %>
		<% out.println(person.toString()); %>
		<%= person.getName() %>
		<%=((Person) request.getAttribute("person")).getName() %>
		
		<jsp:useBean id="person" class="com.model.Person" scope="request"/>		Duplicate Local Varaible Error will be received
		<jsp:getProperty property="name" name="person"/>				Background all elements are converted into the JavaCode


Deconstructing <jsp:useBean> and <jsp:getProperty>:
---------------------------------------------------

All we really wanted was the functionality of <jsp:getProperty> because we wanted only to display the value of the person’s “name” property. But how does the Container know what “person” means? If we had only the <jsp:getProperty> tag in the JSP, it’s almost like using an undeclared variable—the name “person”. The Container usually has no idea what you’re talking about, unless you FIRST put a <jsp:useBean> into the page. The <jsp:useBean> is a way of declaring and initializing the actual bean object you’re using in <jsp:getProperty>.

<jsp:useBean id="person" class="com.model.Person" scope="request"/>: Translate to 	Person person=request.getAttribute("person");
<jsp:getProperty property="name" name="person"/>		     Translate to 	out.print(person.getName())
<jsp:getProperty property="name" name="person"/>	 	     Translate to 	out.print(person.getName())

<jsp:useBean id=”person” class=”foo.Person” scope=”request” />

<jsp:useBean>:Identifies the standard action	
id=”person”Declares the identifier for the bean object. This corresponds to the name used when the servlet code said: request.setAttribute(“person”, p);
class=”foo.Person” Declares the class type (fully-qualified, of course) for the bean object
scope=”request”  Identifies the attribute scope for this bean object

<jsp:getProperty name=”person” property=”name” />

<jsp:getProperty Identifies the standard action
name=”person”	Identifies the actual bean object. This will match the “id” value from the <jsp:useBean> tag.
property=”name” Identifies the property name (in other words, the thing with the getter and setter in the bean class).


<jsp:useBean> can also CREATE a bean!::
---------------------------------------

If the <jsp:useBean> can’t find an attribute object named “person”, it can make one! It’s kind of the way request.getSession() (or getSession(true)) works—it first searches for an existing thing, but if it doesn’t find one, it creates one

Look at the code from the generated servlet, and you’ll see what’s happening—there’s an if test in there! It checks for a bean based on the values of id and scope in the tag, and if it doesn’t get one, it makes an instance of the class specified in class, assigns the object to the id variable, then sets it as an attribute in the scope you defined in the tag.

Turns into this code in the _jspService() method

foo.Person person = null;
Declare a variable based on the value of id. This variable is what lets other parts of your JSP (including other bean tags) refer to that variable.
synchronized (request) {
person = (foo.Person)_jspx_page_context.getAttribute(“person”, PageContext.REQUEST_SCOPE);
if (person == null){									BUT, if there was NOT an attribute with that name at that scope...
person = new foo.Person();
_jspx_page_context.setAttribute(“person”, person, PageContext.REQUEST_SCOPE);
}						Finally, set the new object as an attribute at the scope you defined
}

You can use <jsp:setProperty>:

<jsp:useBean id=”person” class=”foo.Person” scope=”request” />
<jsp:setProperty name=”person” property=”name” value=”Fred” />

That’s worse! NOW it means that if the bean already existed, my JSP will reset the existing bean’s property value!
I want to set the property on only the NEW beans...

<jsp:useBean> can have a body!:  jsp:useBean searches for the attribute inside the scope 
------------------------------

If you put your setter code (<jsp:setProperty>) inside the body of <jsp:useBean>, the property setting is conditional! In other words, the property values will be set only if a new bean is created. If an existing bean with that scope and id are found, the body of the tag will never run, so the property won’t be reset from your JSP code.

<jsp:useBean id=”person” class=”foo.Person” scope=”request”>
<jsp:setProperty name=”person” property=”name” value=”Fred” />
<jsp:useBean/>


Bean Laws:

Why didn’t they just let you specify arguments to the constructor of the bean? Why do you have to go through the extra trouble of setting values anyway?

The simple answer is this: beans can’t HAVE constructors with arguments! Well, as a Java class, they can, but when an object is going to be treated as a bean, Bean Law states that ONLY the bean’s public, no-arg constructor will be called. End of story. In fact if you do NOT have a public no-arg constructor in your bean class, this whole thing will fail anyway.

What the Heck is the Beans Law?

1) You MUST have a public, no-arg constructor

2) You MUST name your public getter and setter methods starting with “get” (or “is”, for a boolean) and “set”, followed by the same word. 
(getFoo(), setFoo()).The property name is derived from stripping off the “get” and “set”, and changing the first character of what’s left to lowercase.

3) The setter argument type and the getter return type MUST be identical. This defines the property type. int getFoo() void setFoo(int foo)

4)The property name and type are derived from the getters and setters and NOT from a member in the class. For example, just because you have a private int foo variable does NOT mean a thing in terms of properties. You can name your variables whatever you like. The “foo” property name comes from the methods. In other words, you have a property simply because you have a getter and setter

5)5) For use with JSPs, the property type SHOULD be a type that is either a String or a primitive. If it isn’t, it can still be a legal bean, but you won’t be able to rely only on standard actions, and you might have to use scripting.


Can you make polymorphic bean references?

When you write a <jsp:useBean>, the class attribute determines the class of the new object (if one is created). It also determines the type of the reference variable used in the generated servlet.

<jsp:useBean id=”person” class=”foo.Person” scope=”page” />

foo.Person person = null;
// code to get the person attribute
if (person == null){
person = new foo.Person();
}

What if we want the reference type to be different from the actual object type?We’ll change the Person class to make it abstract, and make a concrete subclass Employee. Imagine we want the reference type to be Person, and the new object type to be Employee.

Our original JSP
<jsp:useBean id=”person” class=”foo.Person” scope=”page”/>The attribute doesn't allow Person class becuase it cannot create the Object.. 

CE://java.lang.InstantiationException: foo.Person  Because the Container tries to: new foo.Person();

Person is now abstract! Obviously,you can’t make one, but the Container still tries, based on the class attribute in the tag...

We need to make the reference variable type Person, and the object an instance of class Employee. Adding a type attribute to the tag lets us do that.

<jsp:useBean id=”person” type=”foo.Person” class=”foo.Employee” scope=”page”>

foo.Person person = null;
// code to get the person attribute
if (person == null){
person = new foo.Employee();		Now the reference type is the abstract Person and the object type is the concrete Employee
}

Type can be a class type, abstract type, or an interface—anything that you can use as a declared reference type for the class type of the bean object...
You can’t violate Java typing rules, of course. If the class type can’t be assigned to the reference type, you’re screwed. So that means the class must be a subclass or concrete implementation of the type

What if you have the only Type attribute but you don't have the class attribute:
--------------------------------------------------------------------------------

What happens if we declare a type, but not a class? Does it matter if the type is abstract or concrete

<jsp:useBean id=”person” type=”foo.Person” scope=”page”/> It searches for the attribute of types Person in the page scope.. The attribute can be the Employee or the any other subtype..If it is found you're out of the danger. Else jsp:useBean tries to create the newBean but it doesn't have class attribute
so we get the exception..java.lang.InstantiationException: bean person not found within scope

If type is used without class, the bean must already exist.
If class is used (with or without type) the class must NOT be abstract, and must have a public no-arg constructor..If class is abstract we will get CE

In your example, “foo.Person” is an abstract type, so of COURSE it can’t be instantiated. What if you change the type to “foo.Employee”? Will it use the type for both the reference AND the object type?

<jsp:useBean id=”person” type=”foo.Employee” scope=”page”/> It searches for the attributes of type Employee or the subtypes. If it doesn't find it tries to create the Object. We have Refrenced varaible type given as part of type attribute but the Object type was not given as part of the class attribute..

Container cannot use the fallback mechanism..“If you can’t find the object, go ahead and use the type for BOTH the reference and the object.” No, that is NOT how it works.if you use type without class, you better make CERTAIN that the bean is already stored as an attribute, at the scope and with the id you put in the tag.if you use type without class, you better make CERTAIN that the bean is already stored as an attribute, at the scope and with the id you put in the tag.

The scope attribute defaults to “page”
If you don’t specify a scope in either the <jsp:useBean> or <jsp:getProperty> tags, the Container uses the default of “page"

This: <jsp:useBean id=”person” class=”foo.Employee” scope=”page”/>
Is the same as this:: <jsp:useBean id=”person” class=”foo.Employee”/>

<jsp:useBean id=”person” type=”foo.Employee” class=”foo.Person”/>

Be prepared to recognize that this will NEVER work! You’ll get a big fat: org.apache.jasper.JasperException: Unable to compile class for JSP foo.Person is abstract; cannot be instantiated Person = new foo.Person();

Be SURE that you remember: type == reference type class == object type 
type is what you DECLARE (can be abstract) class is what you INSTANTIATE (must be concrete)


				Going straight from the request to the JSP without going through a servlet
				--------------------------------------------------------------------------

Is there a way I can use the request parameters to set a bean property, WITHOUT using scripting?

<form action=“TestBean.jsp”>
name: <input type=“text” name=“userName”>
ID#: <input type=“text” name=“userID”>
<input type=”submit”>
</form>

<jsp:useBean id=“person” type=“foo.Person” class=“foo.Employee”/>
<% person.setName(request.getParameter(“userName”)); %>

<jsp:useBean id=“person” type=“foo.Person” class=“foo.Employee”>
<jsp:setProperty name=“person” property=“name” value='<%= request.getParameter(“userName”) %>' />
</jsp:useBean>

Yes, you ARE seeing an expression INSIDE the <jsp:setProperty> tag (which happens to be inside the body of a <jsp:useBean> tag) And yes, it DOES look bad

Example:
-------

<form action="formParameters.jsp">
Name: <input type="text" name="userName">
ID#: <input type="text" name="userID">
<input type="submit">
</form>

abstract public class Person {
	String name;
	public void setName(String name) {
		this.name = name;
	}
}

public class Employee extends Person{
	private Integer empId;
	public void setEmpId(Integer empId) {
		this.empId = empId;
	}
}

<jsp:useBean id="person" type="com.model.Person" class="com.model.Employee">
<jsp:setProperty name="person" property="name" value='<%=request.getParameter("userName")%>'/>
<jsp:setProperty name="person" property="empId" value='<%=Integer.parseInt(request.getParameter("userID"))%>'/>
</jsp:useBean>

You should take the extra Headache of Converting them to the Type it is required...

The param attribute to the rescue:
------------------------------------
It’s so simple. You can send a request parameter straight into a bean, without scripting, using the param attribute

***The param attribute lets you set the value of a bean property to the value of a request parameter. JUST by naming the request parameter!

<jsp:setProperty name="person" property="empId" param="userID"/> 
The param value “userName” comes from the name attribute of the form’s input field

There is a chance that if you don't specify the requestParamName correctly you will receive the null value from the front end..

*****param takes the Headche of converting it to the required types 

But wait! It gets even better...

And all you have to do is make sure your form input field name (which becomes the request parameter name) is the same as the property name in your bean. Then in the <jsp:setProperty> tag, you don’t have to specify the param attribute. If you name the property but don’t specify a value or param, you’re telling the Container to get the value from a request parameter with a matching name...

<jsp:setProperty name="person" property="empId" value='<%=Integer.parseInt(request.getParameter("userID"))%>'/> you have do Parsing explictly
<jsp:setProperty name="person" property="empId" param="userID"/> You don't have to do the parsing
<jsp:setProperty name="person" property="empID"/>  	*******If the form parameter name and bean property name are same	
<!-- Look for the requestParameter with name and set its value here in beans name property -->

<jsp:setProperty name="person" property="*"/> If all the input field names of the form are matching to Bean Property names then container does work automatcally..

JSP::I want you to iterate through the request parameters, and find any that match this bean’s property names, and set the VALUE of the matching properties equal to the value of the corresponding request parameter...

Container:Oh sure... make ME do all the work. I have to look at the bean class getters and setters to figure out the bean properties, then match that to
the parameter names...

Bean tags convert primitive properties automatically:
----------------------------------------------------

JavaBean properties can be anything, but if they’re Strings or primitives, all the coercing is done for you. That’s right—you don’t have to do the parsing and conversion yourself..

OK, I’m thinking that the Container code is doing some kind of Integer.parseInt(“343”), so wouldn’t you get a NumberFormatException if the user doesn’t type in something that can be parsed to an int? Like, what if the user types “three” in the employee ID fi eld

Good catch. Yes, something will definitely go wrong if the request parameter for the empID property can’t be parsed into an int. You need to validate the contents of that field, to make sure it contains only numeric characters. You could send the form data to a servlet first, instead of sending it straight to the JSP. But if you’re committed to going from the form straight to the JSP, and you don’t want scripting, just use JavaScript in the HTML form to check the
field before sending the request

Working with complex Datatype using the <jsp:useBean> and <jsp:setProperty>?

If a bean property doesn’t have to be a String or a primitive, then HOW can you set the property without scripting? The value attribute of the tag is always a String, right?

It is possible (but potentially a *lot* of extra work) to create a special class, called a custom property editor, that supports the bean. It takes your String value and figures out how to parse that into something that can be used to set a more complex type... This is part of the JavaBeans spec,though, not the JSP spec. Also, if the value attribute in the <jsp:setProperty> tag is an expression rather than a String literal, then IF that expression evaluates to an object that’s compatible with bean property type, then it will probably work. If you pass in an expression that evaluates to a Dog, for example, the Person bean’s setDog(Dog) method will be called. But think about it—this means the Dog object must already exist. Anyway, you’re way better off NOT trying to construct new things in your JSP! Trying to get away with constructing and setting even marginally complex data types is gonna be tough without scripting

***If the request if coming from servlet to the jsp and working to set the properties of String/Primitive types in the JSP Bean then you have to use the value attribute.. If you have to deal with the complex types then you need to write the scripting(expression) inside the value attribute..Even if you set the complex type using the value attribute it is difficult to retrive using the <jsp:getProperty> where you can retrive the only simple String and primitive Types..

***If the request is Coming from the form/html and want to map all the coming field values to Bean then you use the <jsp:setProperty> with the param attribute.As the coming values from the fields are of the String type then <jsp:setProperty> tag is capable of coercing into the required primtive 
datatypes automatically... If you maintain the input filed names same with the bean property names then you don't have to use the param tag also

****Automatic String-to-primitive conversion does NOT work if you use scripting!! It fails even if an expression is INSIDE the <jsp:setProperty> tag

If you use the <jsp:setProperty> standard action tag with the property wildcard, OR just a property name without a value or param attribute (which means the property name matches the request parameter name), OR you use a param attribute to indicate the request parameter whose value should be assigned to the bean’s property, OR you type a literal value, the automatic conversion from String to int works. Each of these examples converts automatically

<jsp:setProperty name=”person” property=”*” />
<jsp:setProperty name=”person” property=”empID” />				====> All these works..
<jsp:setProperty name=”person” property=”empID” value=”343” />
<jsp:setProperty name=”person” property=”empID” param=”empID” />

BUT... if you use scripting, the automatic conversion does NOT work:
<jsp:setProperty name=”person” property=”empID” value=”<%= request.getParameter(“empID”)%>”/>
------------------------------------------------------------------------------------------------------------------------------------------------------------
But what if the property is something OTHER than a String or primitive?

That worked fine, because the standard actions can handle String and primitive properties. So, we know that standard actions can deal with an attribute of any type, as long as all the attribute’s properties are Strings or primitives

Person has a String “name” property. Person has a Dog “dog” property. Dog has a String “name” property

What if we want to print the name of the Person’s dog?

foo.Person p = new foo.Person(); p.setName(“Evan”);
foo.Dog dog = new foo.Dog(); dog.setName(“Spike”); p.setDog(dog);
request.setAttribute(“person”, p); RequestDispatcher view = request.getRequestDispatcher(“result.jsp”); view.forward(request, response);

Trying to display the property of the property..We know we can do it with scripting, but can we do it with the bean standard actions?
What happens if we put “dog” as the property in the <jsp:getProperty> tag?

Without standard actions (using scripting):<%= ((foo.Person) request.getAttribute(“person”)).getDog().getName() %>

With standard actions (no scripting): 
<jsp:useBean id=”person” class=”foo.Person” scope=”request” /> 		Dog’s name is: <jsp:getProperty name=”person” property=”dog” />

										All we got was the result of Dog’s toString() method

The <jsp:getProperty> lets you access only the properties of the bean attribute. There’s no capability for nested properties, where you want a property of a property, rather than a property of the attribute


						Expression Language (EL) saves the day!:
						----------------------------------------

The JSP Expression Language (EL) was added to the JSP 2.0 spec, releasing us from the tyranny of scripting..

Dog’s name is: ${person.dog.name}	EL makes it easy to print nested properties... in other words, properties of properties!

This is it! We didn’t even declare what person means... it just knows

<%= ((foo.Person) request.getAttribute(“person”)).getDog().getName() %>

you’ll find things that wouldn’t work in Java but will work in EL, and vice-versa. Just don’t try to map Java language/syntax rules onto EL, and you’ll be fine..think of EL as a way to access Java objects without using Java..

EL expressions are ALWAYS within curly braces, and prefixed with the dollar sign..${person.name}

${firstThing.secondThing}	The first named variable in the expression is either an implicit object or an attribute.

EL IMPLICIT OBJECT:pageScope requestScope sessionScope applicationScope param paramValues header headerValues cookie initParam pageContext

pageContext:Of all the implicit objects, only pageContext is not a map. It’s an actual reference to the pageContext object! (And the pageContext is a JavaBean.)

OR ATTRIBUTE in pagescope/in requestscope/ in sessionscope/in applicationscope..If the first thing in the EL expression is an attribute, it can be the name of an attribute stored in any of the four available scopes.


** The first thing in the EL resolves to the JavaBean/Map.. Second thing has to be the JavaBean Property name or the Map Key..

The first variable is either an implicit object or an attribute, and the thing to the right of the dot is either a map key (if the first variable is a map) or a bean property if the first variable is an attribute that’s a JavaBean..

And the thing on the right must follow normal Java naming rules for identifiers...

****Must start with a letter, _, or $.After the first character, you can include numbers..Can’t be a Java keyword

**Please consider to prepare the attributes as the JavaBeans..

pageContext/attribute that is a bean and the named property doesn’t exist, then an exception is thrown...


					The [] operator is like the dot only way better
					-----------------------------------------------

${person[“name”]} ${person.name}

The dot operator works only when the thing on the right is a bean property or map key for the thing on the left. That’s it. But the [ ] operator is a lot more powerful and flexible...

The simple dot operator version works because person is a bean, and name is a property of person..

But what if person is an array?Or what if person is a List? Or what if name is something that can’t be expressed with the normal Java naming rules...

Map/attribute(JavaBean).(beanproperty/mapkey)..  Map/Attribute(JavaBean)/List/Array["ListIndex/ArrayIndex/MapKey/BeanProperty"]


class Person{

Details[] details;	
	
}

${requestScope.person.details["0"]} /${requestScope.person.details[0]}	 

${person.details[0]}/${person.details["0"]}  A String index is coerced to an int for arrays and Lists:

The EL for accessing an array is the same as the EL for accessing a List.In EL, the [ ] operator is NOT the array access operator. No, it’s just called the [ ] operator.We swear, look it up in the spec—it has no name! Just the symbol [ ]. Like Prince, kind of.) If it DID have a name, it would be the
array/List/Map/bean Property access operator.

java.util.ArrayList favoriteFood = new java.util.ArrayList();
favoriteFood.add(“chai ice cream”);
favoriteFood.add(“fajitas”);
favoriteFood.add(“thai pizza”);
favoriteFood.add(“anything in dark chocolate”);
request.setAttribute(“favoriteFood”, favoriteFood);


Foods are: ${favoriteFood} O/p:Foods are: [chai ice cream, faji-tas, thai pizza, anything in dark chocolate]
First food is ${favoriteFood[0]} 	O/p:First food is chai ice cream
Second food is ${favoriteFood[“1”]}	O/p:Second food is fajitas
${favoriteFood[“one”]}	Because “one” can’t be turned into an int. You’ll get an NFE error if the index can’t be coerced.

What happens if it's out of Index: Music is: ${musicList["1"]} o/p: Doesn't throw the ArrayIndexOOBoundsException..

Person is: ${requestScope.person.name} PropertyFound No Error
Person is: ${requestScope.person.name1} If the property is not found then it throws the  PropertyNotFoundException: Property 'name1' not found on type com.model.Employee

[] .

For the Java beans & Maps you can use the either operators []/.
--------------------------------------------------------------
Example1:

java.util.Map musicMap = new java.util.HashMap();
musicMap.put(“Ambient”, “Zero 7”);
musicMap.put(“Surf”, “Tahiti 80”);
musicMap.put(“DJ”, “BT”);
musicMap.put(“Indie”, “Travis”);
request.setAttribute(“musicMap”, musicMap);

Ambient is: ${musicMap.Ambient}		***Both expressions use Ambient as the key into a Map (since musicMap is a Map)
Ambient is: ${musicMap[“Ambient”]}

Example2:
String[] favoriteMusic = {"Zero 7", "Tahiti 80", "BT", "Frou Frou"};
Person person=new Employee();
person.setName("Muni");
Map<String,Person> map=new HashMap<String, Person>();
map.put("person", person);	

request.setAttribute("musicList", favoriteMusic);
request.setAttribute("person",person);
request.setAttribute("personMap", map);
		
Music is: ${musicList["4"]} <br/>
Person is: ${requestScope.person.name} <br/>
Person from Map: ${requestScope.personMap.person["name"]} <br/> If the Map key is also an Object it should be continued with . property
Person from Map: ${requestScope.personMap.person.name} 


["Mapkey/BeanProperty/ListIndex/ArrayIndex"]:: If the thing that is in the [] operator is not in the String , then it searches for the attribute underthat name in the request/page/session/applictionscope & substitutes the values of that attribute.(If there is an Implicit Object with same name then that Object will be used..)

Music is: ${musicMap[Ambient]}		Find an attribute named “Ambient”. Use the VALUE of that attribute as the key into the Map, or return null.

Example:

java.util.Map musicMap = new java.util.HashMap();
musicMap.put(“Ambient”, “Zero 7”);
musicMap.put(“Surf”, “Tahiti 80”);
musicMap.put(“DJ”, “BT”);
musicMap.put(“Indie”, “Frou Frou”);
request.setAttribute(“musicMap”, musicMap);
request.setAttribute(“Genre”, “Ambient”);	

Music is: ${musicMap[Ambient]} Without quotes around Ambient, this does NOT work!! Since there’s no bound attribute named “Ambient”, the result comes back 		 	null				
					   Evaluates to 
Music is ${musicMap[Genre]};------------------------------->Music is ${musicMap[“Ambient”]}

Because there IS a request attribute named “Genre” with a value of “Ambient”, and “Ambient” is a key into musicMap

If the Keyname/Propertyname is there as attribute in the anyof the request/session/context/page scope..Then use the above concept..

You can use nested expressions inside the brackets:
--------------------------------------------------

It’s expressions all the way down in EL. You nest expressions to any arbitrary level. In other words, you can put a complex expression inside a complex expression inside a.(it keeps going). And the expressions are evaluated from the inner most brackets out...

java.util.Map musicMap = new java.util.HashMap();
musicMap.put(“Ambient”, “Zero 7”);
musicMap.put(“Surf”, “Tahiti 80”);
musicMap.put(“DJ”, “BT”);
musicMap.put(“Indie”, “Frou Frou”);
request.setAttribute(“musicMap”, musicMap);
String[] musicTypes = {“Ambient”, “Surf”, “DJ”, “Indie”};
request.setAttribute(“MusicType”, musicTypes);


Music is ${musicMap[	MusicType[0]	]}
		      Evaluated First				

Music is ${musicMap[“Ambient”]}

						You can’t do ${foo.1}
						----------------------
With beans and Maps, you can use the dot operator, but only if the thing you type after the dot is a legal Java identifer..

		   converted							 Can't be Converted
${musicMap.Ambient} ---->${musicMap[“Ambient”]}   		${musicList[“1”] -------------------->${musicList.1}
						

EL renders raw text, including HTML:
-----------------------------------

${pageContent.currentTip}  ***Assume the currentTip is <b></b> tags make things bold! 	O/P will be::  tags make things bold!

<%= pageContent.getCurrentTip() %>Whatever this evaluates to is treated as standard HTML, so any HTML tags are rendered, not displayed as text

<b>Tip of the Day:</b> <br/> <br/>
<jsp:getProperty name='pageContent' property='currentTip' />Same thing here. Text like <i></i> and <b></b> get rendered, not displayed as plain text.


What to do if you don't want browser to evaluate/render the HTML Special Characters?
So we want to send “&lt;” in order for the user to see the actual < character in the browser, and “&gt;” to produce the > character.

EL Implicit Objects:
------------------

pageScope requestScope sessionScope applicationScope...A Map of the scope attributes.

param paramValues....Maps of the request parameters  

header headerValues...Maps of the request headers

cookie...Ooohhhh... this is a tough one... could it be a Map of... cookies

initParam..A Map of the context init parameters (NOT servlet init parameters!)

pageContext:The only thing that is NOT a Map. This is the real deal—an actual reference to the pageContext object, which you can think of as a bean. Look in the API for the PageContext getter methods.

Request parameters in EL:
-------------------------

The param implicit object is fine when you know you have only one parameter for that particular parameter name. Use paramValues when you might have more than one parameter value for a given parameter name..

HTML FORM:
---------

<form action=”TestBean.jsp”>
Name: <input type=”text” name=”name”>
ID#: <input type=”text” name=”empID”>
First food: <input type=”text” name=”food”>		The “name” and “empID” will each have a single value. But the “food” parameter could
							have two values, if the user fills in both fields before hitting the submit button...
Second food: <input type=”text” name=”food”>
<input type=”submit”> </form>

JSP:
---

Request param name is: ${param.name} <br>	Remember, param is just a Map of parameter names and values. The things to the right of the dot come from 							the names specified in the input fields of the form
Request param empID is: ${param.empID} <br>

Request param food is: ${param.food} <br>	Even though there might be multiple values for the “food” parameter, you can still use the single param 							implicit object, but you’ll get only the first value
First food request param: ${paramValues.food[0]} <br>
Second food request param: ${paramValues.food[1]} <br>
Request param name: ${paramValues.name[0]}


What if you want more information from the request?
--------------------------------------------------

What if you want, say, the server host information that comes with the “host” header in the request? If you look in the HttpServletRequest API, you can see a getHeader(String) method. We know that if we pass “host” to the getHeader() method, we’ll get back something like: “localhost:8080” (because that’s where the web server is).

Host is: <%= request.getHeader(“host”) %>

But with EL, we’ve got the header implicit object: Host is: ${header[“host”]}

Host is: ${header.host} The header implicit object keeps a Map of all the headers. Use either access operator to pass in the header name and the value of that header will print. (Note: there’s also a headerValues implicit object for headers with multiple values. It works just like paramValues.)

Getting the HTTP request method:: 

We know we can do it with scripting... Method is: <%= request.getMethod() %>

But with EL, this will NOT work Method is: ${request.method} NO! NO! NO! There IS no implicit request object

Method is: ${requestScope.method} NO! NO! NO! There IS an implicit requestScope, but it’s NOT the request object itself

The requestScope is NOT the request object:
-------------------------------------------

The implicit requestScope is just a Map of the request scope attributes, not the request object itself! What you want (the HTTP method) is a property of the request object, not an attribute at request scope. In other words, you want something that comes from calling a getter method on the request object (if we treat the request object like a bean).

Use requestScope to get request ATTRIBUTES, not request PROPERTIES. For request properties, you need to go through pageContext.

Method is: ${pageContext.request.method} pageContext has a request property request has a method property


Don’t confuse the Map scope objects with the objects to which the attributes are bound.

It’s so easy to think that, say, applicationScope is a reference to ServletContext, since that’s where application-scoped attributes are bound.But just as with requestScope and the request object, the scope Map for application-scoped attributes is just that a Map of attributes, and nothing more. You can’t treat it like a Servlet Context, so don’t expect to get ServletContext properties back from the applicationScope implicit object


If EL looks through all the scopes anyway, why would I ever use one of the scope implicit objects? The only thing I can think of is a naming conflict, but I wonder if there might be another reason

Think about this scenario: if you have a name that’s not in quotes in brackets [ ], that means it MUST adhere to Java naming rules, right? Here, we’re OK, because person is a perfectly legal Java variable name. But that’s because somewhere, someone said,
request.setAttribute(“person”, p);

But an attribute name is a String!Strings don’t follow Java variable name rules! That means someone could say:
request.setAttribute(“foo.person”, p);

And then you’d be in trouble, because THIS won’t work::${foo.person.name}

NO! This is certainly legal, but the Container just thinks that “foo” is an attribute somewhere, with a “person” property. But the Container never finds a “foo” attribute


But you’ll be so thankful for scope objects, because using a scope object lets you switch to the [ ] operator, that can take String names that don’t conform to Java naming rules.${requestScope[“foo.person”].name}


Printing the value of the “userName” Cookie:
-------------------------------------------

This is kind of a pain, because the request object does NOT have a getCookie(cookieName) method! We have to get the whole Cookie array and iterate through it ourselves.

<% Cookie[] cookies = request.getCookies();
for (int i = 0; i < cookies.length; i++) {
if ((cookies[i].getName()).equals(“userName”)) {
out.println(cookies[i].getValue());
}
} %>

But with EL, we’ve got the Cookie implicit object :: ${ cookie.userName.value} WAY easier. Just give it the name, and the value comes back from the Map of Cookie names/values

Printing the value of a context init parameter:
-----------------------------------------------

<context-param>
<param-name>mainEmail</param-name>
<param-value>likewecare@wickedlysmart.com</param-value>
</context-param>

email is: <%= application.getInitParameter(“mainEmail”) %>

And with EL, it’s even easier::email is: ${ initParam.mainEmail}

					The EL initParam is NOT for params configured using <init-param>
					
Here’s what’s confusing: servlet init params are configured using <init-param> while context params use <context-param> but the EL implicit “initParam”
is for context params! Had they consulted us, we would have suggested that the spec designers might consider naming this variable, oh, “contextParam”...
but once again, they forgot to ask us.

							EL Functions:			
							-------------

Not just attribute or property values. If only there were a way to have an EL expression call a Java method that returns a value...then I would be happy.

When you need a little extra help from, say, a Java method, but you don’t want scripting, you can use an EL function. It’s an easy way to write a simple EL expression that calls a static method in a plain old Java class that you write. Whatever the method returns is used in the expression. It does take a tiny
bit more work to configure things, but functions give you

Step1:
	Write a Java class with a public static method.

This is just a plain old Java class. The method MUST be public and static, and it can have arguments. It should (but isn’t required to) have a non-void return type. After all, the whole point is to call this from a JSP and get something back that you can use as part of the expression or to print out.
Put the class file in the /WEB-INF/classes directory structure (matching the appropriate package directory structure, just like you would with any other class).

Step2:
	Write a Tag Library Descriptor (TLD) file

For an EL function, the TLD provides a mapping between the Java class that defines the function and the JSP that calls the function. That way, the function name and the actual method name can be different. You might be stuck with a class with a really stupid method name, for example, and maybe you want to provide a more obvious or intuitive name to page designers using EL. No problem—the TLD says, “This is the Java class, this is the method signature for the function (including return type) and this is the name we’ll use in EL expressions”. In other words, the name used in EL doesn’t have to be the same as the actual method name, and the TLD is where you map that.Put the TLD file inside the /WEB-INF directory. Name it with a .tld extension. (There are other places the TLD can go; we’ll talk about that in the next two chapters.)

TLD:

funcName--->ClassName RT MethodName(args)
funcName--->ClassName RT MethodName(args)	>>>For the overloaded methods within the same class can we use the same functionName in the TLD


Step 3:
	Put a taglib directive in your JSP.

The taglib directive tells the Container, “I’m going to use this TLD, and in the JSP, when I want to use a function from this TLD, I’m going to prefix it with this name...” In other words, it lets you define the namespace. You can use functions from more than one TLD, and even if the functions have the same name, that’s OK. The taglib directive is kind of like giving all your functions fully-qualified names. You invoke the function by giving both the function name AND the TLD prefix. The prefix can be anything you like.


Step 4: 
	Use EL to invoke the function.function from an expression using ${prefix:name()}.

Class:

package foo;
public class DiceRoller {
public static int rollDice() {
return (int) ((Math.random() * 6) + 1);
}
}

taglib>
<tlib-version>2.1</tlib-version>
<uri>DiceFunctions</uri>
<function>
<name>rollIt</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>int rollDice()</function-signature>
</function>
</taglib>

<%@ taglib prefix=”mine” uri=”DiceFunctions”%>	
The uri in the taglib directive tells the Container the name of the TLD (which does NOT have to be the name of the FILE!), which the Container needs so
it knows which method to call when the JSP invokes the EL function.

<html><body>${mine:rollIt()}		The function name rollIt() comes from the <name> in the TLD, not from anything in the actual Java class.
</body></html>


Deploying the tld file:
-----------------------
The only thing that’s new here is the “myFunctions.tld” file. It has to be somewhere within WEB-INF or one of its subdirectories (unless it’s deployed in a
JAR file, but we’ll talk about that later in the book).Here, because this app is so simple, we have both the DD (web.xml) and the TLD (myFunctions.tld) at the top level of WEB-INF, but you could organize them into subdirectories

The key point is that the class with the static function MUST be available to the app, so... for now, you know that putting it inside WEB-INF/classes will work. And remember that in the taglib directive in the JSP, we specified a URI that matches the URI declared in the TLD. For now, think of the URI as simply
whatever you decided to name the TLD. It’s just a name. In the next chapter on using custom tags, we’ll go into all the details about TLDs and URIs..


When the application is deployed container scans through the Entire Application & maintains the map that contains Map<URI,TLDLocationDetails>
But with old specifications we had configure in the web.xml file...

<jsp-config>
  <taglib>
  	<taglib-uri>https://journaldev.com/jsp/tlds/mytags</taglib-uri>
  	<taglib-location>/WEB-INF/numberformatter.tld</taglib-location>
  </taglib>
</jsp-config>

And remember that in the taglib directive in the JSP, we specified a URI that matches the URI declared in the TLD. For now, think of the URI as simply
whatever you decided to name the TLD. It’s just a name. In the next chapter on using custom tags, we’ll go into all the details about TLDs and URIs.

** For the overloaded methods in the class we can overload the function names in the TLD.. Every function should have the individual name..
** But within the two seprate TLD files we can have the same function names.

<function>
<name>rollIt</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>int rollDice()</function-signature>
</function>
<function>
<name>rollItWithString</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>java.lang.String rollDice(java.lang.String)</function-signature>
</function>
<function>
<name>rollDog</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>foo.Dog rollDog()</function-signature>
</function>

public static int rollDice() {
		return (int) ((Math.random() * 6) + 1);
	}
	
	public static String rollDice(String s) {
		return "Always a constant String I Print";
	}
	
	public static Dog rollDog() {
		Dog dog=new Dog();
		dog.setName("NewBiee");
		return dog;
	}

}
Dog dog=new Dog();
dog.setName("Villie");
request.setAttribute("dog", dog);

Getting the value from the reuestAttributes ${requestScope.dog.bark()} <br/>


A regular scriptlet expression MUST return something. If you say <%= foo.getFoo() %>, getFoo() must NOT have a void return type. (At least that’s what you said earlier.) So I’m thinking it’s the same with EL functions?

No! It’s NOT the same with EL functions,although just about everybody finds that... surprising. Think about this—if you’re calling an EL function that doesn’t return anything, then you’re calling it just for its side effects! Given that part of the goal for EL is to reduce the amount of logic in a JSP (a JSP is supposed to be the VIEW!), invoking an EL function just for its side effects doesn’t sound like a good idea

How did the Container find the TLD? The URI doesn’t match the path or file name of the TLD. Was this a miracle

Can an EL function have arguments?

Definitely. Just remember in the TLD to specify the fully-qualified class name (unless it’s a primitive) for each argument. A function
that takes a Map would be:

<function-signature>int rollDice(java.util.Map)</function-signature>   And call it with ${mine:rollDice(aMapAttribute)}

Notee::

Memorize the relationships between the class, the TLD, and the JSP. Most importantly, remember that the METHOD name does NOT have to match the FUNCTION
name. What you use in EL to invoke the function must match the <name> element in the <function> declaration in the TLD. The element for <function-signature> is there to tell the Container which method to call when the JSP uses the <name>. And the only place the class name appears (besides the class declaration itself) is in the <function-class> element.

						
							EL Operators:

You probably won’t (and shouldn’t) do calculations and logic from EL. Remember, a JSP is the View, and the View’s job is to render the response, not to make Big Important Decisions or do Big Processing..If you need real functionality, that’s normally the job of the Controller and Model. For lesser functionality, you’ve got custom tags (including the JSTL tags) and EL functions

But... for little things, sometimes a little arithmetic or a simple boolean test might come in handy. So, with that perspective, here’s a look at the most useful EL artithmetic, relational, and logical operators

Arithmetic (5):

Addition: +
Subtraction: -
Multiplication: *
Division: / and div		By the way... you CAN divide by zero in EL—you get INFINITY, not an error.
Remainder: % and mod		But you CANNOT use the Remainder operator against a zero—you’ll get an exception

Don’t use EL reserved words as identifiers!
------------------------------------------
You can already see 11 of them on this page—the alternate “words” for the relational, logical and some arithmetic operators. But there are a few more

true 	a boolean literal
false 	the OTHER boolean literal
null 	It means... null
instanceof (this is reserved for “the future”)
empty an operator to see if something is null or empty (eg. ${empty A}) returns true if A is null or empty


String num = “2”;
request.setAttribute(“num”, num);
Integer i = new Integer(3);
request.setAttribute(“integer”, i);

${num > 3}	false	The “num” attribute was found, and its value “2” coerced to an int

${integer le 12} true   Even better! The Integer value was converted to its primitive value, and then compared.

java.util.ArrayList list = new java.util.ArrayList();
list.add(“true”);
list.add(“false”);
list.add(“2”);
list.add(“10”);
request.setAttribute(“list”, list);

${list[0] || list[“1”] and true}  true		${num > integer}  false	   ${num == integer-1}  true

<jsp:useBean class=”foo.Dog” id=”myDog” >
<jsp:setProperty name=”myDog” property=”name” value=”${list[1]}” />
</jsp:useBean>

${myDog.name and true}	false         ${42 div 0}{o/p: Infinity}


EL Handles the Null Values Gracefully:
-------------------------------------

A key design decision the developers of EL came up with is to handle null values without throwing exceptions. Why? Because they figured “it’s better to show a partial, incomplete page than to show the user an error page.


Assume that there is not an attribute named “foo”, but there IS an attribute named “bar”, but that “bar” does not have a property or key named “foo”.

${foo}			
${foo[bar]}
${bar[foo]}		------------>Nothing prints out for these expressions. If you say “The value is: ${foo}.” You’ll just see “The value is.”
${foo.bar}

${7 + foo}	7
${7 / foo}      Infinity  	----------->In arithmetic expressions, EL treats the unknown variable as “zero”.
${7 - foo}	7 
${7 % foo}	Exception is thrown

${7 < foo}		false
${7 == foo}		false
${foo == foo}		true
${7 != foo}		true		------------------>In logical expressions, EL treats the unknown variable as “false”.
${true and foo}		false
${true or foo}		true
${not foo}		true


*****EL is null-friendly. It handles unknown or null values so that the page still displays, even if it can’t find an attribute/property/key with the name in the expression. In arithmetic, EL treats the null value as “zero”. In logical expressions, EL treats the null value as “false”.

***Inside the EL Expression you can use all the above operators and perfom small calculations..

							JSP INCLUDE:
							-----------
You have headers on every page on your web site. They’re always the same. You have the same footer on every page as well. How stupid would it be to code in the same header and footer tags into every JSP in your web app?

If you’re thinking like a Java programmer (which of course you are), you know that doing that is about as un-OO as it gets. The thought of all that duplicate code probably makes you feel a little sick. What happens when the site designer makes, oh, a tiny little change to the header or footer?

There’s a mechanism for handling this in a JSP—it’s called include. You write your JSP in the usual way, except that instead of putting the reusable stuff explicitly into the JSP you’re authoring, you instead tell the Container to include the other file into the existing page, at the location you select. It’s kind of like saying:


<html><body>
<!-- insert the header file here -->
Welcome to our site...
blah blah blah more stuff here...
<!-- insert the footer file here -->
</body></html>


In this section we’ll look at two different include mechanisms: the include directive and the <jsp:include/> standard action.


Include Directive:
------------------

The include directive tells the Container one thing: copy everything in the included file and paste it into this file, right here...

Header.jsp

<html><body>
<img src=”images/Web-Services.jpg” > <br>
<em><strong>We know how to make SOAP suck less.</strong></em> <br>
</body></html>

A JSP from the web app(“Contact.jsp”)
-------------------------------------
<html><body>
<%@ include file=”Header.jsp”%>	This says “Insert the complete Header.jsp file into this point in THIS page, then keep going with the rest of this JSP...”
<br>
<em>We can help.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>


<jsp:include> standard action:
------------------------------
<html><body>
<jsp:include page=”Header.jsp” /> <br> This says “Insert the response of Header.jsp file into this point in THIS page, then keep going with the rest of this 				       JSP...”
<em>We can help.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>


They’re NOT the same underneath::

The <jsp:include /> standard action and the include directive look the same, and often give the same result, but take a look at the generated servlets. We took this code directly out of the _jspService() method from Tomcat’s generated servlet code


Generated Code for the include directive:
-----------------------------------------

out.write(“<html><body>\r”);

out.write(“\r<html>\r<body>\r<img src=\”images/Web-Services.jpg\” >		This part in bold is EXACTLY the same as the Header.jsp page  generates		<br>\r<em><strong>We know how to make SOAP suck less.</strong></em> <br>\r\r</body>\r</html>\r”);

out.write(“\r<br>\r\r\r<em>We can help.</em> <br><br>\r\rContact us at: “);
out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(“${initParam.mainEmail}”, java.lang.String.class,
(PageContext)_jspx_page_context, null, false));
out.write(“\r\r\r</body></html>”);

The include directive just takes the contents of the “Header.jsp” file and places it into the “Contact.jsp” page BEFORE it does the translation!

Generated servlet for the JSP using the <jsp:include /> standard action
-----------------------------------------------------------------------

out.write(“<html><body>\r”);org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,“Header.jsp”, out, false);
out.write(“\r<br>\r\r\r<em>We can help.</em> <br><br>\r\rContact us at: “);
out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.
proprietaryEvaluate(“${initParam.mainEmail}”, java.lang.String.class,
(PageContext)_jspx_page_context, null, false));
out.write(“\r\r\r</body></html>”);

*******This is different! The original Header.jsp file is NOT inside the generated servlet. Instead, it’s some kind of runtime call

The include directive happens at translation time <jsp:include> happens at runtime:
----------------------------------------------------------------------------------

With the include directive, there is NO difference between you opening your JSP page and pasting in the contents of “Header.jsp”. In other words, it really is just as though you duplicated the code from the header file into your other JSP. Except the Container does it at translation time for you, so that you don’t have to duplicate the code everywhere. You can write all your pages with an include directive, and the Container will go through the trouble of copying the header code into each JSP before translating and compiling the generated servlet.

But <jsp:include> is a completely different story. Rather than copying in the source code from “Header.jsp”, the include standard action inserts the response of “Header.jsp”, at runtime. The key to <jsp:include> is that the Container is creating a RequestDispatcher from the page attribute and applying the include() method. The dispatched/included JSP executes against the same request and response objects, within the same thread.

Translation time work:

What happens if any changes made to to the included JSP file? How the container recognises the change? Does it fetches new changes agian? Yes

**Containers are having the ability to recognise them by somehow.. It fetches the new code again and translate and compile and runs the jsp with new code.
excpet for the whenevr you makes changes to included file the first request would take sometime..

**But With Runtime calls though you make the changes to the included jsp file frequently also it is not a problem...

So why wouldn’t you always use <jsp:include>? That way you can guarantee you’ll always have the latest content.

Think about it. There’s an extra performance hit with every <jsp:include>. With the directive, on the other hand, the hit happens only once—when the including page is translated. So if you’re pretty sure that once you go to production the included file won’t change, the directive might be the way to
go. Of course there’s still the tradeoff that the generated servlet class is a little larger when you use the directive

***I tried this with Tomcat— I made a static HTML fi le, and included it with the directive. Then I changed the HTML file, without redeploying or anything, and the output from the JSP refl ected the difference! So if that’s the case, then why ever use <jsp:include >?

Ahhh... you have a friendly Container (like Tomcat 5). Yes, most of the newer Containers have a way of detecting when the included files have changed, and they do retranslate the including file and everything’s great. The problem is that this is NOT GUARANTEED BY THE SPEC! So if you write your code to depend on it, your app won’t necessarily be portable to other Containers


NOte::With the include directive, the Container has a lot of work to do, but only on the first request. From the second request on, there’s no extra runtime overhead..With the include standard action, there’s less work at translation time, and more work with each request, especially if the included file is a JSP.


WorkFlow:
--------

The client makes a request for Contact.jsp, which has not been translated. The Container reads the Contact.jsp page to start the translation process..
The container sees the include directive, and combines the source code of Header.jsp and Contact.jsp, and creates/translates that into a Java source file for the generated servlet..The Container compiles the translated source file into a servlet class. It’s just like any other servlet at this point, and the previous step never has to happen again, unless Contact.jsp changes (or, if your Container is smart and can tell that the included Header.jsp has changed).
To complete the request, the Container loads the newly compiled class, initializes a servlet (instantiates the servlet then calls init() on the new object), allocates a thread for the request, and calls the _jspService() method. From the second request on, the Container does only step (C): allocates a thread and calls the _jspService() method

The <jsp:include> standard action at first request
--------------------------------------------------

The client makes a request for Contact. jsp, which has not been translated. The Container reads the Contact.jsp page to start the translation process..
The container sees the include standard action, and uses that to insert a method call in the generated servlet code that—at runtime—will dynamically
combine the response from Header. jsp into the response from Contact. jsp. The Container generates servlets for both JSP files. (This is not dictated
by the spec, so we’re showing only an example of how it could work.)..The Container compiles the translated source file into a servlet class. It’s
just like any other servlet at this point. The generated servlet class file is loaded into the Container’s JVM and is initialized. Next, the Container allocates a thread for the request and calls the JSP’s _jspService() method.....The Contact servlet hits the method that does the dynamic include, and
something vendor-specific happens! All we care about is that the response generated by the Header servlet is combined with the response from the
Contact servlet (at the appropriate place). (NOT SHOWN: at some point the Header.jsp is translated and compiled, then the generated servlet class is
loaded and initialized)...


Yep. The directive attribute is fi le but the standard action attribute is page! To help you remember, the include directive <%@ include file=”foo.jsp” %> is used only at translation time (as with all directives). And when translating, the Container cares only about fi les—.jsp to .java, and .java to .class.
But the <jsp:include page=”foo.jsp”> standard action, as with all standard actions, is executed at request time, when the Container cares about pages to be executed..

Can the included JSP have its own dynamic content? In your examples, the Header.jsp might as well have been a static Header.html page

It’s a JSP, so yes it can be dynamic (but you’re right— in our example we could have made the header a static HTML page and it would have worked in exactly the same way). There are a few limitations, though: an included page CANNOT change the response status code or set headers (which means it can’t call, say, addCookies()). You won’t get an error if the included JSP tries to do things it can’t—you just won’t get what you asked for....

** The included page can't do anything with the response Object>.Like adding the cookies,seeting the repsonse headers chainging the status code like that..

But if the included thing is dynamic, and you’re using the static include directive, does that mean that the dynamic stuff is evaluated only once?

Let’s say you include a JSP that has an EL expression that calls the rollIt function that generates a random number. Remember, with the include directive, that EL expression is simply copied into the includING JSP. So each time that page is accessed, the EL expression runs and a new random
number is generated. Burn this in: with the include directive, the source of the included thing becomes PART of the page with the include directive.


Recommendattions:
-----------------

<%@ include file="static.html" %> <jsp:include page="dynamic.jsp" />

But you can also do this::  

<%@ include file="dynamic.jsp" %> Yes you can do it.. It can be achived.Dynamic content will be evaluated every time the request comes in

<jsp:include page="static.html" /> Never recommended to have the static pages that doesn't change once prepared using the <jsp:include>.. It is a runtime hit every time..


The include directive is position-sensitive!

And it’s the ONLY directive whose position in the JSP actually matters. With a page directive, for example, you can put it anywhere in the page, although by convention most people put page directives at the top

<html><body>
<%@ include fi le=”Header.html”%> <br>
<em>We can help.</em> <br><br>
Contact us at: ${initParam.mainEmail} <br>
<%@ include fi le=”Footer.html”%>
</body></html>

Remember, everything from the JSP plus the two included files is combined into one big page

And, yes, the <jsp:include> is of course ALSO position-sensitive, but that’s more obvious than with the include directive..


HELLO! Did you actually LOOK at the generated servlet code for the include directive? You’ve got nested HTML and BODY tags! That’s wrong and stupid.

We made a page for the header, “Header.jsp”. It was a nice JSP all on its own, complete with its opening and closing HTML and BODY tags. Then we made the “Contact.jsp” and it, too, had nice opening and closing tags. Well, didn’t we say that everything in the included file is pasted (virtually) into the page with the include? That means everything

The code below, from the generated servlet, will NOT work in all browsers. It worked in ours because we got lucky.

Do NOT put opening and closing HTML and BODY tags within your reusable pieces! Design and write your layout template chunks (like headers, nav bars, etc.) assuming they will be included in some OTHER page.

Container:Don’t expect ME to strip out your redundant opening and closing tags.

Note: this idea of stripping out the opening and closing tags applies to BOTH include mechanisms <jsp:include> and the include directive.

Customizing the included content with <jsp:param>:
-------------------------------------------------

OK, so you’ve got a header that’s supposed to appear the same way on every page. But what if you want to customize part of the header? What if you want, say, a context-sensitive subtitle that’s part of the header, but that changes depending on the page? You have a couple options


The dumb way: put the subtitle information into the main page, as, say, the first thing in your page after the include for the header.

The smarter way: pass the subtitle information as a new request parameter to the included page!

Why that’s cool: if the subtitle information is supposed to be part of the header, but it’s a part that changes, you still want the header part of the template to make the decision about how that subtitle should appear in the final page. In other words, let the person who designed the header decide how the subtitle should be rendered

JSP that does the include:	
-------------------------
<html><body>
<jsp:include page=”Header.jsp” >
<jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>		<jsp:include> can have a BODY, so that you add (or replace) request parameters that the included thing can use.
<br>
<em>Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>

The included header that USES the new param (“Header.jspf”)

<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em> <br>
To the included file, the param set with <jsp:param> is just like any OTHER request parameter. Here we’re using EL to get it.

Note: this idea of params doesn’t make any sense with the include directive (which is not dynamic), so it applies ONLY to the <jsp:include> standard action.

if I can include one JSP in another, what if I wanted to forward from one JSP to another? If the client gets to my page and hasn’t logged in, I want to send him to a different page...

Of course, you don’t usually want to do this in production, because if you’re using MVC, the View is supposed to be the View! And the View has no business doing control logic. In other words, it shouldn’t be the View’s job to figure out if the guy is logged in or not—someone else should have made that decision (the Controller), before deciding to forward to the View.

Why bother if you’ll never do it? Well, you might one day stumble on a problem where <jsp:forward> is a useful solution. More importantly, like a lot of what’s in the book (and the exam), the use of <jsp:forward> is outthere. Lurking in gazillions of JSPs that you might one day find yourself maintaining (or ideally refactoring).


Conditional Forward:
--------------------

Imagine you’re a JSP and you assume you’re being called from a request that includes a userName parameter. Since you’re counting on that parameter, you want to first check that the userName parameter isn’t null. If it’s not, no problem—finish the response. But if the userName parameter is null, you want to stop right here and turn the whole request over to something else—like a different JSP that will ask for the userName

JSP with a conditional forward (Hello.jsp)

<html><body>
Welcome to our page!
<% if(request.getParameter(“userName”) == null){%>	If the parameter was null, forward the request (just like using a RequestDispatcher) to the page 							specified in the attribute
<jsp:forward page=”HandleIt.jsp” />
<%} %>
Hello ${param.userName}</body></html>

If we made it this far, the userName must have been valid! NOTHING in this page will appear in the response if the request is forwarded

HandleIt.jsp:

<html><body>
We’re sorry... you need to log in again.
<form action=”Hello.jsp” method=”get”>
Name: <input name=”userName” type=”text”>
<input name=”Submit” type=”submit”>
</form>
</body></html>


Direct /Hello.jsp No Parameter forwared to HandleIt.jsp..

Wait a minute... what happened to the words “Welcome to our page!”? They’re in the Hello.jsp before the forward happens...so why don’t they show up on the first request

Assuming the user types a name into the name input field, the second request won’t do the forward, since the userName request parameter has a non-null value.


With <jsp:forward>, the buffer is cleared BEFORE the forward?

When a forward happens, the resource to which the request is forwarded starts with a clear response buffer! In other words, anything written to the response before the forward happens is thrown out

This makes sense if the page is buffered... because what you write is sent to the buffer, and the Container just clears the buffer. But what if you commit the response BEFORE you do the forward? Like, what happens if you write something and then call flush() on the out object?


<html><body>
Welcome to our page!
<% out.flush(); %>
<% if (request.getParameter(“userName”) == null) { %>
<jsp:forward page=”HandleIt.jsp” /> <% } %>
Hello ${param.userName}
</body></html>

Welcome to our page! is displayed and in the application logs we find th error.

Stacktrace:]] with root cause
java.io.IOException: Error: Attempt to clear a buffer that's already been flushed

Except nobody will see the exception! The client just sees “Welcome to our page!”... and nothing else. The forward throws an exception but it’s too late for the Container to take back the response, so the client sees what was flushed, and that’s it. The forward doesn’t happen, the rest of the current page doesn’t happen. End of story for that page. So never do a flush-and-forward!

When you need more functionality, something beyond what you can get with the standard actions or EL, you don’t have to resort to scripting. In the next chapter, you’ll learn how to use the JSP Standard Tag Library 1.1 (JSTL 1.1) to do just about everything you’ll ever need, using a combination of tags and EL...

							She doesn’t know about JSTL tags

When you need more functionality, something beyond what you can get with the standard actions or EL, you don’t have to resort to scripting. In the next chapter, you’ll learn how to use the JSP Standard Tag Library 1.1 (JSTL 1.1) to do just about everything you’ll ever need, using a combination of tags and EL. Here’s a sneak peek of how to do our conditional forward without scripting. I don’t understand how we ended with a scriptlet. I was TOLD there would be no scripting in this chapter. If only there were a way to do a conditional test without having to go back to scripting...
			      -----------------------------------------------------------------------------------------
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>	**Declare a taglib directive that names the library where the tags live
<html><body>
Welcome to our page!
<c:if test=”${empty param.userName}” >
<jsp:forward page=”HandleIt.jsp” />----------------->This replaces the scriptlet if test
</c:if>


***JistPoints:
--------------

We didn’t show it in this chapter, but the <jsp:param> can be used inside the body of a <jsp:forward> tag as well..

The ONLY places where a <jsp:param> makes sense are within a <jsp:include> or a <jsp:forward> standard action..If the param name used in <jsp:param> already has a value as a request parameter, the new value will overwrite the previous one. Otherwise, a new request parameter is added to the request
The included resource has some limitations: it cannot change the response status code or set headers.

******The <jsp:forward> standard action forwards the request (just like using a RequestDispatcher) to another resource from the same web app.When a forward happens, the response buffer is cleared first! The resource to which the request was forwarded gets to start with a clean output. So anything written to the response before the forward will be thrown away.If you commit the response before the forward (by calling out.flush(), for example), the client will be sent whatever was flushed, but that’s it. The forward won’t happen, and the rest of the original page won’t be processed.


Note:: ${header.User-Agent} is equivalent to ${header[User-Agent]} or ${header.User-Agent} is equivalent to ${header[“User-Agent”]}

Both are incorrect: Options D and E are incorrect because of the dash in User-Agent. Only header[“User-Agent”] will work



In an HTML page with a rich, graphical layout, which JSP standard action can be used to import an image file into the JSP page?

A. <jsp:image page=”logo.png” />
B. <jsp:image file=”logo.png” />
C. <jsp:include page=”logo.png” />
D. <jsp:include file=”logo.png” />
E. This CANNOT be done using a JSP standard action

This is a tricky question because it is NOT possible to import the contents of any binary file into a JSP page, which generates an HTML response.


***If the . (dot) operator is used to access a bean property but the property doesn’t exist, then a runtime exception is thrown.

What is JSPF:?jspf is for JSP fragments. A fragment may not be complete and compilable source, so they likely can't be compiled independently of another, complete, source that references them.


An online jewelry retailer wishes to customize their online catalog for users who are logged in. They want to show specials for the user's birthstone month. The company's special offers are stored as a Map<String, Special[]> identified as specials in application scope and updated daily.
There is a bean stored as a session-scoped attribute named userInfo. Calling getBirthdate().getMonth() on this bean will return the user's birthstone month

${applicationScope.specials[userInfo.birthdate.month]}

Option B correctly retrieves our Map<String, Special[]> from the application scope. It then attempts to get the month value from the user's birthday and uses that as the key to search for a Special[] in the Map. Assuming a match is found in the Map, our Special[] is returned. This EL could be used in a c:forEach tag to iterate over the returned specials.

${mine:rollIt(${arrayList})}

					Sometimes you need more than EL or standard actions:
					----------------------------------------------------

What if you want to loop through the data in an array, and display one item per row in an HTML table? You know you could write that in two seconds using a for loop in a scriptlet. But you’re trying to get away from scripting. No problem. When EL and standard actions aren’t enough, you can use custom tags

Someone’s already written a pile of the ones you’re most likely to need, and bundled them into the JSP Standard Tag Library (JSTL).

The JSTL 1.1 is NOT part of the JSP 2.0 specification! Having access to the Servlet and JSP APIs doesn’t mean you have access to JSTL

Before you can use JSTL, you need to put two files, “jstl.jar” and “standard.jar” into the WEB-INF/lib directory of your web app. That means each web app needs a copy

There’s got to be a way to iterate through a collection in a JSP...without scripting. I want to show one element per row in a table...

Developers usually want way more standard actions or—even better—the ability to create their own actions.
That’s what custom tags are for. Instead of saying <jsp:setProperty>, you want to do something like <my:doCustomThing>

But it’s not that easy to create the support code that goes behind the tag. For the JSP page creator, custom tags are much easier to use than scripting. For the Java programmer, however, building the custom tag handler (the Java code invoked when a JSP uses the tag) is tougher.

Fortunately, there’s a standard library of custom tags known as the JSP Standard Tag Library (JSTL 1.1). Given that your JSP shouldn’t be doing a bunch of business logic anyway, you might find that the JSTL (combined with EL) is all you’ll ever need. Still, there could be times when you need something from, say, a custom tag library developed specifically for your company

In this chapter, you’ll learn how to use the core JSTL tags, as well as custom tags from other libraries

Custom Tag Library or JSP Standard Tag Library(Custom Tags)JSTL 1.1

------------------------------------------------------------------------------------------------------------------------------------------------------------

<b></b> tags make things bold! This comes out as an “invisible” bolded empty space.. Because the HTML is being rendered..
We should convert the < & > and entities of the HTML so it is not renedered..

<b>Tip of the Day:</b> <br/> <br/>
&lt;b&gt;&lt;/b&gt; tags make things bold!  To achive this.. Who can convert all the angualr brackets..So it will nnot be rendered by the browser..

If you know or think you might run into some XML entities that need to be displayed, and not just rendered, you can use the escapeXml attribute on c:out. Setting this to true means that any XML will be converted to something the web browser will render, angle brackets and all:

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.currentTip}' escapeXml='true' />
</div>

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.currentTip}' escapeXml='true' />Your HTML is treated as XHTML, which in turn is XML... so this affects HTML characters, too
</div>

Sometimes, you want just the opposite behavior. Maybe you’re building a page that takes content, and you want to display that content with HTML formatting. In that case, you can turn off XML conversion

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.rawHTML}' escapeXml='false' />
</div>


Conversion by default: The escapeXml attribute defaults to true, so you can leave it out if you want. A c:out tag without an escapeXML attribute is just the same as a c:out tag with escapeXML set to “true

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.currentTip}' />
</div>

Which HTML special characters are converted?

There are only five characters that require escaping: <, >, &, and the two quote symbols,single and double ". All of these are converted into the equivalent HTML entities. For example, < becomes &lt;, & becomes &amp;, and so on

Last month my company hired a web consultant to audit our web application. She noticed that we were using EL everywhere to output strings entered by users. She said this was a security risk and recommended we output all user strings using the c:out tag. What gives?

The security risk she is referring to is called cross-site hacking or cross-site scripting. The attack is sent from one user to another user’s web browser using your webapp as the delivery mechanism

User1 “cracker”:The cracker enters a comment field in your webapp, which is stored in the database. The cracker includes viral JavaScript code in the comment.

User2 “innocent":The innocent user views the cracker’s comment, but the text the cracker entered also includes JavaScript code that compromises user2’s system!

Using the c:out tag to render the text of users prevents cross-site hacking of this form by displaying the <script> tags and the JS code in user2’s web browser. This prevents the JS code from being interpreted by the browser, foils the attack from user1.


What happens if value of the EL expression is null?

Good question. You know an EL expression ${evalsToNull} generates an empty string in the response output, and so will <c:out value=”${evalsToNull}”/>.
But that’s not the end of the story with c:out. The c:out tag is smart, and it recognizes when the value is null and can perform a special action. That action is to provide a default value

Null values are rendered as blank text:
----------------------------------------

Suppose you have a page that welcomes the user by saying “Hello <user>.” But lately, users haven’t been logging in, and the output looks pretty odd:

EL prints nothing if user is null::::   <b>Hello ${user}.</b> Rendered as <b>Hello .</b>

A JSP expression tag prints nothing if user is null:: <b>Hello <%= user %>.</b> 	Rendered as :: <b>Hello .</b>

Set a default value with the default attribute:

Suppose you want to show these anonymous users a message that says, “Hello guest.” This is a perfect place to use a default value with the c:out tag. Just add a default attribute, and provide the value you want to print if your expression evaluates to null

<b>Hello <c:out value=’${user}’ default=’guest’ />.</b>  	This value is output if the value attribute evaluates to null.

<b>Hello <c:out value=’${user}’>guest</c:out></b>

Looping without scripting:
-------------------------

Imagine you want something that loops over a collection (say, an array of catalog items), pulls out one element at a time, and prints that element in a
dynamically-generated table row. You can’t possibly hard-code the complete table—you have no idea how many rows there will be at runtime, and of course you don’t know the values in the collection. The <c:forEach> tag is the answer.By the way, on the exam you are expected to know how to use <c:forEach> with tables.

<table>
<% String[] items = (String[]) request.getAttribute(“movieList”);
String var=null;
for (int i = 0; i < items.length; i++) {
var = items[i];
%>
<tr><td><%= var %></td></tr>
<% } %>
</table>


The <c:forEach> tag maps nicely into a for loop—the tag repeats the body of the tag for each element in the collection (and we use “collection” here to mean
either an array or Collection or Map or comma-delimited String). The key feature is that the tag assigns each element in the collection to the variable you declare with the var attribute

<c:forEach var=”movie” items=”${movieList}” >	The variable that holds each ELEMENT in the collection. Its value changes with each iteration
${movie}					The actual thing to loop over(array, Collection, Map, or a comma-delimited String).
</c:forEach>

<table>
<c:forEach var=”movie” items=”${movieList}” varStatus=”movieLoopCount” >
<tr>
<td>Count: ${movieLoopCount.count}</td>			varStatus makes a new variable that holds an instance of javax.servlet.jsp.jstl.core.LoopTagStatus
</tr>					Helpfully, the LoopTagStatus class has a count property that gives you the current value of the iteration counter.
					(Like the “i” in a for loop.)
<tr>
<td>${movie} <br><br></td> </tr>
</c:forEach>
</table>


What if you have something like a collection of collections? An array of arrays? You can nest <c:forEach> tags for more complex table structures. In this example, we put String arrays into an ArrayList, then make the ArrayList a request attribute. The JSP has to loop through the ArrayList to get each String array, then loop through each String array to print the actual elements of the array.

Ex: new Array[][]; new ArrayList<String[]>(); Where each element is again a complexType


String[] movies1 = {“Matrix Revolutions”, “Kill Bill”, “Boondock Saints”};
String[] movies2 = {“Amelie”, “Return of the King”, “Mean Girls”};
java.util.List movieList = new java.util.ArrayList();
movieList.add(movies1);
movieList.add(movies2);
request.setAttribute(“movies”, movieList);
	
<table>
			<c:forEach items="${requestScope.movies}" var="listElement">
				<tr>
					<c:forEach items="${listElement}" var="movie">
						<td><c:out value="${movie}"></c:out></td>
					</c:forEach>
				</tr>
			</c:forEach>
	</table>


**Items: Stores the Array,Collection,String(comma delimited) attribute that is in the request,Session,Context Scopes etc...

**Var: Stores the each element retrived from the collection. JSP creates the tag scoped attribute with the name given..it can be further used in the page anywhere..

**Body of the Tag is repeated for the no:of times i.e equal to the no:of elements in the collection

**varStatus: Makes a new varaible that holds an instance of javax.servlet.LoopTagStatus..Creates a attribute and stored in the pageScope


Is the “c” in <c:forEach> a required prefix?

Some prefix is required, of course; all tags and EL functions must have a prefix to give the Container the namespace for that tag or function name. But you
don’t HAVE to name the prefix “c”.It’s just the standard convention for the set of tags in JSTL known as “core”. We recommend using something other than “c” as a prefix, whenever you want to totally confuse the people you work with

The “var” variable is scoped to ONLY the tag!

That’s right, tag scope. No this isn’t a full-fledged scope to which you can bind attributes like the other four— page, request, session, and application. Tag scope simply means that the variable was declared INSIDE a loop.And you already know what that means in Java terms. You’ll see that for most other tags, a variable set with a “var” attribute will be visible to whatever scope you specifically set (using an optional “scope” attribute), OR, the variable will default to page scope.


<c:if test=”${userType eq 'member'}” > Assume a servlet somewhere set the userType attribute, based on the user’s login information.
<jsp:include page="inputComments.jsp"/> Yes, those are SINGLE quotes around ‘member’. Don’t forget that you can use EITHER double or single
					quotes in your tags and EL
</c:if>


What if you want to do one thing if the condition is true, and a different thing if the condition is false?In other words, what if we want to show either one thing or the other, but nobody will see both? The <c:if> on the previous page worked fine because the logic was: everybody sees the first part, and then if the test condition is true, show a little extra.

But now imagine this scenario: you have a car sales web site, and you want to customize the headline that shows up on each page, based on a user attribute set up earlier in the session. Most of the page is the same regardless of the user, but each user sees a customized headline —one that best fits the user’s personal motivation for buying. (We are, after all, trying to sell him a car and become obscenely wealthy.) At the beginning of the session, a form asks the user to choose what’s most important

The first page asks the user what he feels is most important. Just like a good salesman, the pages that talk about features of the car will customize the presentation based on the user’s preference, so that each feature of the car looks like it was made with HIS personal needs in mind

The <c:if> tag won’t work for this:
-----------------------------------

There’s no way to do exactly what we want using the <c:if> tag, because it doesn’t have an “else”. We can almost do it, using something like:

<c:if test=”${userPref==’performance’}” >
Now you can stop even if you <em>do</em> drive insanely fast..
</c:if>
<c:if test=”${userPref==’safety’}” >
Our brakes won’t lock up no matter how bad a driver you are.
</c:if>
<c:if test=”${userPref==’maintenance’}” >
Lost your tech job? No problem--you won’t have to service these brakes
for at least three years.
</c:if>  

********But what happens if userPref doesn’t match any of these? There’s no way to specify the default headline
	
<!-- continue with the rest of the page that EVERYONE should see -->

The <c:if> won’t work unless we’re CERTAIN that we’ll never need a default value. What we really need is kind of an if/else construct


JSP with scripting, and it does what we want

<html><body><h2>
<% String pref = (String) session.getAttribute(“userPref”);
if (pref.equals(“performance”)) {
out.println(“Now you can stop even if you <em>do</em> drive insanely fast.”);
} else if (pref.equals(“safety”)) {
out.println(“Our brakes won’t lock up, no matter how bad a driver you are. “);
} else if (pref.equals(“maintenance”)) {
out.println(“ Lost your tech job? No problem--you won’t have to service these brakes for at least three years.”);
} else {
// userPref doesn’t match those, so print the default headline
out.println(“Our brakes are the best.”);
} %>


The <c:choose> tag and its partners <c:when> and <c:otherwise>
-------------------------------------------------------------
<c:choose>
<c:when test=”${userPref == ‘performance’}”> Now you can stop even if you <em>do</em> drive insanely fast. </c:when>
<c:when test=”${userPref == ‘safety’}”> Our brakes will never lock up, no matter how bad a driver you are. </c:when>
<c:when test=”${userPref == ‘maintenance’}”>Lost your tech job? No problem--you won’t have to service these brakesfor at least three years.</c:when>
<c:otherwise> Our brakes are the best.</c:otherwise>
</c:choose>

No more than ONE of these four bodies (including the <c:otherwise>) will run...It’s not like a switch statement there’s no fall-through

If none of the <c:when> tests are true, the <c:otherwise> runs as a default. Note: the <c:choose> tag is NOT required to have a <c:otherwise> tag.


The <c:set> tag... so much cooler than <jsp:setProperty>:
--------------------------------------------------------

The <jsp:setProperty> tag can do only one thing—set the property of a bean..But what if you want to set a value in a Map? What if you want to make a new entry in a Map? Or what if you simply want to create a new request-scoped attribute?

You get all that with <c:set>, but you have to learn a few simple rules. Set comes in two flavors: var and target. The var version is for setting attribute variables, the target version is for setting bean properties or Map values.Each of the two flavors comes in two variations: with or without a body.

With NoBody:

<c:set var=”userLevel” scope=”session” value=”Cowboy” />

If there’s NOT a session-scoped attribute named “userLevel”, this tag creates one (assuming the value attribute is not null).
The scope is optional; var is required. You MUST specify a value, but you have a choice between putting in a value attribute or putting the value in the tag body..value doesn’t have to be a String...

<c:set var=”Fido” value=”${person.dog}” /> If ${person.dog} evaluates to a Dog object, then “Fido” is of type Dog.

WITH a body:

<c:set var=”userLevel” scope=”session” >Sheriff, Bartender, Cowgirl </c:set> The body is evaluated and used as the value of the variable.

If the value evaluates to null, the variable will be REMOVED! That’s right, removed
-------------------------------------------------------------------------------------
Imagine that for the value (either in the body of the tag or using the value at- tribute), you use ${person.dog}. If ${person.dog} evaluates to null (meaning there is no person, or person’s dog property is null, then if there IS a variable attribute with a name “Fido”, that attribute will be removed!

if you don’t specify a scope, it will start looking at page, then request, etc.). This happens even if the “Fido” attribute was originally set as a String, or a Duck, or a Broccoli

With NO body

<c:set target=”${PetMap}” property=”dogName” value=”Clover” />

****target must NOT be null!!..If target is a Map, set the value of a key named “dogName"..If target is a bean, set the value of the property “dogName"

<c:set target=”${person}” property=”name” > ${foo.name}</c:set>


The “target” must evaluate to the OBJECT! You don’t type in the String “id” name of the bean or Map attribute!

Person p=new Person(); p.setName("Muni"); p.setCourse(map);
request.setAttrbute("person",p);

<c:set scope="request" var="person" value="${requestScope.person}"/>

Bean 

class Person{
	private String name;
	private Map<String,String> course;		Assume the Person attribute is stored somewhere in the requestScope
}

<c:set target="${requestScope.person}" property="name" value="Clover"/>			Changing the value of the name property
<c:set target="${requestScope.person}" property="course" value="Clover"/>		Adding the new Entries to the existing Map object
<c:set target="${requestScope.person}" property="course" value="Clover1"/>
<c:set target="${requestScope.person}" property="course" value="Clover2"/>

The “target” must evaluate to the OBJECT! You don’t type in the String “id” name of the bean or Map attribute!

This is a huge gotcha. In the <c:set> tag, the “target” attribute in the tag seems like it should work just like “id” in the <jsp:useBean>. Even the “var” attribute in the other version of <c:set> takes a String literal that represents the name of the scoped attribute. BUT... it doesn’t work this way with “target”! With the “target” attribute, you do NOT type in the String literal that represents the name under which the attribute was bound to the page, scope, etc. No, the “target” attribute needs a value that resolves to the REAL THING. That means an EL expression or a scripting expression (<%= %>), or something we haven’t seen yet: <jsp:attribute>.


KeyPoints:
---------

1) You can never have BOTH the “var” and “target” attributes in a <c:set>.
2) Scope” is optional, but if you don’t use it the default is page scope
3) If the “value” is null, the attribute named by “var” will be removed
4) If the attribute named by “var” does not exist, it’ll be created, but only if “value” is not null.
5) If the “target” expression is null, the Container throws an exception
6) The “target” is for putting in an expression that resolves to the Real Object. If you put in a String literal that represents the “id” name of the bean      or Map, it won’t work. In other words, “target” is not for the attribute name of the bean or Map—it’s for the actual attribute object.
7) If the “target” expression is not a Map or a bean, the Container throws an exception.
8) If the “target” expression is a bean, but the bean does not have a property that matches “property”, the Container throws an exception. Remember that the    EL expression ${bean.notAProperty} will also throw an exception.


Why would I use the body version instead of the no-body version? It looks like they both do exactly the same thing.

The body version is just for convenience when you want more room for the value. It might be a long and complex expression, for example, and putting it in the body makes it easier to read.

If I don’t specify a scope, does that mean it will find attributes that are ONLY within page scope, or does it do a search beginning with page scope?

If you don’t use the optional “scope” attribute in the tag, then the tag will only look in the page scope space. Sorry, you will just have to know exactly which scope you are dealing with


Note: The word attribute is overloaded.. You can bind the attributes in the tag into the fourscopes[page,request,response& session]

<c:set var="userLevel" scope="session" value="cowboy"/> The attribute userLevel is created in session scope for the attribute value var
<c:for Each  items="${list/array/collection/map/commaDelimitedString}" var=""> Using the var attr value an attribute is created for the session scope

<c:remove> just makes sense::
-----------------------------
We agree with Dick—using a set to remove something feels wrong. (But remember, set does a remove only when you pass in a null value.) The <c:remove> tag is intuitive and simple

<c:remove var=”userStatus” scope=”request” />
The var attribute MUST be a String literal! It can’t be an expression....It has to be only String can't be like say ${sessionScope.userLevel} or{userLevel}
*****The scope is optional, but if you leave it out then the attribute is removed from ALL scopes

<c:set var=”userStatus” scope=”request” value=”Brilliant” />
userStatus: ${userStatus} <br>
<c:remove var=”userStatus” scope=”request” />
userStatus is now: ${userStatus}		The value of userStatus was removed, so nothing prints when the EL expression is used AFTER the remove.
	
With <c:import>, there are now THREE ways to include content:
-------------------------------------------------------------
So far, we’ve used two different ways to add content from another resource into a JSP. But there’s yet another way, using JSTL

<%@ include file=”Header.html” %>
Static: adds the content from the value of the file attribute to the current page at translation time.

<jsp:include page=”Header.jsp” />
Dynamic: adds the content from the value of the page attribute to the current page at request time


<c:import url=”http://www.wickedlysmart.com/skyler/horse.html” />

Unlike the other two includes, the <c:import> url can be from outside the web Container!

Dynamic: adds the content from the value of the URL attribute to the current page, at request time. It works a lot like <jsp:include>, but it’s more
powerful and flexible

They all have different attribute names! (And watch out for “include” vs. “import”)

Each of the three mechanisms for including content from another resource into your JSP uses a different word for the attribute. The include directive uses file, the <jsp:include> uses page, and the JSTL <c:import> tag uses url. This makes sense, when you think about it... but you do have to memorize all three. The directive was originally intended for static layout templates, like HTML headers. In other words, a “file”. The <jsp:include> was intended more for dynamic content coming from JSPs, so they named the attribute “page” to reflect that. The attribute for <c:import> is named for exactly what you give it—a URL! Remember, the fi rst two “includes” can’t go outside the current Container, but <c:import> can.

<c:import> can reach OUTSIDE the web app:
----------------------------------------

This simple example shows a JSP on Server A importing the contents of a URL on Server B. At request time, the HTML chunk in the imported file is added to
the JSP. The imported chunk uses a reference to an image that is also on Server B.

Server A, the JSP doing the import::
----------------------------------
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
<c:import url=”http://www.wickedlysmart.com/skyler/horse.html” />
<br> This is my horse. </body></html>

Server B, the imported content
-----------------------------

The imported file <img src=”http://www.wickedlysmart.com/skyler/horse.gif”>

Don’t forget: as with other include mechanisms, the thing you import should be an HTML fragment and NOT a complete page with opening and closing <html><body> tags

Customizing the thing you include:
---------------------------------

Remember in the previous chapter when we did a <jsp:include> to put in the layout header (a graphic with some text), but we wanted to customize the subtitle used in the header? We used <jsp:param> to make that happen..Giving the chance for the header itself to print the header information.

The JSP with the <jsp:include>::
--------------------------------
<html><body>
<jsp:include page=”Header.jsp”>
<jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>
<br>
<em>Welcome to our Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>

The included file (“Header.jsp”)::
--------------------------------
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em>
<br>

1)The JSP with the <jsp:import>
-------------------------------
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
<c:import url=”Header.jsp” >
<c:param name=”subTitle” value=”We take the sting out of SOAP.” />
</c:import>
<br>
<em>Welcome to our Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>

2) The included file (“Header.jsp”)
-----------------------------------
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em>
<br>

Note: <c:import> can also be used to import the file from the 


							URL ReWriting in JSP
							-------------------

How can you guarantee session tracking from a JSP... without using scripting..

Session tracking happens automatically with JSPs, unless you explicitly disable it with a page directive that has a session attribute that says session=”false..

My real question is--if the client doesn’t support cookies, how can I get URL rewriting to happen? How can I get the session ID added to the URLs in my JSP

Ahhh... he obviously doesn’t know about the <c:url> tag. It does URL rewriting automatically

But with servlets, you STILL have to encode your URLs. In other words, you still have to tell the Container to “append the jsessionid to the end of this particular URL...” for each URL where it matters. Well, you can do the same thing from a JSP, using the <c:url> tag.


out.println(“<html><body>”);
out.println(“<a href=\”” + response.encodeURL(“/BeerTest.do”) + “\”>click</a>”);
out.println(“</body></html>”);


<a href="<c:url value='/inputComments.jsp'/>">Click here</a> 	This adds the jsessionid to the end of the “value” relative URL (if cookies are disabled).

What if the URL needs encoding:
------------------------------
For example, if a form on an HTML page has two text fields—first name and last name—the request URL will stick the parameter names and values on to the end of the request URL. But...an HTTP request won’t work correctly if it contains unsafe characters (although most modern browsers will try to
compensate for this..

If you’re a web developer, this is old news, but if you’re new to web development, you need to know that URLs often need to be encoded. URL encoding means replacing the unsafe/reserved characters with other characters, and then the whole thing is decoded again on the server side. For example, spaces aren’t allowed in a URL, but you can substitute a plus sign “+” for the space. The problem is, <c:url> does NOT automatically encode your URLs!

Using <c:url> with a query string:
----------------------------------

<c:set var="last” value=”Hidden Cursor” />
<c:set var=”first” value=”Crouching Pixels”/>
<c:url value=”/inputComments.jsp?first=${first}&last=${last}” var=”inputURL” /> Use the optional “var” attribute when you want access to this value later

The URL using params is: ${inputURL} <br>  The problem is, <c:url> does NOT automatically encode your URLs!

O/P:The URL using param's is: /06SixthDynamicWebProject/inputComments.jsp?first=Crouching Pixels&last=Hidden Cursor 

<c:url value=”/inputComments.jsp” var=”inputURL” >	This solves our problem! Now we get both URL rewriting and URL encoding.
<c:param name=”firstName” value=”${first}” />
<c:param name=”lastName” value=”${last}” />             Now we’re safe, because <c:param> takes care of the encoding!
</c:url

O/P:The URL using param's is: /06SixthDynamicWebProject/inputComments.jsp?firstName=Hidden+Cursor&lastName=Crouching+Pixels 

							Error Handling:
							--------------

**You do NOT want your clients to see this UGLY Error WebPage that is showing the Tomcat Container generated webpage..

The guy surfing your site doesn’t want to see your stack trace. And he’s not too thrilled to get a standard “404 Not Found”, either.
You can’t prevent all errors, of course, but you can at least give the user a friendlier (and more attractive) error response page. You can design a custom page to handle errors, then use the page directive to configure it..


4xx (ClientSide Errors.. Because of the Wrong inputs passing from the client) 
5xx (Server Side Errors.. due to the Logical/Programming mistakes on the server Side)

The designated ERROR page (“errorPage.jsp”)
--------------------------------------------
<%@ page isErrorPage=”true” %>
<html><body>
<strong>Bummer.</strong>			********Confirms for the Container, "Yes, this IS an officially-designated error page"
<img src=”images/bummerGuy.jpg”>
</body></html>


The BAD page that throws an exception (“badPage.jsp”)
---------------------------------------------------
page that throws an exception (“badPage.jsp”)
<%@ page errorPage=”errorPage.jsp” %>
<html><body>					***Tells the Container, “If something goes wrong here, forward the request to errorPage.jsp”
About to be bad...
<% int x = 10/0; %>
</body></html>


http://localhost:8080/tests/badPage.jsp 

****The REQUEST was for “badPage.jsp”, but that page threw an exception, so the RESPONSE came from “errorPage.jsp"

It will take me FOREVER to put page directives in all my JSPs, to specify the error page to use..And what if I want a different error page depending on the error? If only there were a way to configure error pages for the whole web app...

** For any Kind of the error same Page will be utilised

You need one specific page for the one kind of Error.. Oveerding the above Behaviour

You can declare error pages in the DD for the entire web app, and you can even configure different error pages for different exception types, or HTTP error code types (404, 500, etc.).

The Container uses <error-page> configuration in the DD as the default, but if a JSP has an explicit errorPage page directive, the Container uses the directive.

****Container looks into the Web.xml to observe the matching errorPage if it is Configured for the generated ExceptionType or HTTP status Code..If there are no exception pages configured then it uses the errorPage attribute and forwards the request to the errorPage..

You can declare error pages in the DD based on either the <exception-type> or the HTTP status <error-code> number. That way you can show the client different error pages specific to the type of the problem that generated the error

This applies to everything in your web app—not just JSPs. You can override it in individual JSPs by adding a page directive with an errorPage attribute

<error-page>
<exception-type>java.lang.Throwable</exception-type>
<location>/errorPage.jsp</location>
</error-page>

Declaring an error page for a more explicit exception::

This configures an error page that’s called only when there’s an ArithmeticException. If you have both this declaration and the catch-all above, any exception other than ArithmeticException will still end up at the “errorPage.jsp”.

<error-page>
<exception-type>java.lang.ArithmeticException</exception-type>
<location>/arithmeticError.jsp</location>
</error-page>


Declaring an error page based on an HTTP status code:

This configures an error page that’s called only when the status code for the response is “404” (file not found).

<error-page>
<error-code>404</error-code>
<location>/notFoundError.jsp</location>
</error-page>

***The <location> MUST be relative to the web-app root/context, which means it MUST start with a slash. (This is true regardless of whether the error page is based on <error-code> or <exception-type>.)


Error pages get an extra object: exception:
-------------------------------------------

An error page is essentially the JSP that handles the exception, so the Container gives the page an extra object for the exception. You probably
won’t want to show the exception to the user, but you’ve got it. In a scriptlet, you can use the implicit object exception, and from a JSP, you
can use the EL implicit object ${pageContext.exception}.

The object is type java.lang.Throwable, so in a script you can call methods, and with EL you can access the stackTrace and message properties.

A more explicit ERROR page (“errorPage.jsp”):
--------------------------------------------

<%@ page isErrorPage=”true” %>		****Assume this is page handling the exception generated in Servlet.. And Showing the user message
<html><body>
<strong>Bummer.</strong><br>
You caused a ${pageContext.exception} on the server.<br>
<img src=”images/bummerGuy.jpg”>
</body></html>


Note: the exception implicit object is available ONLY to error pages with an explicitly-defined page directive:

<%@ page isErrorPage=”true” %> In other words, configuring an error page in the DD is not enough to make the Container give that page the implicit exception object!


Execution Order for the different configurations:
-------------------------------------------------

500
400				------->Only for the ArithmeticException this page is mapped. Rest all exceptions Throwable page is utilised. It will not
Throwable				utilise the 500 & 400 pages also
ArithmeticException

500
400				-------->Only for the ArithmeticException this page is mapped. for the server side errors 500 page is mapped 
ArithmeticException			for client exceptions 400 pages is matched.

Throwable
400				--------->For the any exceptions only Throwable deafult page will be shownup..Error code pages will not be utilised
500


If you want to show the different pages for the client & server side erros use the 400 & 500 error pages only..Without the Throwable Error Pages.

If you want to show samepage for all the client server side Errors use the Throwable page without configuring the 400 & 500 ErrorPage..


Error pages get an extra object: exception:
---------------------------------------------

An error page is essentially the JSP that handles the exception, so the Container gives the page an extra object for the exception. You probably won’t want to show the exception to the user, but you’ve got it. In a scriptlet, you can use the implicit object exception, and from a JSP, you can use the EL implicit object ${pageContext.exception}. The object is type java.lang.Throwable, so in a script you can call methods, and with EL you can access the stackTrace and message properties.


<%@ page isErrorPage=”true” %>
<html><body>
<strong>Bummer.</strong><br>
You caused a ${pageContext.exception} on the server.<br>
<img src=”images/bummerGuy.jpg”>
</body></html>

Note: The exception implicit object is available ONLY to error pages with an explicitly-defined page directive:
<%@ page isErrorPage=”true” %> In other words, configuring an error page in the DD is not enough to make the Container give that page the implicit exception object

The <c:catch> tag. Like try/catch...sort of:
-------------------------------------------

If you have a page that invokes a risky tag, but you think you can recover, there’s a solution. You can do a kind of try/catch using the <c:catch> tag, to wrap the risky tag or expression. Because if you don’t, and an exception is thrown, your default error handling will kick in and the user will get the error page declared in the DD.

The part that might feel a little strange is that the <c:catch> serves as both the try and the catch—there’s no separate try tag. You wrap the risky EL or tag calls or whatever in the body of a <c:catch>, and the exception is caught right there...

But you can’t assume it’s exactly like a catch block, either, because once the exception occurs, control jumps to the end of the <c:catch> tag body (more on that in a minute).

Idea: is Don't worry about that exception and process the next Lines in the current Page..

<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<%@ page errorPage=”errorPage.jsp” %>
<html><body>
About to do a risky thing: <br>
<c:catch>
<% int x = 10/0; %>			This scriptlet will DEFINITELY cause an exception... but we caught it instead of triggering the error page
</c:catch>
If you see this, we survived. 		If this prints out, then we KNOW we made it past the exception (which in this example, means we successfully caught 						the exception).
</body></html>

But how do I get access to the Exception object? The one that was actually thrown? Since this isn’t an actual error page, the implicit exception object doesn’t work here

You can make the exception an attribute:
---------------------------------------

In a real Java try/catch, the catch argument is the exception object. But with web app error handling, remember, only officially-designated error
pages get the exception object. To any other page, the exception just isn’t there. So this does not work:

<c:catch>
Inside the catch...
<% int x = 10/0; %> </c:catch>				Won’t work because this isn’t an official error page, so it doesn’t get the exception object.
Exception was: ${pageContext.exception}

Using the “var” attribute in <c:catch>:
--------------------------------------

Use the optional var attribute if you want to access the exception after the end of the <c:catch> tag. It puts the exception object into the page scope, under the name you declare as the value of var.

<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<%@ page errorPage=”errorPage.jsp” %>
<html><body>
About to do a risky thing: <br>
<c:catch var=”myException”>
Inside the catch...
<% int x = 10/0; %>
</c:catch>
<c:if test=”${myException != null}”>				This now acts like the Catch Block
There was an exception: ${myException.message} <br>
</c:if>

*****Now there’s an attribute myException, and since it’s a Throwable, it has a “message” property (because Throwable has a getMessage() method

Flow control works in a <c:catch> the way it does in a try block—NOTHING runs inside the <c:catch> body after the exception?
----------------------------------------------------------------------------------------------------------------------------

In a regular Java try/catch, once the exception occurs, the code BELOW that point in the try block never executes—control jumps directly to the catch block.
With the <c:catch> tag, once the exception occurs, two things happen:

1) If you used the optional “var” attribute, the exception object is assigned to it.
2) Flow jumps to below the body of the <c:catch> tag.

Flow control works in a <c:catch> the way it does in a try block—NOTHING runs inside the <c:catch> body after the exception.

<c:catch>
Inside the catch...
<% int x = 10/0; %>

After the catch...				//You’ll NEVER see this!

</c:catch>

We survived.

Be careful about this. If you want to use the “var” exception object, you must wait until AFTER you get to the end of the <c:catch> body. In other words, there is simply no way to use any information about the exception WITHIN the <c:catch> tag body.

A <c:catch> acts more like a try block, because it’s where you put the risky code. Except it’s like a try that never needs (or has) a catch or finally block. Confused?


JSTL Core Library 
------------------

General-purpose
<c:out>			Printing the Data on the Webpages..
<c:set>			Setting the attribute on request application & session scopes..Setting the values to the bean Properties/adding the new keys for Map
<c:remove>		Removing the attribute from the request application & session scopes
<c:catch>		Catching the Exceptions thrown from the risky tags & EL expresssions

Conditional
<c:if>
<c:choose>
<c:when>
<c:otherwise>

URL related
<c:import>	Including the content from the another server webpage to the current Webpage..you can also use for including the Current WebApp content
<c:url>		Encoding the Urls and for attaching the JsessionIds 
<c:redirect>	using the SendRedirect 
<c:param>

Iteration
<c:forEach>	Iterating over the Collection.. Like the Enchanced For Loop
<c:forTokens>

The “SQL” library:
------------------

Database access
<sql:query>
<sql:update>
<sql:setDataSource>
<sql:param>
<sql:dateParam>


The “Formatting” library
------------------------
Internationalization
<fmt:message>
<fmt:setLocale>
<fmt:bundle>
<fmt:setBundle>
<fmt:param>
<fmt:requestEncoding>

Formatting
<fmt:timeZone>
<fmt:setTimeZone>
<fmt:formatNumber>
<fmt:parseNumber>
<fmt:parseDate>

The “XML” library
-----------------

Core XML actions
<x:parse>
<x:out>
<x:set>


XML flow control
<x:if>
<x:choose>
<x:when>
<x:otherwise>
<x:forEach>

Transform actions
<x:transform>
<x:param>


What happens, for example, if someone hands you a custom tag library they created for your company or project? How do you know what the tags are and how to use them? With JSTL, it’s easy—the JSTL 1.1 specification documents each tag, including how to use each of the required and optional attributes.

But not every custom tag will come so nicely packaged and well-documented. You have to know how to figure out a tag even if the documentation is weak or nonexistent, and, one more thing—you have to know how to deploy a custom tag library

To use a custom library, you MUST read the TLD. Everything you need to know is in there.

TagNames & Syntax:

The tag has a name, obviously. In <c:set>, the tag name is set, and the prefix is c. You can use any prefix you want, but the name comes from the TLD. The syntax includes things like required and optional attributes, whether the tag can have a body (and if so, what you can put there), the type of each attribute, and whether the attribute can be an expression (vs. a literal String).


The library URI

The URI is a unique identifier in the Tag Library Descriptor (TLD). In other words, it’s a unique name for the tag library the TLD describes.
The URI is what you put in your taglib directive. It’s what tells the Container how to identify the TLD file within the web app, which the Container needs in order to map the tag name used in the JSP to the Java code that runs when you use the tag 


The TLD describes two main things: custom tags, and EL functions

<tlib-version>1.2</tlib-version>
<short-name>RandomTags</short-name>
<function>
<name>rollIt</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>int rollDice()</function-signature>
</function>
<uri>randomThings</uri>

<tag>
<description>random advice</description>			Optional, but a really good idea...
<name>advice</name>						REQUIRED! This is what you use inside the tag (example: <my:advice>)
<tag-class>foo.AdvisorTagHandler</tag-class>			REQUIRED! This is how the Container knows what to call when someone uses the tag in a JSP.	
<body-content>empty</body-content>				REQUIRED! This says that the tag must NOT have anything in the body.
<attribute>
<name>user</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>					This says the “user” attribute can be a runtime expression value (i.e. doesn’t have to be a 								String literal
</attribute>
</tag>


<html><body>
<%@ taglib prefi x=”mine” uri=”randomThings”%>		Each library you use in a page needs its own taglib directive with a unique prefix
Advisor Page<br>
<mine:advice user=”${userName}” />
</body></html>

The custom tag handler:
----------------------

public class AdvisorTagHandler extends SimpleTagSupport {

private String user;

public void doTag() throws JspException, IOException { 

getJspContext().getOut().write( “Hello “ + user + “ <br>” );
getJspContext().getOut().write( “Your advice is: “ + getAdvice() );

}
public void setUser(String user) {
	this.user=user;
}

String getAdvice() {

String[] adviceStrings = {“That color’s not working for you.”,“You should call in sick.”, “You might want to rethink that haircut.”};
int random = (int) (Math.random() * adviceStrings.length);
return adviceStrings[random];
} }


Custom tag handlers don’t use custom method names
------------------------------------------------

With EL functions, you created a Java class with a static method, named the method whatever you wanted, then used the TLD to map the actual method <function-signature> to the function <name>. But with custom tags, the method name is ALWAYS doTag(), so you never declare the method name for a custom tag.
Only functions use a method signature declaration in the TLD!


The <rtexprvalue> is especially important because it tells you whether the value of the attribute is evaluated at translation or runtime. If the <rtexprvalue> is false, or the <rtexprvalue> isn’t defined, you can use only a String literal as that attribute’s value!

<my:handleIt rate=”${currentRate}” /> NO! This must NOT be an expression... it must be a String literal


You still didn’t answer the question about how you know what type the attribute is...

We’ll start with the easy one. If the <rtexprvalue> is false (or not there at all), then the attribute type can be ONLY a String literal. But if you can
use an expression, then you have to hope that it’s either dead obvious from the tag description and attribute name, OR that the developer included the
optional <type> subelement of the <attribute> element. The <type> takes a fully-qualified class name for the type. Whether the TLD declares the type or
not, the Container expects the type of the expression to match the type of argument in the tag handler’s setter method for that attribute. In other words,
if the tag handler has a setDog(Dog) method for the “dog” attribute, then the value of your expression for that attribute better evaluate to a Dog object! (Orsomething that can be implicitly assigned to a Dog reference type.)

<rtexprvalue> is NOT just for EL expressions:
--------------------------------------------

EL expressions:: <mine:advice user=”${userName}” />

Scripting expressions: <mine:advice user=’<%= request.getAttribute(“username”) %>’ /> As there are "" inside user singlequotes around the attribute

<jsp:attribute> standard actions

<mine:advice>
<jsp:attribute name=”user”>${userName}</jsp:attribute>    What is this?? I thought this tag didn’t have a body
</mine:advice>

<jsp:attribute> lets you put attributes in the BODY of a tag, even when the tag body is explicitly declared “empty” in the TLD
-------------------------------------------------------------------------------------------------------------------------------
The <jsp:attribute> is simply an alternate way to define attributes to a tag. The key point is, there must be only ONE <jsp:attribute> for EACH attribute in the enclosing tag. So if you have a tag that normally takes three attributes IN the tag (as opposed to in the body), then inside the body you’ll now have three <jsp:attribute> tags, one for each attribute. Also notice that the <jsp:attribute> has an attribute of its own, name, where you specify the name of the outer tag’s attribute for which you’re setting a value.There’s a little more about this on the next page...


A tag can have a body only if the <body-content> element for this tag is not configured with a value of empty. The <body-content> element can be one of either three or four values, depending on the type of tag

<body-content>empty</body-content>  It can have the attributes.. The tag must NOT have a body.

<body-content>scriptless</body-content> The tag must NOT have scripting elements (scriptlets, scripting expressions, and declarations), but it CAN have template text and EL and custom and standard actions

<body-content>tagdependent</body-content> The tag body is treated as plain text, so the EL is NOT evaluated and tags/actions are not triggered

<body-content>JSP</body-content>The tag body can have anything that can go inside a JSP


THREE ways to invoke a tag that can’t have a body

Each of these are acceptable ways to invoke a tag configured in the TLD with <body-content>empty</body-content>.

An empty tag::<mine:advice user=”${userName}” />

A tag with nothing between the opening and closing tags::<mine:advice user=”${userName}”> </mine:advice>

A tag with only <jsp:attribute> tags between the opening and closing tags
------------------------------------------------------------------------
<mine:advice>
<jsp:attribute name=”user”>${userName}</jsp:attribute>			<jsp:attribute> tags don’t count as “body content”.
</mine:advice>


Summary of the tag handler, the TLD, and the JSP
------------------------------------------------
The tag handler developer creates the TLD to tell both the Container and the JSP developer how to use the tag. A JSP developer doesn’t care about the <tag-class> element in the TLD; that’s for the Container to worry about. The JSP developer cares most about the uri, the tag name, and the tag syntax. Can the tag have a body? Does this attribute have to be a String literal, or can it be an expression? Is this attribute optional? What type does the expression need to evaluate to?Think of the TLD as the API for custom tags. You have to know how to call it and what arguments it needs


				The taglib <uri> is just a name, not a location
				-----------------------------------------------
The <uri> element in the TLD is a unique name for the tag library. That’s it. It does NOT need to represent any actual location (path or URL, for example). It simply has to be a name—the same name you use in the taglib directive.

“But,” you’re asking, “how come with the JSTL it gives the full URL to the library?” The taglib directive for the JSTL is:

<%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
This LOOKS like a URL to a web resource, but it’s not. It’s just a name that happens to be formatted as a URL

The web Container doesn’t normally try to request something from the uri in the taglib directive. It doesn’t need to use the uri as a location! If you type that as a URL into your browser, you’ll be redirected to a different URL, one that has information about JSTL. The Container could care less that this particular uri happens to also be a valid URL (the whole “http://...” thing). It’s just the convention Sun uses for the uri, to help ensure that it’s a unique name. Sun could have named the JSTL uri “java_foo_tags” and it would have worked in exactly the same way. All that matters is that the <uri> in the TLD and the uri in the taglib directive match!

As a developer, though, you do want to work out a scheme to give your libraries unique <uri> values, because <uri> names need to be unique for any given web app. You can’t, for example, have two TLD files in the same web app, with the
same <uri>. So, the domain name convention is a good one, but you don’t necessarily need to use that for all of your in-house development

As a developer, though, you do want to work out a scheme to give your libraries unique <uri> values, because <uri> names need to be unique for any given web app. You can’t, for example, have two TLD files in the same web app, with the same <uri>. So, the domain name convention is a good one, but you don’t necessarily need to use that for all of your in-house development..


**URI in <%@taglib %> is not location of the TLD file or the actual URL on the internet.. It's just convention to use the domain name so multiple TLDS in the same webapp couldn't get the Same name..

Badpractisce:If you don't specify the uri in the TLD file the Uri in the <%@taglib%>


Before JSP 2.0, the developer had to specify a mapping between the <uri> in the TLD and the actual location of the TLD file. So when a JSP page had a taglib directive like this:
The Deployment Descriptor (web.xml) had to tell the Container where the TLD file with a matching <uri> was located. You did that with a <taglib> element in the DD. <%@ taglib prefix=”mine” uri=”randomThings”%>

The OLD (before JSP 2.0) way to map a taglib uri to a TLD file

<jsp-config>
<taglib>
<taglib-uri>randomThings</taglib-uri>
<taglib-location>/WEB-INF/myFunctions.tld</taglib-location>
</taglib>
</jsp-config>

The NEW (JSP 2.0) way to map a taglib uri to a TLD file

The Container automatically builds a map between TLD files and <uri> names, so that when a JSP invokes a tag, the Container knows exactly where to find the TLD that describes the tag.

How? By looking through a specific set of locations where TLDs are allowed to live. When you deploy a web app, as long as you put the TLD in a place the Container will search, the Container will find the TLD and build a map for that tag library

If you do specify an explicit <taglib-location> in the DD (web.xml), a JSP 2.0 Container will use it! In fact, when the Container begins to build the <uri>-to-TLD map, the Container will look first in your DD to see if you’ve made any <taglib> entries, and if you have, it’ll use those to help construct the map. For the exam, you’re expected to know about <taglib-location>, even though it’s no longer required for JSP 2.0

The Container searches in several places to find TLD files—you don’t need to do anything except make sure your TLDs are in one of the right locations

1)Directly inside WEB-INF
2)Directly inside a sub-directory of WEB-INF
3)Inside the META-INF directory inside a JAR file that’s inside WEB-INF/lib
4)Inside a sub-directory of META-INF inside a JAR file that’s inside WEB-INF/lib

When a JSP uses more than one tag library

If you want to use more than one tag library in a JSP, do a separate taglib directive for each TLD. There a few issues to keep in mind...

Make sure the taglib uri names are unique. In other words, don’t put in more than one directive with the same uri value

Do NOT use a prefix that’s on the reserved list. The reserved prefixes are:jsp: jspx: java: javax: servlet: sun: sunw:


Example:A JavaBean Person has a property called address. The value of this property is another JavaBean Address with the following string properties: street1, street2, city, stateCode and zipCode. A controller servlet creates a session-scoped attribute called customer that is an instance of the Person bean. Which JSP code structures will set the city property of the customer attribute to the city request parameter? (Choose all that apply.)

<c:set target=”${sessionScope.customer.address}” property=”city” value=”${param.city}” />
<c:set target=”${sessionScope.customer.address}” property=”city”>${param.city}</c:set>


****<my:Tag2 a="47"/> Body can be empty,Scriptless,JSP it could be..Assume we didn't give the Body.

For the Tag: Can the Body can be made Mandatory to process the tag.


11. <select name=’styleId’>
12. <% BeerStyle[] styles = beerService.getStyles();
13. for ( int i=0; i < styles.length; i++ ) {
14. BeerStyle style = styles[i]; %>
15. <option value=’<%= style.getObjectID() %>’>
16. <%= style.getTitle() %>
17. </option>
18. <% } %>
19. </select>


<select name=’styleId’>
<c:forEach var=’style’ items=’${beerService.styles}’>
<option value=’${style.objectID}’>${style.title}</option>
</c:forEach>
</select>

					Sometimes JSTL and standard actions aren’t enough.

When you need something custom, and you don’t want to go back to scripting, you can write your own tag handlers. That way, your page designers can use
your tag in their pages, while all the hard work is done behind the scenes in your tag handler class. But there are three different ways to build your own tag handlers, so there’s a lot to learn. Of the three, two were introduced with JSP 2.0 to make your life easier (Simple Tags and Tag Files). But you still have to learn about Classic tags for that ridiculously rare occasion when neither of the other two will do what you want. Custom tag development gives you virtually unlimited power, if you can learn to wield


I like the idea of having reusable chunks, but <jsp:include> and <c:import> aren’t perfect. There’s no standard for directories to put the included files in, the JSP is hard to read, and the fact that you make new request parameters to send something to the included file feels wrong...

Sure, it works fine. But should you really have to create new request parameters just to give the included file some customizing information?
Aren’t request parameters supposed to represent form data sent from the client as part of the request? While there might be good reasons to add or change request parameters in your app, using them to send something to the included file isn’t the cleanest approach

Until JSP 2.0, there wasn’t a standard way to deploy included files—you could put the included pieces just about anywhere in the web app. And a JSP with a bunch of <jsp:include> or <c:import> tags isn’t the easiest thing to read. Wouldn’t it be better if the tag itself told you something about the thing being included? Wouldn’t it be nice to say something like: <x:logoHeader> or <x:navBar>


							Tag Files: like include, only better
					

With Tag Files, you can invoke reusable content using a custom tag instead of the generic <jsp:include> or <c:import>. You can think of Tag
Files as a kind of “tag handler lite”, because they let page developers create custom tags, without having to write a complicated Java tag handler class, but Tag Files are really just glorified includes

1)Take an included fi le (like “Header.jsp”) and rename it with a .tag extension.

<img src=”images/Web-Services.jpg” > <br> This is the entire file... remember, we stripped out the opening and closing <html> and <body> tags, so they
won’t be duplicated in the final JSP.

2)Put the tag file (“Header.tag”) in a directory named “tags” inside the “WEB-INF” directory

3)Put a taglib directive (with a tagdir attribute) in the JSP, and invoke the tag
<%@ taglib prefix=”myTags” tagdir=”/WEB-INF/tags” %> 
Use the “tagdir” attribute in the taglib directive, instead of the “uri” we use with TLDs for tag libraries

<myTags:Header/> The name of the tag is simply the name of the tag file! (minus the .tag extension)
------------------------------
So instead of:
<jsp:include page=”Header.jsp”/>
we now have:
<myTags:Header/>

To a Tag File, you don’t send request parameters, you send tag attributes

Invoking the tag from the JSP
-----------------------------
Before (using <jsp:param> to set a request parameter)
<jsp:include page=”Header.jsp”>
<jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>

After (using a Tag with an attribute)
<myTags:Header subTitle=”We take the String out of SOAP” />

Using the attribute in the Tag File
-----------------------------------
Before (using a request param value)
<em><strong>${param.subTitle}</strong></em>

After (using a Tag File attribute)
<em><strong>${subTitle}</strong></em> <br>


All tag attributes have TAG scope. That’s right, just the tag. Once the tag is closed, the tag attributes go out of scope!

You have to be clear about these—the <jsp:include> <jsp:param> value goes in as a request parameter. That’s not the same as a request-scoped attribute, remember. The name/value pair for the <jsp:param> looks to the web-app as though it came in with a form submission. That’s one of the reasons we DON’T like using it—the value you meant to pass ONLY to the included fi le, ends up visible to any component in the web app that is a part of this request (such as servlets or JSPs to which the request is forwarded).

But the nice, clean thing about tag attributes for Tag Files is that they’re scoped to the tag itself. Just be sure you know the implications. This will NOT work:

<%@ taglib prefi x=”myTags” tagdir=”/WEB-INF/tags” %>
<html><body>
<myTags:Header subTitle=”We take the String out of SOAP” />
<br>
${subTitle}			This won’t work! The attribute is out of scope
</body></html>


Wait...something’s not right here. How does the person writing the JSP even KNOW that the tag has that attribute? Where’s the TLD that describes the attribute type?

With custom tags, including the JSTL, the tag attributes are defined in the TLD. Remember? This is the TLD from the custom <my:advice> tag from the last chapter

<attribute>
<name>user</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>

So, these are the things the developer who is using a tag needs to know. What’s the attribute name? Is it optional or required? Can it be an expression, or must it be only a String literal?

But while you do specify custom tag attributes in a TLD, you do NOT specify tag file attributes in a TLD

						Tag Files use the attribute directive

There’s a shiny new type of directive, and it’s just for Tag Files. Nothing else can use it. It’s just like the <attribute> sub-element in the <tag> section of the TLD for a custom tag.


Inside the Tag File (Header.tag)

<%@ attribute name=”subTitle” required=”true” rtexprvalue=”true” %>
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${subTitle}</strong></em> <br>


Inside the JSP that uses the tag

<%@ taglib prefix=”myTags” tagdir=”/WEB-INF/tags” %>
<html><body>
<myTags:Header subTitle=”We take the String out of SOAP” />

What happens if you do NOT have the attribute when you use the tag

<myTags:Header /> You can’t do this... you can’t leave out the subTitle attribute because the tag file’s attribute directive says required=”true”.

				When an attribute value is really big


Imagine you have a tag attribute that might be as long as, say, a paragraph. Sticking that in the opening tag could get ugly. So, you can choose to put content in the body of the tag, and then use that as a kind of attribute.

This time we’ll take the subTitle attribute out of the tag, and instead make it the body of the <myTags:Header> tag.

Inside the JSP that uses the tag::
-----------------------------------
<%@ taglib prefix=”myTags” tagdir=”/WEB-INF/tags” %>
<myTags:Header>
We take the sting out of SOAP. OK, so it’s not Jini,<br> but we’ll help you get through it with the least<br> frustration and hair loss.
</myTags:Header>

Now we just give the tag a body, instead of putting all this as the value of an attribute in the opening tag

Inside the Tag File (Header.tag)
--------------------------------		We no longer need the attribute directive!

<img src=”images/Web-Services.jpg” > <br>
<em><strong><jsp:doBody/></strong></em> <br>

This says, “Take whatever is in the body of the tag used to invoke this tag file, and stick it here


But we’re back to the same problem we had before—without a TLD, where do you declare the body-content type?

Declaring body-content for a Tag File::
---------------------------------------
The only way to declare body-content type for a Tag File is with another new Tag File directive, the tag directive. The tag directive is the Tag File equivalent of the page directive in a JSP page, and it has a lot of the same attributes plus an important one you won’t find in page directive—body-content

For a custom tag, the <body-content> element inside the <tag> element of a TLD is mandatory! But a Tag File does not have to declare <body-content> if the default—scriptless—is acceptable.

****Note::You CANNOT use scripting code in the body of a Tag File tag...The body-content of a Tag File defaults to “scriptless”, so you don’t have to declare body-content unless you want one of the OTHER two options: “empty” (nothing in the tag body) or “tagdependent” (treats the body as plain text).


Inside the Tag File with a tag directive (Header.tag)


<%@ attribute name=”fontColor” required=”true” %>			Declaring the Bodytype and Attributes also here..
<%@ tag body-content=”tagdependent” %>
<img src=”images/Web-Services.jpg” > <br>
<em><strong><font color=”${fontColor}”><jsp:doBody/></font></strong></em> <br>  Using the Attributes and Body Here

Inside the JSP that uses the tag

<%@ taglib prefi x=”myTags” tagdir=”/WEB-INF/tags” %>
<html>								Mentioning the attributes and body as per declaration in the Tag File
<myTags:Header fontColor=”#660099”> We take the sting out of SOAP. OK, so it’s not Jini,<br> but we’ll help you get through it with the least<br>frustration and hair loss.
</myTags:Header>


Where the Container looks for Tag Files:
---------------------------------------
1)Directly inside WEB-INF/tags
2)Inside a sub-directory of WEB-INF/tags
3)Inside the META-INF/tags directory inside a JAR file that’s inside WEB-INF/lib
4)Inside a sub-directory of META-INF/tags inside a JAR file that’s inside WEB-INF/lib
5)IF the tag file is deployed in a JAR, there MUST be a TLD for the tag file.

Do we get the Resuable Contents from the external Dependencies?


Does the Tag File have access to the request and response implicit objects?
---------------------------------------------------------------------------
Yes! Remember, even though it’s a .tag file, it’s gonna end up as part of a JSP. You can use the implicit request and response objects (if you do scripting... the normal EL implicit objects are always there as well), and you have access to a JspContext as well.
You don’t have a ServletContext, though—a Tag File uses a JspContext instead of a ServletContext.

I thought on the opposite page you just said we could not do scripting in a Tag File!
No, that’s not exactly what we said. You can do scripting in a Tag File, but you can’t do scripting inside the body of the tag used to invoke the Tag File.

Can you combine Tag Files and TLDs for custom tags in the same directory?
Yes. In fact, if you make a TLD that references your Tag Files, the Container will consider both Tag Files and custom tags mentioned in the same TLD as belonging to the same library.

Hold on—I thought you said Tag Files didn’t have a TLD? Isn’t that why you have to use an attribute directive? Since you can’t declare the attribute in a TLD

Trick question. If you deploy your Tag Files in a JAR, they MUST have a TLD that describes their location. But it doesn’t describe attribute, body-content, etc. 

TLD entries for a Tag File describe only the location of the actual Tag File.
The TLD for a Tag File looks like this:
<taglib ....>
<tlib-version>1.0</tlib-version>
<uri>myTagLibrary</uri>
<tag-file>
<name>Header</name>
<path>/META-INF/tags/Header.tag</path>
</tag-file>
</taglib>

Why did they do it this way? Wouldn’t it be so much simpler to just have custom tags and Tag Files declared the same way in a TLD? But NO... instead they had to come up with this whole other thing where you have to use new directives for defining the attributes and body-content. So, why are tags and Tag Files done differently?

On one hand, yes, it would have been simpler if custom tags and Tag Files were declared in the same way, using a TLD. The question is, simpler for whom? For a custom tag developer, sure. But Tag Files were added to the spec with someone else in mind—page designers

Tag Files give non-Java developers a way to build custom tags without writing a Java class to handle the tag’s functionality. And not having to build a TLD for the Tag File just makes life easier for the Tag File developer. (Remember, Tag Files do need a TLD if the Tag File is deployed in the JAR, but a non-Java programmer might not be using JARs anyway.)


				When you need more than Tag Files..Sometimes you need Java

But sometimes you need more. Sometimes you need good old Java code, and you don’t want to do it from scriptlets, since that’s what you’re trying to prevent by using tags.

When you need Java, you need a custom tag handler. A tag handler, as opposed to a tag file, is simply a Java class that does the work of the tag. It’s a little like an EL function, except much more powerful and flexible. Where EL functions are nothing more than static methods, a tag handler class has access to tag attributes, the tag body, and even the page context so it can get scoped attributes and the request and response.


Custom tag handlers come in two flavors: Classic and Simple. Classic tags were all you had in the previous version of JSP, but with JSP 2.0, a new and much simpler model was added.

You’ll have a hard time coming up with reasons to use the classic model when you need a custom tag handler, because the simple model (especially combined with JSTL and tag files) can handle nearly anything you’d want to do. But we can’t dump the classic model.. Because its on Exam and Previous Old Projects..


****Tag files implement the tag functionality with another page (using JSP).

***Tag handlers implement the tag functionality with a special Java class


SimpleTagModel:
--------------
1)Write a class that extends SimpleTagSupport

public class SimpleTagTest1 extends SimpleTagSupport { // tag handler code here

	public void doTag() throws JspException, IOException {					2)Override the doTag Method
		getJspContext().getOut().print(“This is the lamest use of a custom tag”);
	}
}

3)Create a TLD for the tag
<tag>
<description>worst use of a custom tag</description>
<name>simple1</name>
<tag-class>foo.SimpleTagTest1</tag-class>
<body-content>empty</body-content> </tag>

4)Deploy the tag handler and TLD... Inside the WEB-INF/classes folder & tld inside WEB-INF directly

5)Deploy the tag handler and TLD

<%@ taglib prefi x=”myTags” uri=”simpleTags” %>
<html><body>
<myTags:simple1/>
</body></html>

Simple tag with a body:
-------------------
<%@ taglib prefix=”myTags” uri=”simpleTags” %>
<html><body>
Simple Tag 2:
<myTags:simple2>
This is the body
</myTags:simple2>
</body></html>


TagHandler Class:
-----------------
public class SimpleTagTest2 extends SimpleTagSupport {
	public void doTag() throws JspException, IOException {
		getJspBody().invoke(null);
	}
}
This says, “Process the body of the tag and print it to the response”. The null argument means the output goes to the response rather than some OTHER writer you pass in.

change in the Tld to reflect the BodyContent:<body-content>scriptless</body-content>

					The Simple tag API


JspTag interface((javax.servlet.jsp.tagext.JspTag))
	|	
	|// no methods, this interface is for
	|// organization and polymorphism
	|
	|

SimpleTag interface((javax.servlet.jsp.tagext.SimpleTag))
	|
	|
	|

void doTag()
JspTag getParent()		These are the lifecycle methods... the Container calls these whenever a tag is invoked. Can you guess the order in
				which these methods are called
void setJspBody(JspFragment)
void setJspContext(JspContext)
void setParent(JspTag parent)
	
      |
      |	

JspTag findAncestorWithClass (JspTag, Class)
JspFragment getJspBody()
JspContext getJspContext()

SimpleTagSupport implements the methods of SimpleTag (but the doTag() doesn’t do anything, so you must override it in your tag handler). It also adds three more convenience methods, including the most useful one—getJspBody().

The life of a Simple tag handler:
--------------------------------
When a JSP invokes a tag, a new instance of the tag handler class is instantiated, two or more methods are called on the handler, and when
the doTag() method completes, the handler object goes away.In other words, these handler objects are not reused.)

1)Load class
2)Instantiate class (no-arg constructor runs).
3)Call the setJspContext(JspContext) method.	This gives the handler a reference to a PageContext (a subclass of JspContext)
4)If the tag is nested (invoked from within another tag), call the setParent(JspTag) method..A nested tag can communicate with the other tags in which it’s nested
5)If the tag has attributes, call attribute setters
6)If the tag is NOT declared to have a <bodycontent> of empty, AND the tag has a body, call the setJspBody(JspFragment) method.If the tag has a body, the body comes in through this method, as an instance of JspFragment.
7)Call the doTag() method.


					What if the tag body uses an expression?
					----------------------------------------
Imagine you have a tag with a body that uses an EL expression for an attribute. Now imagine that the attribute doesn’t exist at the time you invoke the tag! In other words, the tag body depends on the tag handler to set the attribute. The example doesn’t do anything very useful, but it’s here to show you how it works in preparation for a bigger example

<myTags:simple3>
Message is: ${message}	At the point where the tag is invoked,“message” is NOT a scoped attribute! If you took this expression out of the
			tag, it would return null.
</myTags:simple3>

The tag handler doTag() method

public void doTag() throws JspException, IOException { 
getJspContext().setAttribute(“message”, “Wear sunscreen.”); 
getJspBody().invoke(null);
}

The tag handler sets an attribute and THEN invokes the body.



<table>
<myTags:simple4>
<tr><td>${movie}</td></tr>
</myTags:simple4>
</table>


Imagine that the tag handler has access to an array of String movie names, and you want to print one row for each movie name in the array.
In the browser, you’ll see something like

Monsoon Wedding
Saved!
Fahrenheit 9/11

Solution:
---------

String[] movies = {“Monsoon Wedding”, “Saved!”, “Fahrenheit 9/11”};
	public void doTag() throws JspException, IOException {
	for(int i = 0; i < movies.length; i++) {
	getJspContext().setAttribute(“movie”, movies[i]); Set the attribute value to be the next element in the array & then process the body again
	getJspBody().invoke(null);
}
}

If the tag needs an attribute, you declare it in the TLD, and provide a bean-style setter method in the tag handler class for each attribute.
If the tag invocation includes attributes, the Container invokes a setter method for each attribute

<table>
<myTags:simple5 movieList=”${movieCollection}”>
<tr>
<td>${movie.name}</td>				The tag Body needs to be repated/processed for the multiple times
<td>${movie.genre}</td>
</tr>
</myTags:simple5> </table>


public class SimpleTagTest5 extends SimpleTagSupport { 

	private List movieList;

	public void setMovieList(List movieList) {
		this.movieList=movieList;
	}
	public void doTag() throws JspException, IOException {
	Iterator i = movieList.iterator();
	while(i.hasNext()) {
	Movie movie = (Movie) i.next();
	getJspContext().setAttribute(“movie”, movie); getJspBody().invoke(null);
}
}

JSPFragment Object:
-------------------

The crucial thing you must remember about JspFragment is that it must NOT contain any scripting elements! It can contain template text, standard and custom actions, and EL expressions, but no scriptlets, declarations, or scripting expressions.

One cool thing is that since it’s an object, you can even pass the fragment around to other helper objects. And those objects, in turn, can get information from it by invoking the JspFragment’s other method—getJspContext(). And of course once you’ve got a context, you can ask for attributes. So the getJspContext() method is really a way for the tag body to get information to other objects.


Most of the time, though, you’ll use JspFragment simply to output the body of the tag to the response. You might, however, want
to get access to the contents of the body. Notice that JspFragment doesn’t have an access method like getContents() or getBody(). You can write the body to something, but you can’t directly get the body. If you do want access to the body, you can use the argument to the invoke() method to pass in a java.io.Writer, then use methods on that Writer to process the contents of the tag body


The invoke() method takes a Writer... pass null to send the body to the response output, or a Writer if you want direct access to the actual body contents.

Notice that JspFragment doesn’t have an access method like getContents() or getBody(). You can write the body to something, but you can’t directly get the
body. If you do want access to the body, you can use the argument to the invoke() method to pass in a java.io.Writer, then use methods on that Writer to process the contents of the tag body.


****getJspBody().invoke(null)--->It is the crucial method that need to be called for every Tag to put the output of the response on the webbrowser...

SkipPageException Stops Processing the Rest of Page:
--------------------------------------------------

Imagine you’re in a page that invokes the tag, and the tag depends on specific request attributes (that it gets from the JspContext available to the tag handler).Now imagine the tag can’t find the attributes it needs, and that the tag knows the rest of the page will never work if the tag can’t succeed. What do you do? You could have the tag throw a JspException, and that would kill the page... but what if it’s only the rest of the page that won’t work? In other words, what if you still want the first part of the page—the part of the page that’s evaluated before the tag invocation—to still appear as the response, but you don’t want the response to include anything still left to be processed after the tag throws an exception? No problem. That’s exactly why SkipPageException exists.


public void doTag() throws JspException, IOException {
	getJspContext().getOut().print(“Message from within doTag().<br>”);
	getJspContext().getOut().print(“About to throw a SkipPageException”);
	if (thingsDontWork) {
	throw new SkipPageException();	At this point, we decided that the rest of the tag AND the rest of the page should stop. Only the part of the page 						and the tag BEFORE the exception will appear in the response
	}
}	

<%@ taglib prefi x=”myTags” uri=”simpleTags” %>
<html><body>
About to invoke a tag that throws SkipPageException <br>
<myTags:simple6/>						The tag handled in the doTag() method above (that throws SkipPageException) 
<br>Back in the page after invoking the tag.
</body></html>

SkipPageException stops only the page that directly invoked the tag
-----------------------------------------------------------------

<html><body>
This is page (A) that includes another page (B). <br>
Doing the include now:<br>
<jsp:include page=”badTagInclude.jsp” />
<br>Back in page A after the include...
</body></html>

<%@ taglib prefi x=”myTags” uri=”simpleTags” %>
This is page B that invokes the tag that throws SkipPageException.
Invoking the tag now:<br>
<myTags:simple6/>
<br>Still in page B after the tag invocation...

public void doTag() throws JspException, IOException {
getJspContext().getOut().print(“Message from within doTag().<br>”);
getJspContext().getOut().print(“About to throw a SkipPageException”);
throw new SkipPageException();
}

If the page that invokes the tag was included from some other page, only the page that invokes the tag stops processing! The original page that did the include keeps going after the SkipPageException


What happens to a SimpleTag handler after it completes doTag()? Does the Container keep it around and reuse it?

No. SimpleTag handlers are never reused! Each tag handler instance takes care of a single invocation. So you never have to worry, for example, that instance variables in a SimpleTag handler won’t have the correct initial values. A SimpleTag handler object will always be initialized before any of its methods are called.

In a SimpleTag handler, if the tag is declared to have a body but it is invoked using an empty tag (since there’s no way to say that a body is required), is the setJspBody() still invoked?

No! The setJspBody() is invoked ONLY if these two things are true:
1) The tag is NOT declared in the TLD to have an empty body.
2) The tag is invoked with a body.
That means that even if the tag is declared to have a non-empty body, the setJspBody() method will not be called if the tag is invoked in either of these two ways:
<foo:bar /> (empty tag)
<foo:bar></foo:bar> (no body).


*****NOte:::The Simple tag’s doTag() method can set an attribute used by the body of the tag, by calling getJspContext().setAttribute() followed by getJspBody().invoke().

						Classic Tag Model
						------------------

Tag interface

int doEndTag()
Tag getParent()
int doStartTag()
void setPageContext(PageContext)
void setParent(Tag)
void release()

  |
  |
IterationTag interface	

int doAfterBody()						TagSupport class

  |								int doAfterBody()
  |								int doStartTag()
  |								int doEndTag()
  |								void setPageContext(PageContext)
  |								// more methods
  |
BodyTag interface

void doInitBody()
void setBodyContent(BodyContent)


								BodyTagSupport class

								int doStartTag()
								BodyContent getBodyContent()
								void doInitBody()
								void setBodyContent(BodyContent)
								// more methods...
									
This side (with the white boxes) is the SimpleTag API. The JspTag superinterface was added with JSP 2.0, but it doesn’t affect the Classic tag API.

A very small Classic tag handler


the differences won’t become painful until you try to process a tag with a body (but you’ll just have to wait for that).



Classic Tag One:<br>
<mine:classicOne />

<tag>
<description>ludicrous use of a Classic tag</description>
<name>classicOne</name>
<tag-class>foo.Classic1</tag-class>
<body-content>empty</body-content>
</tag>

There’s no way to know for certain that this <tag> is handled by a Classic tag handler, unless you know that foo.Classic1 class implements the Tag interface (instead of SimpleTag). We could completely replace the foo.Classic1 code to have it use a SimpleTag, and the TLD would not change


public class Classic1 extends TagSupport {

	public int doStartTag() throws JspException {
		JspWriter out = pageContext.getOut();
		try {
			out.println(“classic tag output”);
		} catch(IOException ex) {
			throw new JspException(“IOException- “ + ex.toString());       Here we must use a try/catch, because we can’t declare the 											IOException
		}
			return SKIP_BODY;			We have to return an int to tell the Container what to do next. Much more on this coming up
	}
}

By extending TagSupport, we’re implementing both Tag and IterationTag. Here we’re overriding only one method, doStartTag

The methods declare JspException, but NOT an IOException! (The SimpleTag doTag() declares IOException)

Classic tags inherit a pageContext member variable from TagSupport (in contrast to the getJspContext() method of SimpleTag).


This example overrides both the doStartTag() and doEndTag() methods, although it could accomplish the same output all within doStartTag(). The point of doEndTag() is that it’s called after the body is evaluated. We don’t show the TLD here, because it’s virtually identical to the previous one, except for some of the names. The tag is declared to have no attributes, and an empty body

<%@ taglib prefi x=”mine” uri=”KathyClassicTags” %>
<html><body>
Classic Tag Two:<br>
<mine:classicTwo />
</body></html>

public class Classic2 extends TagSupport {
	JspWriter out;
	public int doStartTag() throws JspException {
		out = pageContext.getOut();
		try {
			out.println(“in doStartTag()”);
		} catch(IOException ex) {
			throw new JspException(“IOException- “ + ex.toString());
		}
			return SKIP_BODY; 		//This says, “Don’t evaluate the body if there is one—just go straight to the doEndTag() method.”
		}

	public int doEndTag() throws JspException {
		try {
			out.println(“in doEndTag()”);
		} catch(IOException ex) {
			throw new JspException(“IOException- “ + ex.toString());
		}
		return EVAL_PAGE;		This says, “Evaluate the rest of the page” (as opposed	to SKIP_PAGE, which would be just like throwing a
						SkipPageException from a SimpleTag handler)
}



When a tag has a body: comparing Simple vs. Classic
---------------------------------------------------

Now it starts to look different from a SimpleTag. Remember, SimpleTag bodies are evaluated when (and if) you want by calling invoke() on the JspFragment thatencapsulates the body. But in Classic tags, the body is evaluated in between the doStartTag() and doEndTag() methods! Both of the examples below have the exact same behavior.

<html><body>
<myTags:simpleBody>
This is the body
</myTags:simpleBody>
</body></html>

// package and imports
public class SimpleTagTest extends SimpleTagSupport {
	public void doTag() throws JspException, IOException {
		getJspContext().getOut().print(“Before body.”);
		getJspBody().invoke(null);				This causes the body to be evaluated
		getJspContext().getOut().print(“After body.”);
}
}

ClassicTag

public int doStartTag() throws JspException {
	out = pageContext.getOut();
	try {							Before evaluating the Tag if you have anything to do then we should write here..
		out.println(“Before body.”);			Like the setting the attribute for the body contents before its evaulated
	} catch(IOException ex) {
		throw new JspException(“IOException- “ + ex.toString());  THIS is what causes the body to be evaluated in a Classic tag handler!
	}
		return EVAL_BODY_INCLUDE;
}							THIS is what causes the body to be evaluated in a Classic tag handler

public int doEndTag() throws JspException {
   try {						Once the Body is evlauated if you any other tasks that need to be perfomed it should be done
	out.println(“After body.”);			from here !!..
  } catch(IOException ex) {
	throw new JspException(“IOException- “ + ex.toString());
   }
	return EVAL_PAGE;
}

But how do you loop over the body? It looks like doStartTag() is called too early, and doEndTag() is too late, and I don’t have any way to keep re-invoking the body evaluation...


public class SimpleTagTest extends SimpleTagSupport {
	public void doTag() throws JspException, IOException {
		for(int i = 0; i < 3, i++) {
		getJspBody().invoke(null);		It’s easy to loop the body of a Simple tag; you just keep calling invoke() on the body, from within 							doTag().
	}
	}
}


public class ClassicTest extends TagSupport {
	public int doStartTag() throws JspException {
		return EVAL_BODY_INCLUDE;
	}
	public int doEndTag() throws JspException {
		return EVAL_PAGE;
}

But where do you loop over the body, if the body is evaluated in between the methods instead of IN a method like doTag()?

Classic tags have a different lifecycle:
---------------------------------------
Simple tags are simple—it’s all about doTag(). But with classic tags, there’s a doStartTag() and a doEndTag(). And that brings up an interesting problem—when and how is the body evaluated? There’s no doBody() method, but there is a doAfterBody() method that’s called after the body is evaluated and before the doEndTag() runs.

Load class
Instantiate class (no-arg constructor runs).
Call the setPageContext(PageContext) method.
If the tag is nested (invoked from within another tag), call the setParent(Tag) method.
If the tag has attributes, call attribute setters.
Call the doStartTag() method.

If the tag is NOT declared to have an empty body, AND the tag is NOT invoked with an empty body, AND the doStartTag() method returns
EVAL_BODY_INCLUDE, the body is evaluated

If the body content was evaluated, call the doAfterBody() method

Call the doEndTag() method.

	
***Note::doAfterBody() lets you do things AFTER the body runs, and unlike the other methods it can be invoked more than once

         doEndTag() is always called once, either after doStartTag() or after doAfterBody().

****How to stop the evaulation of the body for the firsttime? Need to throw the exception in doStartTag()


The Classic lifecycle depends on return values
----------------------------------------------

The doStartTag() and doEndTag() methods return an int. That int tells the Container what to do next. With doStartTag(), the question the Container
asks is, “Should I evaluate the body?” (assuming there is one, and assuming the TLD doesn’t declare the body as empty).


With doEndTag(), the Container asks, “Should I keep evaluating the rest of the calling page?” The return values are represented by constants declared in
the Tag and IterationTag interfaces

Returning SKIP_PAGE from doEndTag() is exactly like throwing a SkipPageException from a Simple tag! If a page included the page that invoked the tag, the current (included) page stops processing, but the including page continues...


						IterationTag lets you repeat the body
						-------------------------------------

When you write a tag handler that extends TagSupport, you get all the lifecycle methods from the Tag interface, plus the one method from IterationTag—doAfterBody(). Without doAfterBody(), you can’t iterate over the body because doStartTag() is too early, and doEndTag() is too late

But with doAfterBody(), your return value tells the Container whether it should repeat the body again (EVAL_BODY_AGAIN) or call the doEndTag() method (SKIP_BODY)

Default return values from TagSupport:
--------------------------------------

If you don’t override the TagSupport lifecycle methods that return an integer, be aware of the default values the TagSupport method implementations return. The TagSupport class assumes that your tag doesn’t have a body (by returning SKIP_BODY) from doStartTag()), and that if you DO have a body that’s evaluated, you want it evaluated only once (by returning SKIP_BODY from doAfterBody()). It also assumes that you want the rest of the page to evaluate (by returning EVAL-PAGE from doEndtag()).

doStartTag()  **SKIP_BODY EVAL_BODY_INCLUDE

doAfterBody()  **SKIP_BODY EVAL_BODY_AGAIN

doEndTag()   SKIP_PAGE  **EVAL_PAGE

doStartTag() and doEndTag() run exactly once.

You really must know this lifecycle for the exam. Don’t forget that doStartTag() and doEndTag() are always called, and they’re called only once, regardless of anything else that happens. But doAfterBody() can run from 0 to many times, depending on the return value of doStartTag() and previous doAfterBody() calls.

You MUST override doStartTag() if you want the tag body to be evaluated!!
------------------------------------------------------------------------

Think about it! The default return value from doStartTag() is SKIP_BODY, so if you want the body of your tag evaluated, and you extend TagSupport, you MUST override doStartTag() if for no other reason than to return EVAL_BODY_INCLUDE. With doAfterBody(), it should be obvious that if you want to iterate over the body, you have to override that method as well, since its return value is SKIP_BODY.


public class MyIteratorTag extends TagSupport { 

	String[] movies= new String[] {“Spiderman”, “Saved!”, “Amelie”}; 
	int movieCounter;
	
	public int doStartTag() throws JspException {
		movieCounter=0;
		pageContext.setAttribute(“movie”, movies[movieCounter]);
		movieCounter++;
		return EVAL_BODY_INCLUDE;	
	}
	public int doAfterBody() throws JspException {
	if (movieCounter < movies.length) {
		pageContext.setAttribute(“movie”, movies[movieCounter]);
		movieCounter++;
		return EVAL_BODY_AGAIN;
	} else {
		return SKIP_BODY;
	}
}
	public int doEndTag() throws JspException {
		return EVAL_PAGE; 
} 
	}

*********This doAfterBody() method was correct, but it runs only AFTER the body has already been processed once! Without the two extra lines in doStartTag(), the body is processed once without there being a movie attribute, so you get the empty cell

This seems stupid—there’s duplicate code in doStartTag() and doAfterBody().

Yes, there’s duplicate code. In this case, if you’re implementing TagSupport, and you want to set values the body can use, then you MUST set those attribute values in doStartTag(). You can’t wait until doAfterBody(), because by the time you get to doAfterBody(), the body has already been processed once.
Yes, it’s kind of stupid. Which is why SimpleTag is so much better. Of course if you were writing the code, you’d make a private method in your 
tag handler... say, setMovie(), and you’d call that method from both doStartTag() and doAfterBody(). But it’s still an awkward approach

***WHY are you setting the instance variable value for movieCounter INSIDE the doStartTag() method? Why can’t you just initialize it when you declare it?

Yikes! Unlike SimpleTag handlers, which are never reused, a Classic tag handler can be pooled and reused by the Container. That means you’d better reset your instance variable values with each new tag invocation (which means in doStartTag()). Otherwise, this code works the first time, but the next time
a JSP invokes it, the movieCounter variable will still have its last value, instead of 0!


The Container can reuse Classic tag handlers!
---------------------------------------------
Watch out—this is completely different from SimpleTag handlers, which are definitely NOT reused. That means you have to be very careful about instance
variables—you should reset them in doStartTag(). The Tag interface does have a release() method, but that’s called only when the tag handler instance is about to be removed by the Container. So don’t assume that release() is a way to reset the tag handler’s state in between tag invocations..


<form method=”POST” action=”SelectBeer.do”>
<p>Select beer characteristics:</p>
Color:
<select name=’color’ size=’1’ >
<option value=’light’> light </option>				----->We want the set of options in this <select> tag to come from the application
<option value=’amber’> amber </option>
<option value=’brown’> brown </option>
<option value=’dark’> dark </option>
</select>
<br><br>
<input type=”SUBMIT”>
</form>

If we make the options dynamic, they’ll be easier to update and change, without messing around with the HTML. Instead, we want the options to be generated from a Java List created in the web application. So here’s the custom tag we want to build


<form method=”POST” action=”SelectBeer.do”>
<p>Select beer characteristics:</p>
Color:
<formTags:select name=’color’ size=’1’optionsList=’${applicationScope.colorList}’ />
<br><br>
<input type=”SUBMIT”>
</form>

Our custom tag generates the list of options. The name and size tag attributes are “pass-through” values..With this tag, an app can change the options without hard-coding business data in an HTML form


Wait a minute... if our select tag is trying to mimic the standard HTML <select> tag, then we need to include attributes for all of the <select> tag attributes, not just name and size


The HTML <select> tag accepts many more tag attributes than just name and size:

Core attributes: id, class, style, and title
Internationalization attributes: lang and dir
Event attributes: onclick, ondblclick, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeyup, and onkeydown
Form attributes: name, disabled, multiple, size, tabindex, onfocus, onblur, and onchange


//setter methods for all the attributes here....

if ( this.id != null )
out.print(String.format(ATTR_TEMPLATE, “id”, this.id));
if ( this.styleClass != null )
out.print(String.format(ATTR_TEMPLATE, “class”, this.styleClass));
if ( this.style != null )
out.print(String.format(ATTR_TEMPLATE, “style”, this.style));
if ( this.title != null )
out.print(String.format(ATTR_TEMPLATE, “title”, this.title));
if ( this.lang != null )
out.print(String.format(ATTR_TEMPLATE, “lang”, this.lang));
if ( this.dir != null )
out.print(String.format(ATTR_TEMPLATE, “dir”, this.dir));


This solution sucks. And it’s tons of code to keep up with. Worse, what if we want to create a suite of custom tags to augment other HTML tags?!
The tag handler class must implement a setter method for each of the tag attributes declared in the TLD. But these setter methods aren’t really doing anything interesting. The values of these attributes are simply passed on to the output generated for the HTML <select> tag.
We could apply an design principle: “Encapsulate that which varies.”* In this case the set of optional HTML tag attributes is the thing that varies in this tag handler. One solution would be to put all of the attributes into a hashtable. This generalizes the tag object’s storage of attributes, but what about all these setter methods? We can’t get rid of them unless there’s a way to tell the JSP engine to set the tag attributes using a generic interface


Didn’t you know?!?!? The JSP spec provides an API just for this purpose. The DynamicAttribute interface is all you need


<<interface>>
DynamicAttributes
	+setDynamicAttribute(
		uri:String,
		name:String,
		value:Object) : void


SelectTagHandler extends  SimpleTagSupport implements DynamicAttributes{

	-optionsList:List
	-tagAttrs:Map<String,Object>		You will most likely store the dynamic attributes in a hashmap.
	
This setter method is used for every dynamic attribute. The name parameter is the name of the attribute. The value parameter is the
value of the attribute. The uri parameter is the XML namespace that defines the attribute. Normally, you can ignore this parameter.
	+setDynamicAttribute(
		uri:String,
		name:String,
		value:Object) : void
}


Our tag handler code using the DynamicAttributes interface


public class SelectTagHandler  extends SimpleTagSupport implements DynamicAttributes {

	public void setOptionsList(List value) {
		this.optionsList = value;
	}
	private List optionsList = null;
	// store the ‘name’ attribute
	public void setName(String value) {
		this.name = value;
	}
	private String name;
	// store all other (dynamic) attributes
	public void setDynamicAttribute(String uri, String name, Object value) {
		tagAttrs.put(name, value);
}
private Map<String,Object> tagAttrs = new HashMap<String,Object>();


There is a little bit of configuration in the TLD
--------------------------------------------------

<tag>
		<description>classicTag</description>
		<name>select</name>
		<tag-class>com.servlet.customtags.DynamicOptionsGenerator1</tag-class>
		<body-content>empty</body-content>
		<attribute>
			<name>optionsList</name>
			<required>true</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.util.List</type>
		</attribute>
		<dynamic-attributes>true</dynamic-attributes>
	</tag>


You were using a Simple tag. Does this work with Classic tags, too?

Yup, the DynamicAttributes interface can be implemented by a Classic tag in the same fashion as with a Simple tag. Even the configuration in the TLD file is the same.

Do dynamic attributes accept runtime expressions, like EL or <%= %> ?

Since in the Tag Handler we took the private Map<String,Object> tagAttrs = new HashMap<String,Object>();

Absolutely. By default every dynamic attribute may use EL or JSP expression tags to specify the value of the attribute. In fact, did you notice that the data type of the value parameter of the setDynamicAttribute() method is Object, and not String? This means that the value can evaluate to any Java object

What if I need to “compute” on data in a given dynamic attribute?

You can always inspect the name parameter and decide to perform some computation or transformation of the value of that attribute. But if you need that kind of functionality, then you should probably make that attribute explicit, and perform your computation in that attribute’s setter method.


What happens if the custom tag user enters an attribute name that is invalid?

This is the $64,000 question. Because the attribute names are not explicitly declared in the TLD, the JSP engine sends all other attributes to the tag handler using the setDynamicAttribute() method. The result is that the JSP author might mistype the name of a standard HTML attribute and never know it—at least until the browser failed to invoke the behavior of that attribute. So, the first solution Gary proposed (using explicit attributes with setters and TLD declarations) has merit. Can you think of other reasons why Gary’s solution is better than Kim’s?


What about Tag Files?

Tag Files can also include dynamic attributes. The mechanism is basically the same, but with Tag Files the JSP engine provides the Map object for you. You can then inspect or iterate over that map of attribute/value pairs using the forEach JSTL tag.

<%@ tag body-content=’empty’ dynamic-attributes=’tagAttrs’%>
<%@ attribute name=’optionsList’ type=’java.util.List’ required=’true’ rtexprvalue=’true’ %>
<%@ attribute name=’name’ required=’true’ %>
<%@ taglib uri=”http://java.sun.com/jsp/jstl/core” prefix=”c” %>
<select name=’${name}’ 
<c:forEach var=”attrEntry” items=”${tagAttrs}”>
${attrEntry.key}=’${attrEntry.value}’
</c:forEach>
>
<c:forEach var=”option” items=”${optionsList}”>
<option value=’${option}’> ${option} </option>
</c:forEach>
</select>

The value of the dynamic-attributes attribute is a page-scoped variable that holds a hashmap

Use the JSTL forEach custom tag to iterate over each entry in the dynamic attribute’s hashmap. Remember, the key of the entry is the attribute name,
and the value of the entry is the value of the attribute.


Bullet Points:
-------------

The DynamicAttributes interface allows the tag handler class to accept any number of tag attributes.....The tag declaration in the TLD must include the <dynamic-attributes> element....Explicit tag attributes must have a setter method...Typically, you will use a hashmap to store the dynamic attribute name/value pairs using the setDynamicAttribute() method.


Tag Files may also use dynamic attributes..Use the dynamic-attributes attribute of the tag directive...The value of dynamic-attributes holds a hashmap of the dynamic attributes...Typically, you will use the JSTL forEach custom action to iterate over this map.


But what if you DO need access to the body contents?

You’ll probably find that most of the time the lifecycle methods from the Tag and IterationTag interfaces, as provided by TagSupport, are enough. Between the three key methods (doStartTag(), doAfterBody(), and doEndTag()), you can do just about anything. Except...you don’t have direct access to the contents of the body. If you need access to the actual body contents, so that you can, say, use it in an expression or perhaps filter or alter it in some way, then extend BodyTagSupport instead of TagSupport, and you’ll have access to the BodyTag interface methods....


Extending BodyTagSupport gives you two more lifecycle methods from the BodyTag interface—setBodyContent() and doInitBody(). You can use these to do something with the actual CONTENTS of the body of the tag used to invoke the handler

When you implement BodyTag (by extending BodyTagSupport), you get two more lifecycle methods—setBodyContent() and doInitBody(). You also get one new return value for doStartTag(), EVAL_BODY_BUFFERED. That means there are now three possible return values for doStartTag(), instead of the two you get when you extend TagSupport

A change in the default return value for BodyTagSupport: New return value EVAL_BODY_BUFFERED., and it’s the default for BodyTagSupport. (Instead of SKIP_BODY, the default for TagSupport)


What happens if I return EVAL_BODY_BUFFERED even though the invoking tag is empty?

The setBodyContent() and doInitBody() method will not be called if the tag invoking the handler is empty! And by empty, we mean that the tag was
invoked using an empty tag <my:tag /> or with no content between the opening and closing tags <my:tag><my:tag>. The Container knows there’s no body this
time, and it just skips to the doEndTag() method, so this is usually not a problem

Unless the TLD declares the tag to have an empty body! If the TLD says <body-content>empty</body-content>, you don’t have a choice, and you must NOT
return EVAL_BODY_BUFFERED or EVAL_BODY_INCLUDE from doStartTag().


You don’t need to know all the details of using BodyTagSupport?

You don’t need to know all the details of using BodyTagSupport. For the exam (and probably for the rest of your JSP-development life), you need to know the lifecycle for BodyTagSupport, and how it differs from TagSupport. You need to know, for example, that if you do NOT extend BodyTagSupport or implement BodyTag, then you must NOT return EVAL_BODY_BUFFERED from doStartTag(). And you should know the two new methods from the BodyTag interface, but that’s about it..

Explicitly declaring that there is no Body!!

If the TLD for a tag declares an empty body, doStartTag() MUST return SKIP_BODY!

That might be obvious, but it means you have to be careful to keep your tag handler and TLD in sync. So, if you declare a tag in the TLD to have <body-content>empty</body-content>, then there is absolutely NO point in implementing BodyTag (or extending BodyTagSupport). That also means there is no point
in implementing IterationTag, but you get that automatically by extending TagSupport. The point is, you need to return SKIP_BODY from doStartTag() if your TLD declares an empty body for the tag, even IF you implement IterationTag or BodyTag.


						What if you have tags that work together?

you have a <mine:Menu> tag that builds a custom navigation bar. It needs menu items. So you use a <mine:MenuItem> tag nested within the <mine:Menu> tag, and the menu tag gets ahold (somehow) of the menu items and uses those items to build the navigation bar

<mine:Menu> Is having the TagHandler.. and it needs the attribute values of the <mine:Menu> Tag..


The big question is, how do the tags talk to one another? In other words, how does the Menu tag (the enclosing tag) get the attribute values from
the MenuItems (the inner/nested tags)?

Fortunately, there’s a mechanism for getting info to and from outer and inner tags, regardless of the depth of nesting. That means you can get
info from a deeply nested tag out to not just the tag’s immediate enclosing tag, but to any arbitrary tag up the tag nesting hierarchy.


A Tag can call its Parent Tag:


	 JSPTag		
	  /	\
	 /	 \
	/	  \
SimpleTag				Tag
  |	
JspTag getParent()			void setParent(Tag)
void setParent(JspTag parent)           Tag getParent()


<mine:OuterTag>
<mine:InnerTag />
</mine:OuterTag>

<mine:InnerTag> Handler class can access the OuterTag Details:
-------------------------------------------------------

Getting the parent tag in a Classic tag handler

public int doStartTag() throws JspException {

	OuterTag parent = (OuterTag) getParent();
	// do something with it
	return EVAL_BODY_INCLUDE;
}

Getting the parent tag in a Simple tag handler

public void doTag() throws JspException, IOException {
	OuterTag parent = (OuterTag) getParent();
	// do something with it
}

					Find out just how deep the nesting goes

You can walk your way up the ancestor tag chain by continuing to call getParent() on whatever is returned by getParent(). Because getParent() returns
either another tag (on which you can call getParent()), or null.

<mine:NestedLevel>
<mine:NestedLevel>
<mine:NestedLevel/>
</mine:NestedLevel>
</mine:NestedLevel>

import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;
import java.io.*;
	public class NestedLevelTag extends TagSupport {
	   private int nestLevel = 0;
	   public int doStartTag() throws JspException {
		nestLevel = 0;
		Tag parent = getParent();
		while (parent!=null) {
		parent = parent.getParent();
		nestLevel++;
	}
}
		try {
			pageContext.getOut().println(“<br>Tag nested level: “ + nestLevel);
	} catch(IOException ex) {
		throw new JspException(“IOException- “ + ex.toString());
	} 
		return EVAL_BODY_INCLUDE; 
	} }


					Simple tags can have Classic parents::
					-------------------------------------
Using the getParent() method, a Classic tag can access Classic tag parents, and a Simple tag can access either a Classic or Simple parent

Actually, Classic tags can't have Simple parents... getParent() from the classicTags can return the Tag... But we wnated the Type of JSPTag we cannot convert.. JSPTag tag =(JSPTag)tag

**Note:: Only from the ClassicTagHandlers we will have problem to call the getParent().. it shouldn't be nested or Parent should be only of Type ClassTag only

<mine:ClassicParent name=”ClassicParentTag”>
<mine:SimpleInner />
</mine:ClassicParent>

In the SimpleInner tag handler

public void doTag() throws JspException, IOException {
MyClassicParent parent = (MyClassicParent) getParent();
getJspContext().getOut().print(“Parent attribute is: “ + parent.getName());
}							

******Once you have a parent, you can call methods on it like any other Java object, so you can get attributes of the parent tag

In the ClassicParent tag handler

public class MyClassicParent extends TagSupport {
	private String name;
	public void setName(String name) {
	this.name=name;
	}
	public String getName() {
	return name;
	}
public int doStartTag() throws JspException {
return EVAL_BODY_INCLUDE; } }


Since there’s no automatic mechanism for the parent to find out about its child tags, you simply have to use the same design approach to get info to
the parent from the child as you do to get info from the parent to the child. You get a reference to the parent tag, and call methods. Only instead of getters, this time you’ll call some kind of set or add method.


In the child tag: MenuItem
--------------------------

public class MenuItem extends TagSupport {
	private String itemValue;
	public void setItemValue(String value) {
	itemValue=value;
  }
	public int doStartTag() throws JspException {
	return EVAL_BODY_INCLUDE;
   }
	public int doEndTag() throws JspException {
	Menu parent = (Menu) getParent();
	parent.addMenuItem(itemValue);
	return EVAL_PAGE;
   }
}


public class Menu extends TagSupport {
	private ArrayList items;
	public void addMenuItem(String item) {
	items.add(item);
    }
	public int doStartTag() throws JspException {  Don’t forget to reset the ArrayList in doStartTag(), since the tag handler might be reused by the 							Container
	items = new ArrayList();
	return EVAL_BODY_INCLUDE;			If you do not return EVAL_BODY_INCLUDE, the child tag’s will never be processed
}

addMenuItem is NOT an attribute setter method! This method exists ONLY so that a child tag can tell the parent tag about the child’s attribute value. (It’s called in between doStartTag() and doEndTag()).)


How will you prepare the dynamic menus using the JSP?

Lets say there are the dynamic values to be printed in the Navigation bar..That dynamic values comes from MenuItem tag. If you have collection you iterate 
over them...

<mine:Menu >
<mine:MenuItem itemValue=”Dogs” />		
<mine:MenuItem itemValue=”Cats” />
<mine:MenuItem itemValue=”Horses” />
</mine:Menu>

				Getting an arbitrary ancestor

There is another mechanism you can use if you want to, say, skip some nesting levels and go straight to a grandparent or something even further up the tag nesting hierarchy. The method is in both TagSupport and SimpleTagSupport (although they have slightly different behavior), and it’s called findAncestorWithClass().

Getting an immediate parent using getParent()
OuterTag parent = (OuterTag) getParent();

Getting an arbitrary ancestor using findAncestorWithClass()
WayOuterTag ancestor = (WayOuterTag) findAncestorWithClass(this, WayOuterTag.class);
							starting tag	the class of the tag you want


The Container walks the tag nesting hierarchy until it finds a tag that’s an instance of this class. It returns the first one, so there’s no way to say “skip the first tag you see that’s an instance of WayOuterTag.class and give me the second instance instead...” So if you really know for a fact that you wanted the second instance of a tag ancestor of that type, you’ll just have to get the return value of findAncestorWithClass(), and then call getParent() or findAncestorWithClass() on it.

You will not be tested on any details of using findAncestorWithClass().All you need to know for the exam is that it exists


						Using the PageContext API for tag handlers

This page is just a review from what you saw in the Script-free JSPs chapter, but it comes up again here because it’s crucial for a tag handler. A tag handler class, remember, is not a servlet or a JSP, so it doesn’t have automatic access to a bunch of implicit objects. But it does get a reference to a PageContext, and with it, it can get to all kinds of things it might need

Remember that while Simple tags get a reference to a JspContext and Classic tags get a reference to a PageContext,the Simple tag’s JspContext is usually
a PageContext instance. So if your Simple tag handler needs access to PageContext-specific methods or fields, you’ll have to cast it from a JspContext to
the PageContext it really is on the heap.


JspContext
   |
getAttribute(String name)
getAttribute(String name, int scope)
getAttributeNamesInScope(int scope)
findAttribute(String name)

  |
  |
APPLICATION_SCOPE
PAGE_SCOPE
REQUEST_SCOPE
SESSION_SCOPE	

getRequest()
getServletConfi g()
getServletContext()
getSession()


The one-arg getAttribute(String) is for page scope ONLY!
--------------------------------------------------------
There are TWO overloaded getAttribute() methods you can call on pageContext: a one-arg that takes a String, and a two-arg that takes a String and an int. The one-arg version works just like all the others—it’s for attributes bound TO the pageContext object. But the two-arg version can be used to get
an attribute from ANY of the four scopes


findAttribute() looks in EACH scope starting with PAGE_SCOPE.
------------------------------------------------------------
You can expect to be tested on this!! The difference between getAttribute(String) and findAttribute(String) can be dramatic—the getAttribute(String) method looks ONLY in page scope, while the findAttribute(STRING) will search all four scopes to fi nd a matching attribute, in the order of page, request, session, and application. It returns the first one it fi nds that matches the findAttribute(String) argument


Which directives and/or standard actions are applicable ONLY within tag files? (Choose all that apply.)

A. tag
B. page			-Option B is invalid because the page directive is never allowed in a tag file (pg 1-179).
C. jsp:body 		-Option C is invalid because the jsp:body action can appear in EITHER a tag file or JSP
D. jsp:doBody
E. jsp:invoke
F. taglib 		Option F is invalid because the taglib directive can appear in EITHER a tag file or JSP.


Which Simple tag mechanism will tell a JSP page to stop processing?

A)Throw a SkipPageException from the doTag method..

Which must be true if you want to use dynamic attributes for a Simple tag handler? (Choose all that apply)

A. Your Simple tag must NOT declare any static tag attributes.
**B. Your Simple tag must use the <dynamic-attributes> element in the TLD.
**C. Your Simple tag handler must implement the DynamicAttributes interface.
D. Your Simple tag should extend the DynamicSimpleTagSupport class, which provides default support for dynamic attributes
E. Your Simple tag CANNOT be used with the jsp:attribute standard action, because this action works only with static attributes


Which is true about tag files?A tag file must have the file extension of .tag or .tagx

A TLD file must be used to map the symbolic tag name to the actual tag file. This is invalid because tag files may be discovered by the container in several well-known locations. This container feature is optional

2. <my:tag1>
3. <%-- JSP content --%>
4. </my:tag1>

The tag handler for my:tag1 is Tag1Handler and extends TagSupport. What happens when the instance of Tag1Handler calls the getParent method? (Choose all that apply.)  The null value is returned.


Given a tag, simpleTag, whose handler is implemented using the Simple tag model and a tag, complexTag, whose handler is implemented using the Classic tag model. Both tags are declared to be non-empty and non-tag dependent in the TLD. Which JSP code snippets are valid uses of these tag? (Choose all that apply


A. <my:simpleTag>
<my:complexTag />		-Option A is correct; a Simple tag may include a Complex tag in the body as long as that tag contains no scripting code.
</my:simpleTag>

B. <my:simpleTag>
<%= displayText %>		-Option B is invalid because simple tags cannot have a body that includes a JSP expression tag
</my:simpleTag>

C. <my:simpleTag>
<%@ include file=”/WEB-INF/web/common/headerMenu.html” %>
</my:simpleTag>

-Option C is correct because the include directive is processed before the body of the simpleTag is converted into a JspFragment; however, the included content must also be non-scripting (which is why this example includes an HTML segment).

D. <my:simpleTag>
<my:complexTag>
<% i++; %> 		-Option D is not invalid because of the complexTag usage (as in Option A), but because the complexTag body has scripting code in it
</my:complexTag> 
</my:simpleTag>



Which are true about the Tag File model?

A. Each tag file must have a corresponding entry in a TLD file.
B. All directives allowed in JSP pages are allowed in Tag Files
C. All directives allowed in Tag Files are allowed in JSP pages
*D. The <jsp:doBody> standard action can only be used in Tag Files
*E. The allowable file extensions for Tag Files are .tag and .tagx.
*F. For each attribute declared and specified in a Tag File, the container creates a page-scoped attribute with the same name


-Option A is invalid because tag files need only to be placed in the appropriate location in order to be used.
-Option B is invalid because the page directive is not available in Tag File
-Option C is invalid because the tag, attribute, and variable directives are not available in JSP pages


Which are valid in tag files?

*A. <jsp:doBody />
*B. <jsp:invoke fragment=”frag” />
C. <%@ page import=”java.util.Date” %> -Option C is invalid because the page directive is not valid in tag files.
D. <%@ variable name-given=”date” variable-class=”java.util.Date” %>
E. <%@ attribute name=”name” value=”blank” type=”java.lang.String” %> -Option E is invalid because there is no value attribute defined for the attribute directive







					You can walk up, but you can’t walk down...

There’s a getParent() method, but there’s no getChild(). Yet the scenario we showed earlier was for an outer <my:Menu> tag that needed access to its nested <my:MenuItem> tags. What can we do? How can the parent tag get information about the child tags, when a child can get a reference to the parent, but the parent can’t ask for a reference to the child?


					Getting info from child to parent

We have two main ways in which tags can cooperate with one another:
1) The child tag needs info (like an attribute value) from its parent tag.
2) The parent tag needs info from each of its child tags

We’ve already seen how the first scenario works—the child tag gets a reference to its parent using getParent(), then calls getter methods on the parent. But what happens when the parent needs info from the child? We have to do the same thing. In other words, if the parent needs info from the child, it’s the child’s job to give it to the parent


						Deploying your web app
						------------------------

But where does everything go? So many directories, so many rules. What do you name your directories? What does the client think they’re named? What does the
client actually request, and how does the Container know where to look? How do you make certain that you don’t accidentally leave out a directory when you move the whole web app to a different machine? What happens if the client requests a directory instead of a specifi c file? How do you configure the DD for error pages, welcome files, and MIME types? It’s not as bad as it sounds...



Where will the CONTAINER look for things in the web app?
-------------------------------------------------------
Where will the Container look when the client requests an HTML page? A JSP page? A servlet? Something that doesn’t exist as an actual file (like, BeerTest.do)? Where will the Container look for tag handler classes? Where will the Container look for TLDs? Tag Files? JAR files? The Deployment Descriptor? Other classes my servlets depend on? Where does the Container look for “welcome” files ?


How does the CLIENT request things in the web app?
--------------------------------------------------
What does the client type into the browser to access an HTML page? A JSP page? A servlet? Something that doesn’t actually exist as a file? In which places can the client make a direct request, and in which places is the client restricted from direct access to a resource? What happens if the client types in a path to only a directory, not a specific file?


What goes where in a web app

In several chapters of this book, we’ve looked at the locations in which the various files must be placed. In the chapter on custom tags, for example, you saw that Tag Files must be deployed in /WEB-INF/tags or a subdirectory, or in a JAR file under /META-INF/tags or a subdirectory. If you put a Tag File anywhere else, the Container will either ignore it or treat it as static content ready to be served.

The Servlet and JSP specs have a lot of picky rules about where things go, and you really do need to know most of them. Since we’ve already covered most of this in one way or another, we use these first few pages as a test of your memory and understanding. Don’t skip it! Treat these next few pages as practice exam questions!
							Name the directories
							---------------------

To deploy a web app successfully, you MUST follow this structure. WEB-INF must be immediately under the application context (“MyTestApp” in this example). The “classes” directory must be immediately inside “WEB-INF”. The package structure for the classes must be immediately inside “classes”. The “lib” directory must be immediately inside “WEB-INF”, and the JAR fi le must be immediately inside “lib”. The “META-INF” directory must be immediately inside the JAR, and TLD files in a JAR must be somewhere under “META-INF” (they can be in any subdirectory, and “TLDs” is not required as a directory name). TLDs that are NOT in a JAR must be somewhere under “WEB-INF”. Tag Files (fi les with a .tag or .tagx extension) must be somewhere under “WEB-INF/tags” (unless they’re deployed in a JAR, in which case they must be somewhere under “META-INF/tags”).


The directory structure of a web app is intense. And everything has to be in exactly the right place. Moving a web app can hurt.
But there’s a solution, called a WAR file, which stands for Web ARchive. And if that sounds suspiciously like a JAR file (Java ARchive), that’s because a WAR is a JAR. A JAR with a .war extension instead of .jar.

A WAR file is simply a snapshot of your web app structure, in a nice portable, compressed form (it’s really just a JAR file). You jar up your entire web app structure (minus the web app context directory—the one that’s above WEB-INF), and give it a .war extension. But that does leave one problem—if you don’t include the specific web app directory (BeerApp, for example), how does the Container know the name/context of this web app

That depends on your Container. In Tomcat, the name of the WAR file becomes the web app name! Imagine you deploy BeerApp as a normal directory structure under tomcat/webapps/BeerApp. To deploy it as a WAR file, you jar up everything in the BeerApp directory (but not the BeerApp directory itself), then name the resulting JAR file BeerApp.war. Then you drop the BeerApp.war file into the tomcat/webapps directory. That’s it. Tomcat unpacks the WAR file, and creates the web app context directory using the name of the WAR file. But again, your Container may handle WAR deployment and naming differently. What matters to us here is what’s required by the spec, and the answer is—it makes almost no difference whether the app is deployed in or out of a WAR! In other words, you still need WEB-INF, web.xml, etc. Everything on the previous pages applies.

Almost everything. There is one thing you can do when you use a WAR file that you can’t do when you deploy without one—declare library dependencies


In a WAR file, you can declare library dependencies in the META-INF/MANIFEST.MF file, which gives you a deploy-time check for whether the Container can find the packages and classes your app depends on.That means you don’t have to wait until a resource is requested before the whole thing blows up because the Container doesn’t have a particular class in its classpath that the requested resource needs...

You will probably never put anything into the META-INF directory yourself, so you’ll probably never care whether your app is deployed as a WAR unless you do need to specify library dependencies in the MANIFEST.MF file.

						Making static content and JSPs directly accessible

When you deploy static HTML and JSPs, you can choose whether to make them directly accessible from outside the web app. By directly accessible, we mean that a client can enter the path to the resource into his browser, and the server will return the resource. But you can prevent direct access by putting files under WEB-INF or, if you’re deploying as a WAR file, under META-INF.

Valid request
http://www.wickedlysmart.com/MyTestApp/register/signUp.jsp --------> This is a directly accessible path in the web app

Invalid request (produces “404 Not Found” error)
http://www.wickedlysmart.com/MyTestApp/WEB-INF/process.jsp ---------->No! Nothing under WEB-INF can be directly accessed


If the server gets a client request for anything under WEB-INF or META-INF, the Container MUST respond with a 404 NOT FOUND error!


If you can’t serve content from WEB-INF or META-INF, what’s the point of putting pages there??!!

Think about that. You have Java classes and class members with package-level (default) access, right? These are classes and members not available to the “public”, but meant for internal use by other classes and members that are publicly exposed. It’s the same way for these non-accessible static content and JSPs. By putting them under WEB-INF (or, with a WAR file, META-INF), you’re protecting them from any direct access, while still allowing other parts of the web app to use them.

You might, for example, want to forward to or include a file while making sure that no client can directly request it. Chances are, if you want to protect a resource from direct access, you’ll use WEB-INF and not META-INF, but for the exam, you have to know that the rules apply to both


What about a META-INF directory inside a JAR file inside WEB-INF/lib? Does that have the same protection as META-INF inside the WAR file?

Well... yes. But the fact that the content is in META-INF is not the point. In this case, you’re talking about a JAR file inside the lib directory inside WEB-INF. And anything in WEB-INF is protected from direct access! So, it doesn’t matter where under WEB-INF the content is, it’s still protected. When we say that META-INF is protected, we’re really talking about META-INF inside a WAR file, because the META-INF inside WEB-INF/lib JAR files is always protected anyway by virtue of being under WEB-INF.


On an earlier page you mentioned putting library dependencies in the META-INF/MANIFEST.MF file. Are you required to do that? Isn’t everything in the WEB-INF/lib jar files and the WEB-INF/classes directory automatically on the classpath for this application?

Yes, classes you deploy in/with the web app, by using the WEB-INF/classes directory or a JAR in WEB-INF/lib, are available and you don’t have to do or say
anything. They just work. But... you might have a Container with optional packages on its classpath, and maybe you’re depending on some of those packages. Or maybe you’re depending on a particular version of a library! The MANIFEST.MF file gives you a place to tell the Container about the optional libraries you must have access to. If the Container can’t provide them, it won’t let you successfully deploy the application. Which is a lot better than if you deploy and then find out later, at request time, when you get some horrible (or worse—subtle) runtime error


How does the Container access the content inside JAR files in WEB-INF/lib?

The Container automatically puts the JAR file into its classpath, so classes for servlets, listeners, beans, etc. are available exactly as they are if you put the classes (in their correct package directory structure, of course) within the WEB-INF/classes directory. In other words, it doesn’t matter whether the classes are in or out of a JAR as long as they’re in the right locations. Keep in mind, though, that the Container will always look for classes in the WEB-INF/classes directory before it looks inside JAR files in WEB-INF/lib.

OK, that explains class files, but what about other kinds of files? What if I need to access a text file that’s deployed in a JAR in WEB-INF/lib?

This is different. If your web app code needs direct access to a resource (text file, JPEG, etc.) that’s inside a JAR, you need to use the getResource() or getResourceAs Stream() methods of the classloader—this is just plain old J2SE, not specific to servlets

Now, you might recognize those two methods (getResource() and getResourceAsStream()), because they exist also in the ServletContext API. The difference is, the methods inside ServletContext work only for resources within the web app that are not deployed within a JAR file.

For the exam, you need to know that you can use the standard J2SE mechanism for getting resources from JAR files, but you do not need to know any details

	
						Servlet mappings can be “fake”

The URL pattern you put into a servlet mapping can be completely made-up. Imaginary. Fake. Just a logical name you want to give clients. Clients who have no business knowing anything about the real physical structure of your web app

With servlet mappings, you have two structures to organize: the real physical directory and file structure in which your web app resources live, and the virtual/logical structure

The virtual/logical structure exists simply because you SAY it exists!


The THREE types of <url-pattern> elements

1) EXACT match: <url-pattern>/Beer/SelectBeer.do</url-pattern>

2)DIRECTORY match:<url-pattern>/Beer/*</url-pattern>

3)EXTENSION match:<url-pattern>*.do</url-pattern>


Key rules about servlet mappings:
--------------------------------

1) The Container looks for matches in the order shown on the opposite page. In other words, it looks first for an exact match. If it can’t find an exact match, it looks for a directory match. If it can’t find a directory match, it looks for an extension match

2) If a request matches more than one directory <url-pattern>, the Container chooses the longest mapping. In other words, a request for /foo/bar/myStuff.do will map to the <url-pattern> /foo/bar/* even though it also matches the <url-pattern> /foo/*. The most specific match always wins.

Lets say we have three Url Patterns Configured:
----------------------------------------------

<url-pattern>*.do</url-pattern>   DeployTestOne

<url-pattern>/fooStuff/bar</url-pattern> DeployTestTwo

<url-pattern>/fooStuff/*</url-pattern>  DeployTestThree
-------------------------------------------------------------------------------------------------------------------
http://localhost:8080/MapTest/blue.do   Container choice: DeployTestOne  (matched the *.do extension pattern)

http://localhost:8080/MapTest/fooStuff/bar Container choice: DeployTestTwo (exact match with /fooStuff/bar pattern)

http://localhost:8080/MapTest/fooStuff/bar/blue.do Container choice: DeployTestThree (matched the /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fooStuff/blue.do Container choice: DeployTestThree (matched /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fred/blue.do  Container choice: DeployTestOne (matched the *.do extension pattern)

http://localhost:8080/MapTest/fooStuff   Container choice: DeployTestThree  (matched the /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fooStuff/bar/foo.fo Container choice: DeployTestThree (matched the /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fred/blue.fo Container choice: 404 NOT FOUND (doesn’t match ANYTHING)
-------------------------------------------------------------------------------------------------------------------

You already know that if you type in the name of a web site and you don’t specify a specific file, you (usually) still get something back. Entering http://www.oreilly.com into your browser takes you to the O’Reilly web site, and even though you didn’t name a specific resource (like “home.html”, for example), you still get a default page.

You can configure your server to define a default page for the entire site, but we’re concerned here with default (also known as “welcome”) pages for individual web apps. You configure welcome pages in the DD, and that DD determines what the Container chooses when the client enters a partial URL—a
URL that includes a directory, for example, but not a specific resource in the directory..

In other words, what happens if the client request comes in for:

http://www.wickedlysmart.com/foo/bar  and “bar” is simply a directory, and you don’t have a specific servlet mapped to this URL pattern. What will the client see?

<web-app ...>
< welcome-file-list>
<welcome-file>index.html</welcome-file>
<welcome-file>default.jsp</welcome-file>
</welcome-file-list>
</web-app>


Imagine you have a web app where several different directories have their own default HTML page, named “index.html”. But some directories use a “default.jsp” instead. It would be a huge pain if you had to specify a specific default page or JSP for each directory that needs one. Instead, you specify a list, in order, of the pages you want the Container to look for in whatever directory the partial request is for. In other words, no matter
which directory is requested, the Container always looks through the same list—the one and only <welcome-file-list>. 

The Container will pick the first match it finds, starting with the first welcome file listed in the <welcome-file-list>.

The files in the <welcome-file> element do NOT start with a slash!

Don’t be confused. The way in which the Container matches and chooses welcome files is not the same as the way in which it matches URL patterns. If you put the slash in front of the file name, you’ll be violating the spec, and bad things will happen...

					Configuring error pages in the DD

Sure, you want to be friendly when the user doesn’t know the exact resource to ask for when they get to your site or web app, so you specify default/welcome files. But you also want to be friendly when things go wrong. We already looked at this in the chapter on Using Custom Tags, so this is just a review

Declaring a catch-all error page:
--------------------------------

This applies to everything in your web app—not just JSPs.

<error-page>
<exception-type>java.lang.Throwable</exception-type>
<location>/errorPage.jsp</location>
</error-page>

(FYI: you can override this in individual JSPs by adding a page directive with an errorPage attribute.)

Declaring an error page based on an HTTP status code:

This configures an error page that’s called only when the status code for the response is “404” (file not found)

<error-page>
<error-code>404</error-code>
<location>/notFoundError.jsp</location>
</error-page>

You can’t use <error-code> and <exception-type> together!

You can configure an error page based on the HTTP status code OR based on the exception type thrown, but you CANNOT have both in the same <error-page> tag.


What are you allowed to declare as an exception type in <exception-type>?

Anything that’s a Throwable, so that includes java.lang.Error, runtime exceptions, and any checked exception (as long as the checked exception class is on the Container’s classpath, of course).

Speaking of error handling, can you programmatically generate error codes yourself?

Yes, you can. You can invoke the sendError() method on the HttpServletResponse, and it’ll tell the Container to generate that error just as if the Container generated the error on its own. And if you’ve configured an error page to be sent to the client based on that error code, that’s what the client will get. And by the way, “error” codes are also known as “status” codes, so if you see either one, they mean the same thing—HTTP codes for errors.

How about an example of generating your own error code?

response.sendError(HttpServletResponse.SC_FORBIDDEN);  which is the same as: response.sendError(403);

If you look in the HttpServletResponse interface, you’ll see a bunch of constants defined for the common HTTP error/status codes. Keep in mind that for the exam, you don’t need to memorize the status codes! It’s enough to simply know that you can generate error codes, that the method is response.sendError(), and that in terms of the error pages you’ve defined in the DD, or any other error-handling you do in your JSPs, there’s no difference between Container-generated and programmer-generated HTTP errors. A 403 is a 403 regardless of WHO sends the error. Oh yeah, there’s also an overloaded two-argument
version of sendError() that takes an int and a String message


						Configuring servlet initialization in the DD

You already know that servlets, by default, are initialized at first request. That means the first client suffers the pain of class loading, instantiation, and initialization (setting a ServletContext, invoking listeners, etc.), before the Container can do what it normally does—allocate a thread and invoke the servlet’s service() method

If you want servlets to be loaded at deploy time (or at server restart time) rather than on first request, use the <load-on-startup> element in the DD. Any non-negative value for <load-on-startup> tells the Container to initialize the servlet when the app is deployed (or any time the server restarts).

If you have multiple servlets that you want preloaded, and you want to control the order in which they’re initialized, the value of <load-on-startup> determines the order! In other words, any non-negative value means load early, but the order in which servlets are loaded is based on the value of the different <load-on-startup> elements

Values greater than one do not affect the number of servlet instances!

The value you use: <load-on-startup>4</load-on-startup> does NOT mean “load four instances of the servlet”. It means that this servlet should be loaded only AFTER servlets with a <load-on-startup> number less than four are loaded. And what if there’s more than one servlet with a <load-on-startup> of 4?
The Container loads servlets with the same value in the order in which the servlets are declared in the DD.


Wouldn’t you ALWAYS want to do this? Shouldn’t everyone just use <load-on-startup>1</load-on-startup> by default?

To answer that question, you ask yourself, “How many servlets do I have in my app, and how likely is it that they’ll all be used?” And you’ll also
need to ask, “How long does it take each servlet to load?” Some servlets are rarely used, so you might want to conserve resources by not loading the rarely-used servlets in advance. But some servlets take so painfully long to initialize (like the Struts ActionServlet), that you don’t want even a single
client to experience that much latency. So, only you can decide, and you’ll probably decide on a servlet-by-servlet basis, evaluating both the pain level
and likelihood of use for each servlet


					Making an XML-compliant JSP: a JSP Document


The exam doesn’t require you to be an XML expert, but you do have to know two things: the syntax for the key DD elements, and the basics of making what’s known as a JSP Document. (“As opposed to what? If a normal JSP isn’t a document, what is it?” That’s what you’re asking, right? Think of it this way—a normal JSP is a page, unless it’s written with the XML alternatives to normal JSP syntax, in which case it becomes a document.

Normal JSP page syntax								JSP document syntax
-------------------------------------------------------------------------------------------------------------------------------
<%@ page import=”java.util.*” %>						<jsp:directive.page import=”java.util.*”/>

<%! int y = 3; %>								<jsp:declaration>int y = 3;</jsp:declaration>

<% list.add(“Fred”); %>								<jsp:scriptlet>list.add(“Fred”);</jsp:scriptlet>

There is no spoon.								<jsp:text>There is no spoon.</jsp:text>

<%= it.next() %>								<jsp:expression>it.next()</jsp:expression>


We aren’t going to say any more about it because writing XML-compliant JSP documents is probably not something you’ll do. The XML syntax is used mainly by tools, and the table above just shows you how the tool would transform your normal JSP syntax into an XML document. There IS more you have to know if you write this by hand—the whole document, for example, is usually enclosed in a <jsp:root> tag (which includes some other stuff), and the taglib directives go inside the <jsp:root> opening tag, rather than as a <jsp:directive>. But everything that might be on the exam is in the table above. So relax.



							Memorizing the EJB-related DD tags
							----------------------------------

This exam is about web components, not business components (although in the Patterns chapter, you’ll see a few things about business components). But if you’re deploying a J2EE app, complete with Enterprise JavaBeans (EJBs) in the business tier, some of your web components will probably need to lookup and access the enterprise beans. If you’re deploying an app in a full J2EE-compliant Container(one that has an EJB Container as well), you can define references to EJBs in the DD. You don’t have to know anything about EJBs for this exam, other than what you declare in the DD, so we won’t waste your time explaining it here

<ejb-local-ref>
<ejb-ref-name>ejb/Customer</ejb-ref-name>		The JNDI lookup name you’ll use in code
<ejb-ref-type>Entity</ejb-ref-type>
<local-home>com.wickedlysmart.CustomerHome</local-home>  These must be fully-qualified names of the bean’s exposed interfaces
<local>com.wickedlysmart.Customer</local>
</ejb-local-ref>

A LOCAL bean means the client (in this case, a servlet) and the bean must be running in the same JVM

A REMOTE bean means the client (in this case, a servlet) and the bean can be running in different JVMs (possibly on different physical machines as well).

Reference to a remote bean JVM
<ejb-ref>
<ejb-ref-name>ejb/LocalCustomer</ejb-ref-name>
<ejb-ref-type>Entity</ejb-ref-type>
<home>com.wickedlysmart.CustomerHome</home>				local-home home  local remote
<remote>com.wickedlysmart.Customer</remote>
</ejb-ref>

The <ejb-ref-name> that lists the logical lookup name you’ll use in code to perform a JNDI lookup on an enterprise bean’s home interface 

The <ejb-ref-type> describes whether this is an Entity or Session bean. Those two elements, the lookup name and the bean type, don’t depend on whether the bean is local (running in the same JVM as the web component), or remote(potentially running in a different JVM).

But... look at the other elements starting with the outer tags: <ejb-local-ref> and <ejb-ref>. You might be tempted to think that it’s:
<ejb-local-ref>
<ejb-remote-ref>

But NO! For remote beans, it’s just:
<ejb-ref>          Right! There’s no “remote” in the tag.

In other words, the local reference says it’s local, but the remote reference does NOT include the word “remote” in its tag element name. Why? Because at the time <ejb-ref> was first defined, there was no such thing as “local” EJBs. Since ALL enterprise beans were “remote”, there was no need to differentiate between local and remote, so no need to put “remote” in the name of the tag..This also explains the OTHER tag naming inconsistency—the name of the tag for the bean’s home interface. A local bean uses:

<local-home> but a remote bean does NOT use: <remote-home> For remote beans, it’s just: <home>

					Memorizing the JNDI <env-entry> DD tag
					--------------------------------------

Think of an environment entry as being something like a deploy-time constant that your app can use, much like servlet and context init parameters. In other words, a way for the deployer to pass values into the servlet (or in this case, an EJB as well if this is deployed as part of an enterprise application in a fully J2EE-compliant server).

At deploy time, the Container reads the DD and makes a JNDI entry (again, assuming this is a fully J2EE-compliant app, and not just a server with only a web Container), using the name and value you supply in this DD tag.At runtime, a component in the application can look up the value in JNDI, using the name listed in the DD. You probably won’t care about <env-entry> unless you’re also developing with EJBs, so the only reason you need to memorize this is for the exam.

<env-entry>
<env-entry-name>rates/discountRate</env-entry-name>
<env-entry-type>java.lang.Integer</env-entry-type> This can be any type that takes a single String as a constructor parameter (or a single Character if
							it’s java.lang.Character).
<env-entry-value>10</env-entry-value> This will be passed in as a String (or a single Character if the <env-entry-type> is java.lang.Character
</env-entry>

The <env-entry-type> must NOT be a primitive!


When you see an <env-entry-value> that’s an integer value (like the example above), you might think that the <env-entry-type> can be a primitive. But that would be... wrong. You also might be tempted to think that you can have only Strings and wrappers, but that’s wrong too—you can use any type that takes a single String in its constructor (or a single Character for a Character type

					Memorizing the < mime-mapping> DD tag


You can configure a mapping between an extension and a mime type in the DD. This will probably be the easiest tag to remember, because it just makes
sense—you map between an extension and a mime-type, and guess what? In a rare moment of simplicity and clarity, they named the tag sub-elements
“extension” and “mime-type”. That means you have to remember only one thing—that the tag elements are named for exactly what they are

<mime-mapping>
<extension>mpg</extension>			Do NOT include the dot “.”!
<mime-type>video/mpeg</mime-type>
</mime-mapping>


It’s just the characters that make up the extension, not the “.” that separates the fi le name from theextension.


HTML and JSPs (That you want to be directly accessible.)
------------------------------------------------------
Client-accessible HTML and JSPs can be anywhere under the root of the web app or any of its subdirectories, EXCEPT they cannot be under WEB-INF (including subdirectories). In a WAR file, they can’t be under META-INF (including subdirectories

HTML and JSPs (That you want to “hide” from direct client access.)
------------------------------------------------------------------
Pages under WEB-INF (or META-INF in a WAR file) cannot be directly accessed by clients

TLDs(.tld)
----------
If NOT inside a JAR, TLD files must be somewhere under WEB-INF or a subdirectory of WEB-INF. If deployed in a JAR, TLD files must be somewhere under META-INF, or a subdirectory of META-INF.

Tag Files (.tag or .tagx)
--------------------------
If NOT deployed inside a JAR, Tag Files must be inside WEB-INF/tags, or a subdirectory of WEB-INF/tags. If deployed in a JAR, Tag Files must be in META-INF/tags, or a subdirectory of META-INF/tags. Note: Tag Files deployed in a JAR must have a TLD in the JAR.

Servlet classes
---------------

Servlet classes must be in a directory structure matching the package structure, placed directory under WEB-INF/classes (for example, class com.example.Ring would be inside WEB-INF/classes/com/example), or in the appropriate package directories within a JAR inside WEB-INF/lib).

Tag Handler classes:Actually ALL classes used by the web-app (unless they’re part of the class libraries on the classpath) must follow the same rules as ------------------
servlet classes—inside WEB-INF/classes, in a directory structure matching the package (or in the appropriate package directories within a JAR inside WEB-INF/lib).

JAR files:   JAR files must be inside the WEB-INF/lib directory.
----------










































































Throughout this book we’re using Tomcat as both the web Server and the web Container. In the real world, you probably use a more robust Web Server (like Apache) configured with a Web Container (like Tomcat).

Microservices Architecture:
--------------------------
LoadBalancers handling the Multiple requests to different instances..

Remote calls will always has to be the HTTP Calls.. Our entire business is split into the multiple modules or services as many as possible & deployed.

So we get the facility to rescale the services into number of instances..In overall the we get the good Application perfomance

Loadbalancers will now care of forwarding the request's based on the requesttype to a specific instance/service where the service is located/deployed..

Different HandlerMapping are given to Map differently in the Spring Applications !..

SpringBoot Profiles,Spring Dev Tools,Spring Boot CLI,Spring Boot Actuator Concepts,Spring Boot AutoConfiguration


=======
Today users expect the websites that are dynamic interactive custom taiolred..

To build the powerful Web App's --> Needs the java servlets & jsps

The web consists of gazillions of clients (using browsers like Mozilla or Safari) and servers (using web server apps like Apache) connected through wires and wireless networks
				HttpRequest
	Clients----------------------------------------------->Server	Webserver APP Apache(on Machine)
				HttpResponse
Clients asks for resource using request-url from webbrowser		Server gets the Request finds the resource(HTMLPage/PDF File/Soundfile/Picture) and 									send 
Display the content sent from the server

Client asks for resource and server sends back unless if it cannot find..at least it’s not where the server is expecting it to be.404 Response from server.

Request::The client’s request contains the name and address (the URL), of the resource the client is looking for...

Response::The server’s response contains the actual document that the client requested (or an error code if the request could not be processed).


Role of Client:The browser is the piece of software (like Netscape or Mozilla) that knows how to communicate with the server. The browser’s other big job
is interpreting the HTML code and rendering the web page for the user.

Role of Server:Server gets the Request finds the resource(HTMLPage/PDF File/Soundfile/Picture) and send

HTTP::
-----

Most of the conversations held on the web between clients and servers are held using the HTTP protocol, which allows for simple request and response
conversations. The client sends an HTTP request, and the server answers with an HTTP response.When a web server sends an HTML page to the client, it sends it using HTTP.


Network Protocols::
------------------

TCP:: Chunks ends up as complete file at destination while moving
IP:: It routes the chunks of the data from the one host to the another host
http: It has webspecific features but it depends on the TCP/IP to get the complete request and response from one place to another..
The structure of an HTTP conversation is a simple Request/ Response sequence; a browser requests, and a server responds.


Key elements of the requeststream::1)HTTP method (the action to be performed) 2)The page to access (a URL) 3)Form parameters (like arguments to a method)

Key elements of the responsestream:A status code (for whether the request was successful) Content-type (text, picture,HTML, etc.) The content (the actual
HTML, image, etc.)


HTML coming from the server is part of the HTTPResponse Object..HTTP adds header information to the top of whatever content is in the response
An HTML browser uses that header info to help process the HTML page. Think of the HTML content as data pasted inside an HTTP response.

-------------------
HTTP header info   |
  |		   |	
<html>		   |	
<head>		   |	
...		   |-----------> HttpResponse Object 
</head>		   |	
<body>		   |	
<img src=...>	   |-----------> when the browser gets to an image tag, it generates another HTTP request to go get the resource described.
</body>		   |		 make a second HTTP request to get the picture referenced in the <img> tag.
</html>		   | 	
-------------------

The ResponseObject of the secondrequest contains the image file...


What's in the HTTPRequest:: 

HTTP method name: The method name tells the server the kind of request that’s being made, and how the rest of the message will be formatted.

The HTTP protocol has several methods, but the ones you’ll use most often are GET and POST..

Example:: Link to new Page will be Get Request & Form Based submission will be POST Request..

Browser sends an HTTP GET to the server, asking the server to GET the page...Browser sends an HTTP POST to the server, giving the server what the user typed
into the form.


Diffrenece between the GET & POST Request?

GET is the simplest HTTP method, and its main job in life is to ask the server to get a resource and send it back. That resource might be an HTML page, a JPEG, a PDF, etc. Doesn’t matter. The point of GET is to get something back from the server.

POST is a more powerful request. It’s like a GET plus plus. With POST, you can request something and at the same time send form data to the server (later in this chapter we’ll see what the server might do with that data

Wait a minute... I could swear I’ve seen GET requests that did send some parameter data to the server?

I's true you can send the littile data along with the GETRequest?

1)The total amount of characters in a GET is really limited (depending on the server). If the user types, say, a long passage into a “search” input box, the GET might not work.2)The data you send with the GET is appended to the URL up in the browser bar, so whatever you send is exposed. Better not put a password or some other sensitive data as part of a GET..3)Because of number two above, the user can’t bookmark a form submission if you use POST instead of GET. Depending on your app, you may or may not want users to be able to bookmark the resulting request from a form submission.

***Formsubmission can be the GET or POST Request


--------------
21-01-2021:   |
--------------
HTTP Resource Request +  Resource Required Arguments{Need to be inside the HTTP Body if they are seceret..} Casual Arguments of resource goes with GET

Anatomy of Http Request:

GET /select/selectBeerTaste.jsp?	color=dark&taste=malty 						HTTP/1.1
  The path to resource on webserver	In a Get request parameters if there are any appended		Protocol version webbrowser is requesting
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.4) Gecko/20030624 Netscape/7.1
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/
plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive

Hey server... GET me the page on this host that’s at /select/selectBeerTaste.jsp and, oh yeah,here are the parameters for you:color = dark & taste = malty

Anatomy of Http Response:

POST /advisor/selectBeerTaste.do HTTP/1.1

Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.4) Gecko/20030624 Netscape/7.1
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
|
|	color=dark&taste=malty			---> Message Body/PayLoad
|

***text/html , text/xml , text/plain , application/xml , application/xhtml+xml , image/jpeg , image/gif , image/png


The parameters are down here in the body, so they aren’t limited the way they are if you use a GET and have to put them in the Request line

Hey server... please POST this to the resource at on the Host: /advisor/selectBeerTaste.do. Don’t forget to look inside the body for the important data I’m sending

****GET & POST Requests can go directly to the JSP pages also.. Depending on the type of HTTP method server has to handle diiferently


Anatomy of an HTTP response::
---------------------------

An HTTP response has both a header and a body. The header info tells the browser about the protocol being used, whether the request was successful, and
what kind of content is included in the body. The body contains the contents (for example, HTML/PDF/Image etc..) for the browser to display

HTTP/1.1 200 OK		The Protocol version webserver is using..Response Code .. Response Text 
Set-Cookie: JSESSIONID=0AAB6C8DE415E2E5F307CF334BFCA0C1; Path=/testEL
Content-Type: text/html
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close

<html>
...		The body holds the HTML or the other content that needed to be rendered...
</html


The Http Response can be a dynamic HTML/PDF/Image/ generated by the server side programs or the static content like the HTML,CSS,JavaScript

The main request & response headers:Content Type & Content Lenght and response status code..Http headers the Accept is important

The content-type response header’s value is known as a MIME type. The MIME type tells the browser what kind of data the browser is about to receive so that the browser will know how to render it.Notice that the MIME type value relates to the values listed in the HTTP request’s “Accept” header.

Internally if the request is forwarded to the JSP then the MIME type we need not to set explicitly..

A user is returning a login name and password.POST 			A user is requesting a new page via a hyperlink. GET

A chat room user is sending a written response. POST 			A user hits the ‘next’ button to see the next page.GET

A user hits the ‘log out’ button on a secure banking site. GET 		A user hits the ‘back’ button on the browser. GET

A user sends a name and address form to the server.POST   		A user makes a radio button selection.GET

----------------------------------------------------------------------------------
URL::Every resource on the web has its own unique address, in the URL format      | For every programming webcomponent or static component has the url's
----------------------------------------------------------------------------------

http://		www.wickedlysmart.com:	80		/beeradvice/select/			beer1.html
Protocol	Server:			Port:		Directory Path to the resource		Actual Resource
	
Protocol: Tells the server which communications protocol..

Server:The unique name of the physical server you’re looking for. This name maps to a unique IP address.You can specify an IP address here instead of a server name, but a server name is a lot easier to remember.

Port: This part of the URL is optional. A single server supports many ports. A server application is identified by a port..If you don’t specify a port in your URL, then port 80 is the default, and as luck would have it, that’s the default port for web servers.

Directory Path to the resource::The path to the location, on the Webserver/container(Apache/JBOSS) of the resource being requested. 

Resource:The name of the content being requested. This could be an HTML page, a servlet, an image, PDF, music, video, or anything else the server feels like serving.If this optional part of the URL is left out, most web servers will look for index.html by default

Optional QueryString: Remember, if this was a GET request, the extra info (parameters) would be appended to the end of this URL, starting with a question mark “?”, and with each parameter (name/value pair) separated by an ampersand “&”.


x/y/server.html		x/ 	 x/y/servlet.do	 x/y/jsp 	x/y/nameofpdffile   x/y/nameofimagefile
Extension Matching 	Directory Matching 

Url matching

TCP Port numbers:A TCP port is just a number it identifies a specific software program on the server hardware...

Your internet web (HTTP) server software runs on port 80.A Port represents a logical connection to a particular piece of software running on the server hardware.

http://www.wickedlysmart.com:80	  Connects to HttpServer
www.wickedlysmart.com:23	  Connects to TelentServer
www.wickedlysmart.com:21	   Connects to FTP server

Without port numbers, the server would have no way of knowing which application a client wanted to connect to. And since each application might have its own unique protocol, think of the trouble you’d have without these identifiers. What if your web browser, for example, landed at the POP3 mail server instead of the HTTP server? The mail server won’t know how to parse an HTTP request! And even if it did, the POP3 server doesn’t know anything about serving back an HTML page.

***If you’re writing services (server programs) to run on a company network, you should check with the sys-admins to find out which ports are already taken


For the Website: www.wickedlysmart.com   Assume it is having/hosting the two Web applications..

***For all the applications common we can have one index.html page.. For the every individual application also we can have the separate index.html pages..

For all the actions within each application also we can maintain the index.html

Action specific request's creations: /select/someservlet     /select/some.html  /select/some.jsp /select/pdffile  /select/imagefiles ...so..on

Webservers Love serving the static webpages:
-------------------------------------------

A static page just sits there in a directory. The server finds it and hands it back to the client as is.Every client sees the same thing.

Are we even maintaing the static PDF files imagefiles soundfiles xmlfiles or anything on directories and is the webserver is returing them 

Webserver's can't generate the Dynamic WebPages.
--------------------------------------------

I’m a web server application. I SERVE things. I don’t do computation on the things I serve. But... I know a real nice program(another application) on the same machine that CAN help you out...Webserver will take care of getting the request to the right helper app(applicationserver), then I’ll take that app’s response and send it back to the client. In fact, the client never needs to know that someone else did some of the work.

Two things webserver can't do alone:

If you need just-in-time pages (dynamically-created pages that don’t exist before the request) and the ability to write/save data on the server (which means writing to a file or database), you can’t rely on the web server alone.

The web server application serves only static pages, but a separate “helper” application that the web server can communicate with can build non-static, just-in-time pages.Just-in-time pages don’t exist before the request comes in. It’s like making an HTML page out of thin air.The request comes in, the helper app “writes” the HTML, and the web server gets it back to the client.

Saving data on the server:To process that form data,either to save it to a file or database or even just to use it to generate the response page, you need another app. When the web server sees a request for a helper app, the web server assumes that parameters are meant for that app. So the web server hands over the parameters, and gives the app a way to generate a response to the client.

The non-Java term for a web server helper app is “ CGI” program
--------------------------------------------------------------
The web server launches and runs the program. The web server app sends along any parameters from a GET or POST

The helper app constructs the brand new page (that has the current date inserted) and sends the HTML back to the server. As far as the web server is concerned, the HTML from the helper app is a static page

Disdvanatge of CGI:With Perl, the server has to launch a heavy-weight process for each and every request for that resource!

This is no different from Java... what do you callthe JVM? Is not every instance of the JVM a heavy-weight process..Ah, yes, but you see Servlets stay loaded and client requests for a Servlet resource are handled as separate threads of a single running Servlet. There’s no overhead of starting the JVM, loading the class, and all that...

Servlet can be a J2EE Client: A Servlet running in a J2EE web container can participate in security and transactions right along with enterprise beans

Webserver vs/Application server:
---------------------------------
Dynamic WebPage:: Sticking some dynamic content to the HTML after processing the request and generating the webpage is called Dynamicwebpage i.e JSP

Requests shouldn't go directly to resources(PDF/JSP) they should be placed inside the WEB-INF folder seprately

I know PDF files are generated randomly with some data after processing request. Image files are static content on the server.. 
Resuable static HTML CSS/Javascript content for static/dynamic webpage on the Website. Where to maintain the static HTML CSS & JS files and JSP files
Dynamic contents are JSP's not HTML/CSS/JavaScript/ImageFiles..

Application::Attach the reusable staticContent CSS/JavaScript/Imagefiles to the Dynamically generated WebPages in the WEB-INF folders..
Application:Attach the resuable staticContent CSS/JavaScript/Imagefiles to the static HTML Pages in the actionspecfic folders..

https://mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/


How your Web application looks in Eclipse is different from the look of directories structure when its deployed in the Container?

If you prepare manually you need to prepare the Project structure format according to container exceptations..If you use the eclipse then it automates the preparation of directories in the format that container is expecting...Eclipse with maven based projects we configure the war plugin that creates the war file and also automatically deploys the application in to the applicationserver

******All the urls should match to any of the dynamic Component or static component on the server...

For our server side programs servlet/JSP we need to configure the services(security,transcation,DI,JNDI,concurrency) which are provided by the Application servers..Server side programs like servlet/jsp/webservice/jsf components takes the web request and send the dynamic content and attach the model data to jsp
or attach the model data in the form of JSON/XML to other consumers of api.. Handling the security for the Servlets and JSP would be same as the handling security for the Rest API's/Webservices..

Moving from the http to https for servlet/jsp/webservices programs:

http://localhost:70/01FirstDynamicWebProject/?action=1&static=2	--->Request is for the Web Component (servlet/jsp/webservices) but it is not matching to any of the resource program.. Webserver simply ignores the request parameters and prints the index.html of the Application.

http://localhost:70/01FirstDynamicWebProject/?action=1&static=2 to https://localhost:70/01FirstDynamicWebProject/?action=1&static=2 then 
Exception::java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens

Servlets Demistyified:
-One DD per web application. -A DD can declare many servlets - A <servlet-name> ties the <servlet> element to the <servlet-mapping> element
- A <servlet-class> is the Java class. - A <url-pattern> is the name the client uses for the request.

Devloping the WebApplications manaully as per container requirement::

From the Project directory:
src
 |-->packagefolder
	|-->Servlets.java
WEB-INF
 |-->Web.xml	
 |-->classes(dir)
 |
	
From the project1 directory: %javac -classpath /yourpath/tomcat/common/lib/servlet-api.jar -d WEB-INF/classes src/Ch1Servlet.java

For now, every time you update either a servlet/jsp/webservice program or the deployment descriptor, shutdown Tomcat and restart it..

Stuffing properly formatted HTML tags into the println(), just so that you can insert variables and method calls, is just brutal.

Developing into the out.println() Remember, you can’t have a carriage return (a real one) inside a String literal. And while we’re talking about Strings... what about all your HTML that has double-quote marks in it?

Inserting the java methods or varaibles inside the JSP..Instead of building the dynamic HTML inside the java program


JSP is what happened when somebody introduced Java to HTML::
------------------------------------------------------------

Benefits of JSP:

1)Not all HTML page designers know Java::App developers know Java. Web page designers know HTML. With JSP, Java developers can do Java, and HTML developers can do web pages.

2)Formatting HTML into a String literal is REALLY ugly

Wait... there’s still something wrong here! Benefit number one says “Not all page designers know Java...” but the HTML page designer still has to write Java inside the JSP page!! JSP lets the Java programmer off the hook for writing HTML, but it doesn’t really help the HTML designer. It might be easier to write HTML in a JSP rather than in a println(), but the HTML developer still has to know Java.

****But with the new JSP spec, and by following best practices, the page designer should be putting very little (or no) real Java into a JSP. They do have to learn something... but it’s more like putting in labels that call real Java methods rather than embedding the actual Java code into the page itself

**JSP/ErrorPages/WelcomePages will be developed by the webdesigner..Web.xml/servelet/Listener's/Filters devloped by the Servlet or server side Devloper

Servlets don’t have a main() method. They’re under the control of another Java application called a Container.
--------------------------------------------------------------------------------------------------------------
Servlets need Help:: Some one has to create the new Thread for every new rquest, Some one has to instantiate the servlet,Somebody has to call the servlet’s doPost() or doGet() method.And, oh yes, those methods have crucial arguments—the HTTP request and HTTP response objects. Somebody has to get the request and the response to the servlet.Somebody has to manage the life, death, and resources of the servlet. That somebody is the web Container.

What does WebServer do? How it is calling the Application Server or WebContainer? Why WebServers and ApplicationSevers are put into the different nodes?

Roles of the WebContainer?

Communications support:The container provides an easy way for your servlets to talk to your web server. You don’t have to build a ServerSocket, listen on a port, create streams, etc. The Container knows the protocol between the web server and itself, so that your servlet doesn’t have to worry about an API between, say, the Apache web server and your own web application code. All you have to worry about is your own business logic that goes in your Servlet (like accepting an order from your online store).

Lifecycle Management::The Container controls the life and death of your servlets. It takes care of loading the classes, instantiating and initializing the servlets, invoking the servlet methods, and making servlet instances eligible for garbage collection. With the Container in control, you don’t have to worry as much about resource management.

Multithreading Support:: The Container automatically creates a new Java thread for every servlet request it receives. When the servlet’s done running the HTTP service method for that client’s request, the thread completes (i.e. dies). This doesn’t mean you’re off the hook for thread safety—you can still run into synchronization issues. But having the server create and manage threads for multiple requests still saves you a lot of work

Declarative Security With a Container, you get to use an XML deployment descriptor to configure (and modify) security without having to hard-code it into your servlet (or any other) class code. Think about that! You can manage and change your security without touching and recompiling your Java source files.

Now a days we got the all the Annotations.. But when you apply/change on the class it needs to be recompiled so the solution is Spring Dev Tools..Spring Boot Dev Tools:: Automatically compiling the changes and deploying it into the webcontainers without your intervention?

JSP Support: You already know how cool JSPs are. Well, who do you think takes care of translating that JSP code into real Java? Of course. The Container
COntainer takes care of the security networking threading...


The API In between the WebServer and Applicationserver is the least.. you dont bother about them...Just assume Webserver gave/handover the request to the Application container... It is the networking/socket based programming that is actually in between the Container and Webserver

Does Webserver is also preparing the Response Headers if the request is for the Static Resources like the Videos/Images/gifs?

Request to Response flow handled from the Container::

1)User clicks a link that has a URL to a servlet instead of a static page
2)The container “sees” that the request is for a servlet, so the container creates two objects: 1) HttpServletResponse 2) HttpServletRequest
3)The container finds the correct servlet based on the URL in the request, creates or allocates a thread for that request, and passes the request and response objects to the servlet thread.
4)The container calls the servlet’s service() method. Depending on the type of request, the service() method calls either the doGet() or doPost method..For this example, we’ll assume the request was an HTTP GET
5)The doGet() method generates the dynamic page and stuffs the page into the response object. Remember, the container still has a reference to the response object!!
6)The thread completes, the container converts the response object into an HTTP response, sends it back to the client, then deletes the request and response objects.

The URL that comes in as part of the request from the client is mapped to a specific servlet on the server.

The user does something in the browser (clicks a link, hits the “Submit” button, enters a URL, etc.) and that something is supposed to send the request to a specific servlet (or other web app resource like a JSP/Webservice) you built. How might that happen?

Servlet's urls RestfulService urls

This mapping of URLs to servlets might be handled in a number of different ways, and it’s one of the most fundamental issues you’ll face as a web app developer.

Different Ways::

1)Hardcode the mapping into your HTML page. In other words, the client is using the exact path and file (class) name of the servlet.
2)Use your Container vendor’s tool to do the mapping
3)Use some sort of properties table to store the mappings

Three names for the servlet:: 

Public Url(FakeName of Servlet):The client sees a URL for the servlet (in the HTML), but doesn’t really know how that servlet name maps to real directories and files back on the server. The public URL name is a fake name, made up for clients.

Deployer-known secret internal name(FakeName of Servlet):The deployer can create a name that’s known only to the deployer and others in the real operational environment. This name, too, is a fake name, made up just for the deployment of the servlet. It doesn’t have to match the public URL used by the client, OR the real servlet file and path name of the servlet class.but it can also be something completely different (like EnrollServlet).

Actual File name:The developer’s servlet class has a fully-qualified name that includes both the class name and the package name. The servlet class file has a real path and file name, depending on where the package directory structure lives on the server.

So you’ve hard-coded the real path and file name into all the JSPs and other HTML pages that use that servlet.Now what happens when you need to reorganize your application, and possibly move things into different directory structures? Do you really want to force everyone who uses that servlet to know (and ever follow) that same directory structure?

By mapping the name instead of coding in the real file and path name, you have the flexibility to move things around without having the maintenance nightmare of tracking down and changing client code that refers to the old location of the servlet files.

And what about security? Do you really want the client to know exactly how things are structured on your server? Do you want them to, say, attempt to navigate directly to the servlet without going through the right pages or forms? Because if the end-user can see the real path, she can type it into her browser and try to access it directly

So you map to client request to Servlet inside the web.xml? when change directories you should then change fullyqualified name inside the web.xml and should restart the conatiner.If you use the Annotation Approach then the

Do JSP's are also having the public url name and it can point to JSP without going the request to Servlet and internally forwarding to JSP? Yes
How the client urls of the JSP's are then mapped? It is the very rare scenario but it can be possible

When you deploy your servlet into your web Container, you’ll create a fairly simple XML document called the Deployment Descriptor (DD) to tell the Container how to run your servlets and JSPs. Although you’ll use the DD for more than just mapping names, you’ll use two XML elements to map URLs to servlets—one to map the client-known public URL name to your own internal name, and the other to map your own internal name to a fully-qualified class name

---------------------------------------------------
<servlet>					   |
<servlet-name>Internal name 1</servlet-name>	   |	
<servlet-class>foo.Servlet1</servlet-class>	   |
</servlet>					   |
						   |
<servlet>					   |	
<servlet-name>Internal name 2</servlet-name>	   |	
<servlet-class>foo.Servlet2</servlet-class>	   |
</servlet>					   |
						   |
<servlet-mapping>				   |This is what the client sees (and uses) to get to the servlet... but it’s a made-up name that is NOT the
<servlet-name>Internal name 1</servlet-name>	   |the name of the actual servlet class.It’s possible to use wildcards in the <url-pattern> element... more 						   |on that and paths later
<url-pattern>/Public1</url-pattern>		   |
</servlet-mapping>				   |	
----------------------------------------------------

The <servlet> elements tells the Container which class files belong to a particular web application.

Think of the <servlet-mapping> element as what the Container uses at runtime when a request comes in, to ask,which servlet should I invoke for this requested URL...Can I use both the xml and annotation approach for the configuring the clients request to a servlets/jsp/webservice

Besides mapping URLs to actual servlets, you can use the DD to customize other aspects of your web application including security roles, error pages, tag libraries, initial configuration information, and if it’s a full J2EE server, you can even declare that you’ll be accessing specific enterprise javabeans.

The deployment descriptor (DD), provides a “declarative” mechanism for customizing your web applications without touching source code..Even those who aren't the java programmers can configure your webapplication without having to drag you back from the Tropical vacation

If there was no dev tools introduction in the spring boot then the XML approach could been the best approach..Can the changes made to the xml files will be recognised and deployed to the Application Container..

I’m confused. Looking at the DD, you still don’t have anything that indicates the actual path name of the servlet! It just says the class name. This still doesn’t answer the question of how the Container uses that class name to find a specific servlet class file

Is there yet ANOTHER mapping somewhere that says that such and such a class name maps to such and such a file in such and such a location?


Advantages of having the Declartive Approach:
---------------------------------------------

Testing::Minimizes touching source code that has already been tested..Lets you fine-tune your app’s capabilities, even if you don’t have the source code

Lets you adapt your application to different external resources (like databases,Redis caches env,Security), without having to recompile and test any code.

All the configurations should be seprated from the Servlet's/WebService's Controller classes you should focus more on the Business Logic devlopment..

The configurations related informations should be placed inside the mvcappconfig.xml files or in inside @Configuration classes..

Nowadays all the configurations related to databases like the information that change from one env to other environment are maintained using the Spring Boot Profiles concept...
			database related information loads..
application-dev.xml 	application-prod.xml application-uat.xml.. The files like the mvcappconfig.xml or securityconfig.xml files will remain constant..

Based on the environment Spring Boot running the application it automatically picks the env specific files and loads the values inside the properties files and attach to the values wherver it is required...

Makes it easier for you to maintain dynamic security info like access control lists and security roles...Lets non-programmers modify and deploy your web 
applications while you can focus on the more interesting things...

Based on the environment Spring Boot is running the application it automatically picks the environment specific files and collects the values and intializes our Springbeans readily by the time container is started

Loading is getting automated by Spring boot but the maintenance of the properties files with the environment specific values or the configurations isn't changing..Chnage the web.xml files configuration based on the environment..

MVC Architecture:
-----------------

Good OO design —where each servlet should have one responsibility like the query page, the sign-up page, the search results page, etc.

Each servlet will have all the business logic it needs to modify or read the database, and prints the HTML to the response stream back to the client

Each servlet is having the logics to read or modify the data from the Database stuffing the Model data in to the HTML inside the servlet only...

/servlet--->	Requests for the one servlet will handle the GET POST PUT DELETE OPTIONS CONNECT httpmethod request's.. you can use the different JSP's for the every http method..

/reqservlet-->Can multiple requests will have mapping to the same servlet..What is use case

But then it gets ugly, so he adds JSPs::
--------------------------------------

JSP prepare the Dynamic HTML content that needs to be sent to the Client via WebServer..

Those pesky println() statements for the output response get really ugly, really quickly...So he reads up on JSPs and decides to have each servlet do whatever business logic it needs to do (query the database, insert or update a new record, etc.) then forward the request to a JSP to do the HTML for the response. This also separates the business logic from the presentation... and since he’s been reading up on design, he knows that separation of concerns is a Good Thing.

What if you want to make a Swing GUI app for the dating service, and it uses the same business logic? The business logic is struck up in the Servlet class and it is not reusable

With MVC the business logic is not only separate from the presentation... it doesn’t even know that there IS a presentation.Business logic is developed as the separte layer to make the Business logics as the reusable logics..


https://stackoverflow.com/questions/4415904/business-logic-in-mvc#:~:text=Domain%20logic%20most%20certainly%20goes,application%20layer%20hosting%20those%20rules.

Model*View*Controller (MVC) takes the business logic out of the servlet, and puts it in a “Model”— a reusable plain old Java class. The Model is a combination of the business data (like the state of a Shopping Cart) and the methods (rules) that operate on that data.


MVC Pattern Break Down:
----------------------

Controller:Takes user input from the request and figures out what it means to the model.. Forwards the model state to View

MODEL(Plain Old Java):Holds the real business logic and the state. In other words, it knows the rules for getting and updating the state.A Shopping Cart’s contents (and the rules for what to do with it) would be part of the Model in MVC.It’s the only part of the system that talks to the database

VIEW::Responsible for the presentation. It gets the state of the model from the Controller (although not directly; the Controller puts the model data in a place where the View can find it). It’s also the part that gets the user input that goes back to the Controller.


The servlet Controller isn’t doing much except some generic application stuff for this app, and, oh yeah, it does update the Model and then it kicks the View into gear.But the worst part is that all that generic application logic is duplicated in every single frickin’ servlet! If one thing needs to change, it has to change everywhere. A maintenance train wreck waiting to happen.Surely you don’t mean for me to put everything in a single servlet again? How could that be good?”

Forward all the clients requests to the one common Servlet and it takes care of forwarding to the right controller and view...It takes the help of the HandlerMappings and ViewResolvers..

The Container creates a request and response object that servlets (and other parts of the web app) can use to get information about the request and send information to the client.

J2EE Specs':
----------

All the Application servers are built following the J2EE Specifications

The Java 2 Enterprise Edition is kind of a super-spec—it incorporates other specifications, including the Servlets 2.4 spec and the JSP 2.0 spec for WebContainer.But the J2EE 1.4 spec also includes the Enterprise JavaBean 2.1 specification, for the EJB Container.But the J2EE 1.4 spec also includes the Enterprise JavaBean 2.1 specification, for the EJB Container.The web Container is for web components (Servlets and JSPs), and the EJB Container is for business components...A fully-compliant J2EE application server must have both a web Container and an EJB Container(plus other things including a JNDI and JMS implementation)

Apache Tomcat is Webserver/Application server. It has internally only containers{Servlet Container/JSP Container} 

Non-EJB web apps usually use Apache and Tomcat configured together—with Apache as the HTTP web Server, and Tomcat as the web Container...

In the old days, say, the year 2000, you could find complete J2EE application servers, standalone web Containers, and standalone EJB Containers. But today, virtually all EJB Containers are part of full J2EE servers, although there are still a few standlone web Containers,including Tomcat and Resin. Standalone web Containers are usually configured to work with an HTTP web server (like Apache), although the Tomcat Container does have the ability to act as a basic HTTP server. But for HTTP server capability, Tomcat is not nearly as robust as Apache, so the most common non-EJB web apps usually use Apache and Tomcat configured together—with Apache as the HTTP web Server, and Tomcat as the web Container.


MVC Application:
---------------

Need to setup the devlopment environment & deployment environment following the servlet and JSP specs and Tomcat requirements.

You can have any devlopment environment in any format but the deployement should be in the container expecting format...

Does the Deployment environment changes from server to server? say Apache Tomcat to JBoss Server.. No

ProjectRoot Folder: This directory name also represents the “context root” which Tomcat uses when resolving URLs. We can also re-configure the application context.. With the help of Spring Boot this is made easy 

All the dependencies that our Project use into the Web-application development should go into the WEB-INF/lib deployment folder.. There will be some dependencies(servlet.jar) that (runtime environments/server/applicationserver) will be provide.. We shouldn't move while preparing the war file.

Is there any maven plugin that automatically moves the maven dependencies into the lib folder..maven-war plugin that copies the dependencies to lib folder

or we can use the deployment descriptor assembly option of the eclipse...

/Beer-v1/input.html:
-------------------
<form action="selectBeer.do" method="POST">	<!--check out the relative url always-->

<url-pattern>/SelectBeer.do</url-pattern>  The / infront is mandatory

www.addrees.com			/				Beer-v1			/SelectBeer.do
IP address		   The host server root		The webapp context root		The logical resource name

In the HTML, the “/Beer-v1/” isn’t part of the path. In the HTML, it just says:But the browser prepends “/Beer-v1/” on to the request, because that’s where the client request is coming from. In other words, the “SelectBeer.do” in the HTML is relative to the URL of the page it’s on.

The Container searches the DD and finds a <servlet-mapping> with a <url-pattern> that matches /SelectBeer.do, where the slash (/) represents the context root of the web app, and SelectBeer.do is the logical name of a resource.

Model: You can do the Testing with out any Tomcat server. Just test like Plain Old Java CLass Testing..

For the components like Servlets & JSP & RestControllers if you need to Test then you need the Application to get deployed in the ApacheTomcat Server

JSP generates the page for the conatiner.. the container returns the page to the Happy User...

Request Dispatching:
-------------------

The Container provides a mechanism called “request dispatching” that allows one Container-managed component to call another, and that’s what we’ll use—the servlet will get the info from the model, save it in the request object, then dispatch the request to the JSP.

RD:: servlet can call servlet  jsp -->jsp servlet-->jsp  jsp-->servlet

Add the model component’s answer to the request object, so that the JSP can access it..Ask the Container to forward the request to “result.jsp”.
// response.setContentType(“text/html”);
// PrintWriter out = response.getWriter();
// out.println(“Beer Selection Advice<br>”);

request.setAttribute(“styles”, result);
RequestDispatcher view =request.getRequestDispatcher(“result.jsp”);view.forward(request, response);

Use the request dispatcher to ask the Container to crank up the JSP, sending it the request and response.Container doesn't even no that response is coming from the .jsp page.

What happens if we map the two urls to one servlet?  Tomcat container doesn't allow you to deploy the Application.. It throws RuntimeError.. The tomcat server itself will not start..

You can place the jsp files in the static area content or inside the Private Area content WEB-INF folder..

in the client requests urls::/select/select.do   some part of url can correspond to the directory on the server.but last part of the url should be corresponded to the servlet url jsp file url or the html file 

Servlets Life Cycle:
-------------------

Stepped into the middle of the servlets life: When was the servlet class loaded? When did the servlet’s constructor run?

How long does the servlet object live? When should your servlet initialize resources? When should it clean up its resources?

The servlet lifecycle is simple; there’s only one main state—initialized.If the servlet isn’t initialized, then it’s either being initialized (running
its constructor or init()method), being destroyed (running its destroy() method), or it simply does not exist.

Phases:

1)Container Loads the class:

2)Instanitaite the Servlet(Constructor is run):Your servlet class no-arg constructor runs (you should NOT write a constructor; just use the compiler-supplied default). If you place userdefined constructor in the servlet and configure the load-on-startup=1 then Tomcat Conatiner cannot intialise the Servlet.. Other servlets will be intialized and container can run the other servlets..

3)init(): Called only ONCE in the servlet’s life, and must complete before Container can call service().

4)service():This is where the servlet spends most of its life..Each request runs in a separate thread

5)destroy():Container calls to give the servlet a chance to clean up before the servlet is killed (i.e., made ready for garbage collection). Like init(), it’s called only once


Life Cycle Methods:
------------------

Servlet(I):	The Servlet interface says that all servlets have these five methods (the three in bold are lifecycle methods).
----------
service(ServletRequest, ServletResponse)
init(ServletConfi g)
destroy()
getServletConfig()
getServletInfo()

GenericServlet(I):GenericServlet is an abstract class that implements most of the basic servlet methods you’ll need, including those from the Servlet interface
-----------------
init()				-->internally called by the init(Config) method in Genric servelet Implementation..init() in GS is Empty Implementation
getInitParameter(String)
getInitParameterNames()
getServletContext()
log(String)
log(String, Throwable)
service(ServletRequest, ServletResponse)-->It is the abstract Method

HttpServlet:
-----------
HttpServlet (also an abstract class) implements the service() method to reflect the HTTPness of the servlet--the service() method doesn’t take just ANY old servlet request and response, but an HTTP-specific request and response

service(HttpServletRequest, HttpServletResponse).. This Method calls doGet or doPost based on the Request that is coming
service(ServletRequest, ServletResponse).. The method is overridden to call the service(HttpServletRequest, HttpServletResponse)
doGet(HttpServletRequest, HttpServletResponse)
doPost(HttpServletRequest, HttpServletResponse)
doHead(HttpServletRequest, HttpServletResponse)
doOptions(HttpServletRequest, HttpServletResponse)
doPut(HttpServletRequest, HttpServletResponse)
doTrace(HttpServletRequest, HttpServletResponse)
doDelete(HttpServletRequest, HttpServletResponse)
getLastModified(HttpServletRequest)

MyServlet:
---------
doPost(HttpServletRequest, HttpServletResponse)
myBizMethod()

Most of your servletness is handled by superclass methods. All you do is override the HTTP methods you need.

HttpServletRequest HttpServletResponse HttpServlet ServletConfig ServletContext-->All these Objects are implementations of the Tomcat Conatiner

ServletConfig
------------
String getServletName();ServletContext getServletContext();String getInitParameter(String name);Enumeration<String> getInitParameterNames();

ServletContext::  There are more no:of methods inside the ServletContext 
-------------

LifeCycle Methods:

1)init(): The Container calls init() on the servlet instance after the servlet instance is created but before the servlet can service any client requests.
------
Gives you a chance to initialize your servlet before handling any client requests.If you have initialization code (like getting a database connection or registering yourself with other objects), then you’ll override the init() method in your servlet class.

2)service():
---------
When the first client request comes in, the Container starts a new thread or allocates a thread from the pool, and causes the servlet’s service() method to be invoked.This method looks at the request, determines the HTTP method (GET, POST, etc.) and invokes the matching doGet(), doPost(), etc. on the servlet.
You should NOT override the service() method. Your job is to override the doGet() and/or doPost() methods and let the service() implementation from HTTPServlet worry about calling the right one.

3)doGet() or doPost():
----------------------
This is where your code begins! This is the method that’s responsible for whatever the heck your web app is supposed to be DOING..You can call other methods on other objects, of course, but it all starts from here.Whichever one(s) you override tells the Container what you support. If you don’t override doPost(), for example, then you’re telling the Container that this servlet does not support HTTP POST requests.

The service() method is always called in its own stack...

At any given time, you’ll have at least as many runnable threads as there are client requests, limited by the resources or policies/configuration of the Container. (You might, for example, have a Container that lets you specify the maximum number of simultaneous threads, and when the number of client requests exceeds that, some clients will just have to wait.)


Each request runs in the seprate Thread..You might hear people say things like,Each instance of the servlet...There aren’t multiple instances of any servlet class, except in one special case (called SingleThreadModel, which is inherently evil),

This is confusing... in the picture above you show two different clients, each with its own thread. What happens if the same client makes multiple requests? Is it one thread per client or one thread per request?One thread per request. The Container doesn’t care who makes the request—every incoming request
means a new thread/stack.

What if the Container uses clustering, and distributes the app on more than one JVM?

Imagine the picture above is for a single JVM, and each JVM has the same picture. So for a distributed web app, there would be one instance of a particular servlet per JVM, but each JVM would still have only a single instance of that servlet.

Tomcat: finds for the deployed webapps and searches for all the servlets(how,why,where it looks?) that configured with load-on-startup=1 and creates the instance of the servlet and runs the init method. or else creates the instance of servlet on fly when the first client request and runs the init method

Service() method will not run until the servlet is fully initialized{init is also run}.

Why is there an init() method? In other words, why isn’t the constructor enough for initializing a servlet? What kind of code would you put in the init() method?the init() method takes an object reference argument. What do you think the argument to the init() method might be, and how (or why) would you use it?

The proudest moment of my life is when the Grand Master Container makes me a servlet, by making a ServletConfig for me, and calling my init() . Before that, I’m just an ordinary object. But as a servlet, I have special privileges (besides the secret handshake), like the ability to log events, get references to other resources, and store attributes for other servlets...

When an Object becomes servlet, it gets all the unique previleges that comes with being servelt use its ServletContext reference to get information from the
Container.

Between the constructor and the init() method, the servlet is in a Schroedinger’s* servlet state:

You might have servlet initialization code, like getting web app configuration info, or looking up a reference to another part of the application, that will fail if you run it too early in the servlet’s life. It’s pretty simple though, if you remember to put nothing in the servlet’s constructor!


Servlet Config Object(per Servlet):Use it to pass deploy-time information to the servlet (a database or enterprise bean lookup name, for example) that you ---------------------------------
don’t to hard-code into the servlet (servlet init parameters).Use it to access the ServletContext.

A ServletContext:
----------------

One ServletContext per web app. (They should have named it AppContext)..Use it as a kind of application bulletin-board, where you can put up messages (called attributes) that other parts of the application can access (way more on this in the next chapter)..Web app parameters can be accessed..
Use it to get server info, including the name and version of the Container, and the version of the API that’s supported.

ServletConfig parameters won’t change for as long as this servlet is deployed and running. To change them, you’ll have to redeploy the servlet.

Request & Response :
-------------------

ServletRequest:
--------------
Object getAttribute(String name); Enumeration<String> getAttributeNames();void setAttribute(String name, Object o);void removeAttribute(String name);
String getParameter(String name); Enumeration<String> getParameterNames();String[] getParameterValues(String name);Map<String, String[]> getParameterMap();
String getRemoteAddr();String getRemoteHost();int getRemotePort();String getLocalName();String getLocalAddr();int getLocalPort();

String getCharacterEncoding();setCharacterEncoding(String env);
int getContentLength();long getContentLengthLong();String getContentType();ServletInputStream getInputStream() throws IOException;BufferedReader getReader() throws IOException;

String getProtocol();String getScheme();String getServerName(); 
Locale getLocale();Enumeration<Locale> getLocales();boolean isSecure();RequestDispatcher getRequestDispatcher(String path);
ServletContext getServletContext()

HttpServletRequest
-------------------
String getAuthType();Cookie[] getCookies();long getDateHeader(String name);String getHeader(String name); Enumeration<String> getHeaders(String name); 
Enumeration<String> getHeaderNames();int getIntHeader(String name);String getMethod();String getPathInfo();String getPathTranslated();

String getContextPath();String getQueryString();String getRemoteUser();boolean isUserInRole(String role);java.security.Principal getUserPrincipal();
String getRequestedSessionId();String getRequestURI();StringBuffer getRequestURL();String getServletPath();HttpSession getSession(boolean create);
HttpSession getSession();String changeSessionId(); boolean isRequestedSessionIdValid();boolean isRequestedSessionIdFromCookie();
boolean isRequestedSessionIdFromURL(); boolean authenticate(HttpServletResponse response) throws IOException,ServletException;
void login(String username, String password) throws ServletException;void logout() throws ServletException;
Collection<Part> getParts() throws IOException, ServletException;Part getPart(String name) throws IOException, ServletException;

Servlet is mapped as /test%3F/* and the application is deployed under /app. 
http://30thh.loc:8480/app/test%3F/a%3F+b;jsessionid=S%3F+ID?p+1=c+d&p+2=e+f#a  Encoded Url that is sent from Client Browser

Method              URL-Decoded Result           
----------------------------------------------------
getContextPath()        no      /app
getLocalAddr()                  127.0.0.1
getLocalName()                  30thh.loc
getLocalPort()                  8480
getMethod()                     GET
getPathInfo()           yes     /a?+b								
getProtocol()                   HTTP/1.1
getQueryString()        no      p+1=c+d&p+2=e+f
getRequestedSessionId() no      S%3F+ID
getRequestURI()         no      /app/test%3F/a%3F+b;jsessionid=S+ID				without QueryString
getRequestURL()         no      http://30thh.loc:8480/app/test%3F/a%3F+b;jsessionid=S+ID	without QueryString
getScheme()                     http
getServerName()                 30thh.loc
getServerPort()                 8480
getServletPath()        yes     /test?								The currently mappedPortion
getParameterNames()     yes     [p 2, p 1]
getParameter("p 1")     yes     c d


"+" is handled as space only in the query string..Anchor "#a" is not transferred to the server. Only the browser can work with it.
If the url-pattern in the servlet mapping does not end with * (for example /test or *.jsp), getPathInfo() returns null.


ServletResponse interface:
-------------------------

String getCharacterEncoding();String getContentType();ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;
void setCharacterEncoding(String charset);void setContentLength(int len);void setContentLengthLong(long len);void setContentType(String type);
void setBufferSize(int size); int getBufferSize();void flushBuffer() throws IOException;void resetBuffer(); boolean isCommitted();void reset();
void setLocale(Locale loc);Locale getLocale();

HttpServletResponse:
-------------------
addCookie(Cookie cookie);boolean containsHeader(String name);String encodeURL(String url);String encodeRedirectURL(String url);
void sendError(int sc, String msg) throws IOException;void sendError(int sc) throws IOException;void sendRedirect(String location) throws IOException;
void setDateHeader(String name, long date);void addDateHeader(String name, long date);void setHeader(String name, String value);
void addHeader(String name, String value);void setStatus(int sc);int getStatus();String getHeader(String name); Collection<String> getHeaderNames();


Who implements the ServletRequest and ServletResponse?Are those classes in the API?

The classes aren’t in the API because they’re left to the vendor to implement. The good news is, you don’t have to worry about it. Just trust that when the service() method is called in your servlet, it’ll be handed references to two perfectly good objects that implement HttpServletRequest and HttpServletResponse.


GET POST:Asks server to accept the body info attached in the request and give it to the thing at the requested url its like fat GET.
HEAD: Gives only the Header info in response without actual resource.
PUT:Says to put the enclosed info (the body) at the requested URL 	DELETE:Says to delete the thing (resource/file) at the requested URL.
OPTIONS: Asks for a list of the HTTP methods to which the thing at the requested URL can respond.

Example of a response to an HTTP OPTIONS request:
----------------------------------------------
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Date: Thu, 20 Apr 2004
16:20:00 GMT
Allow: OPTIONS, TRACE,GET, HEAD, POST *****
Content-Length: 0

Differences between the GET & POST?

But besides size, security, and bookmarking, there’s another crucial difference between GET and POST—the way they’re supposed to be used. GET is meant to be used for getting things. Period. Simple retrieval. Sure, you might use the parameters to help figure out what to send back, but the point is—you’re not making any changes on the server! POST is meant to be used for sending data to be processed. This could be as simple as query parameters used to figure out what to send back, just as with a GET, but when you think of POST, think: update. Think: use the data from the POST body to change something on the server

Idempotent & NOn Idempotent:?Double POST? How you handle?

Repatable Operations: GET PUT DELETE HEAD   Non-Repetable Operations: POST.. Watch the javabrains tutorial for the more details..

What are some of the ways in which a developer could reduce the risk of this?
(Hint: they might not all be programmatic solutions.)

Being idempotent is GOOD. It means you can do the same thing over and over again, with no unwanted side effects!

POST is not idempotent—the data submitted in the body of a POST might be destined for a transaction that can’t be reversed. So you have to be careful with
your doPost() functionality!

GET is idempotent. POST is not. It’s up to you to make sure that your web app logic can handle scenarios like Diane’s, where the POST comes in more than once.

What’s to stop me from using the parameters in GET to update the server? But don't do as per HTTP spec it supposed to be Ideompotent

Note: there are several different uses of the word idempotent; we’re using it in the HTTP/servlet way to mean that the same request can be made twice with
no negative consequences on the server. We do *not* use idempotent to mean that the same request always returns the same response, and we do NOT mean that a
request has NO side effects.

What determines whether the browser sends a GET or POST request?

a simple hyperlink always means a GET:: <A HREF=”http://www.wickedlysmart.com/index.html/”>click here</A>

<form method=”POST” action=”SelectBeer.do”> if you explicitly SAY method=”POST”, then, surprisingly, it’s a POST.

<form action=”SelectBeer.do”> The default is GET and parameters are sent inthe request Header..Because if the request comes in as a GET, that means you’ll run into big trouble at runtime if you have only a doPost() and not a doGet() in your servlet!

What if I want to support both GET and POST from a single servlet? Usually put logic in doGet(), then have the doPost() method delegate to the doGet() method if necessary.

public void doPost(...) throws ... { doGet(request, response); } forms and HTTP

Some form input types, like a set of checkboxes, can have more than one value. That means a single parameter (“sizes”, for example) will have multiple values, depending on how many boxes the user checked off.

Can Sizes: <p>
<input type=checkbox name=sizes value=”12oz”> 12 oz.<br>
<input type=checkbox name=sizes value=”16oz”> 16 oz.<br>
<input type=checkbox name=sizes value=”22oz”> 22 oz.<br>
<br><br>

String one = request.getParameterValues(“sizes”)[0]; String [] sizes = request.getParameterValues(“sizes”);

To collect all the front end Objects we maintain one Object that is VTO or DTO in the Types the inputs are coming from the Front end...

Request API::

String client = request.getHeader(“User-Agent”); Cookie[] cookies = request.getCookies(); HttpSession session = request.getSession();
String theMethod = request.getMethod();  InputStream input = request.getInputStream();

Why would I ever want to get an InputStream from the request?

With a GET request, there’s nothing but the request header info. In other words,there’s no body to care about. BUT... with an HTTP POST, there’s body info.
Most of the time, all you care about from the body is sucking out the parameter values (for example,“color=dark”) using request.getParameter()..But sometimes there could be client request that sends the textual or Binary information to process..In this case you can use the getReader or getInputStream methods. These streams will only contain the body of the HTTP request and not the headers.

What’s the diff erence between getHeader() and getIntHeader()? Far as I can tell, headers are always Strings! Even the getIntHeader() method takes a String
representing the name of the header, so what’s the int about

The values that come back from headers are always in a String form, but for a few headers, the String represents a number..The “Content-Length” header returns the number of bytes that make up the message-body. The “Max-Forwards” HTTP header, for example, returns an integer indicating how many router hops the request is allowed to make

String forwards = request.getHeader(“Max-Forwards”);
int forwardsNum = Integer.parseInt(forwards);		Alternative----->int forwardsNum = request.getIntHeader(“Max-Forwards”);

getServerPort(), getLocalPort(), and getRemotePort() are confusing!

The difference between getLocalPort() and getServerPort() is more subtle—getServerPort() says, “to which port was the request originally SENT?”

While getLocalPort() says, “on which port did the request END UP?” Yes, there’s a difference, because although the requests are sent to a single port (where
the server is listening), the server turns around and finds a different local port for each thread so that the app can handle multiple clients at the same time.


HttpServletReponse:
------------------

Typically, you use the response object to get an output stream (usually a Writer) and you use that stream to write the HTML (or some other type of content) that goes back to the client..sendErrors sendCookies otherHeaders

ServletResponse:
---------------
String getCharacterEncoding();String getContentType();ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;
void setCharacterEncoding(String charset);void setContentLength(int len);void setContentLengthLong(long len); void setContentType(String type);
void setBufferSize(int size);int getBufferSize();void flushBuffer() throws IOException;void resetBuffer();boolean isCommitted();void reset();
void setLocale(Locale loc);Locale getLocale();

HttpServletResponse:
-------------------

void addCookie(Cookie cookie);boolean containsHeader(String name);String encodeURL(String url);String encodeRedirectURL(String url);
void sendError(int sc, String msg) throws IOException;void sendError(int sc) throws IOException;void sendRedirect(String location) throws IOException;
void setDateHeader(String name, long date);void addDateHeader(String name, long date);void setHeader(String name, String value);
void addHeader(String name, String value);void setIntHeader(String name, int value);void addIntHeader(String name, int value);void setStatus(int sc);
int getStatus();String getHeader(String name); Collection<String> getHeaders(String name);Collection<String> getHeaderNames();


Using the response for I/O:	
--------------------------
Who said that HTML was the only thing you could send back in a response? You might send something other than HTML back to the client. Something for which an output stream makes perfect sense.

Sending the JarFile to Client:
------------------------------
Instead of sending back an HTML page, the response contains the bytes representing the JAR

response.setContentType(“application/jar”);
ServletContext ctx = getServletContext();
InputStream is = ctx.getResourceAsStream(“/bookCode.jar”);  Place the file in the root directory of the App
int read = 0;
byte[] bytes = new byte[1024];					*** This is just the sample to write the file that is already existing on the server
OutputStream os = response.getOutputStream();
while ((read = is.read(bytes)) != -1) {
os.write(bytes, 0, read);			bytes:actual data,  offset,	read:The no: of bytes to write 
}

Load the data to the existing byte[]...

**Content type is an HTTP header that must be included in the HTTP response..

text/html,application/pdf,video/quicktime,application/java,image/jpeg,application/jar,application/octet-stream,application/x-zip

setContentType:  That will set the Content-Type header in the response Object
--------------

Why do you have to set the content type? Can’t servers figure it out from the extension of the file?

Most servers can, for static content. In Apache, for example, you can set up MIME types by mapping a specific file extension (.txt, .jar, etc.) to a specific content type, and Apache will use that to set the content type in the HTTP header.But we’re talking about what happens inside a servlet where there IS no file! You’re the one who is sending back the response; the Container has no idea what you’re sending.

But what about that last example where you read a specific JAR file? Can’t the Container see that you’re reading a JAR?

You can also look in your browser preferences for a list of those that have been configured for your browser, and you can check your Web server configuration files as well

Wait a second... why would you use a servlet to send back that JAR file when you can just have the web server send it back as a resource? In other words, why wouldn’t you have the user click a link that goes to the JAR instead of to a servlet? Can’t the server be configured to send back the JAR directly without even GOING through a servlet? 

To figure out which jar file to send..take the parameters and genrate only fly the file that is not existed on the server deployment directories..
Maybe it’s something as simple as putting code in your servlet that—along with sending back the JAR—writes some info to a database about this particular user. Or maybe you have to check to see if he’s even allowed to download this JAR, based on something you first read from the database

How do you Handle the static Pdf files and Dynamic Pdf files/jar files that are generated on the server? Will you delete them immediately or store them somewhere?

ServletOutputStream for bytes, or a PrintWriter for character data.
-------------------------------------------------------------------
PrintWriter writer = response.getWriter();
writer.println(“some text and HTML”);	

**Although you can still write character data to an OutputStream, this is the stream that’s designed to handle character data		

out.write(aByteArray);

Make sure you remember that the method names for getting the stream or the writer both drop the first word in the returned type

public ServletOutputStream getOutputStream() throws IOException; public PrintWriter getWriter() throws IOException;

The PrintWriter actually “wraps” the ServletOutputStream. In other words, the PrintWriter has a reference to the ServletOutputStream and delegates calls
to it.There’s just ONE output stream back to the client, but the PrintWriter “decorates” the stream by adding higher-level character-friendly methods
       add
"name" ---->"Muni"
       add
      ----->"Pavan"	
	set
"name"--->"Ammu"		Replaces the two existing headers

add and set behaves differently only when the haeder with the name is already existing..

When you call setContentType(“text/html”), you’re setting a header just as if you said: setHeader(“content-type”, “text/html”);

So what’s the difference? No difference... assuming you type the “content-type” header correctly. The setHeader() method won’t complain if you misspell the header names—it just thinks you’re adding a new kind of header.


Sometimes you just don't handle the response yourself:
-----------------------------------------------------

You can either redirect the request to a completely different URL..you can dispatch the request to some other component in your web app

The servlet/jsp/webservice decides that the request should go to a completely different URL..The servlet calls sendRedirect(aString) on the response and that’s it.The HTTP response has a status code “301” and a “Location” header with a URL as the value...The browser gets the response, sees the “301” status code, and looks for a “Location” header..The browser makes a new request using the URL that was the value of the “Location” header in the previous
response. The user might notice that the URL in the browser bar changed...The HTTP response is just like any other response... except it isn’t coming
from the location the client typed in.

Servlet/Jsp/Webservice Decision Making
---------------------------------------
if (worksForMe) {
// handle the request
} else {
response.sendRedirect(“http://www.oreilly.com”);	The URL you want the browser to use for the request. This is what the client will see.			
}//	Container logics takes care of adding the location header 


Using relative URLs in sendRedirect():

Imagine the client originally typed in:http://www.wickedlysmart.com/myApp/cool/bar.do

In servlet/webservice/jsp named “bar.do”, the servlet calls sendRedirect() with a relative URL that does NOT start with a forward slash

sendRedirect(“foo/stuff.html”);The Container knows the original request URL started from the myApp/cool path, so if you don’t use a forward slash, that part of the path is prepended to the front of “foo/stuff.html”. final Url will be:http://www.wickedlysmart.com/myApp/cool/foo/stuff.html

But if the argument to sendRedirect() DOES start with a forward slash::The forward slash at the beginning means “relative to the root of this web Container.

The Container builds the complete URL relative to the web Container itself, instead of relative to the original URL of the request. So the new URL will be:

http://www.wickedlysmart.com/foo/stuff.html....****"foo" is a web app, separate from the "myApp" web app.

****if the sendRedirect Urls starts with /. Then the container considers the url to be root of the webcontainer while building..

**If you want to forward the request to another webapp deployed on the same container use the /(forward-slash..).. If you want to forward the another component(servlet/jsp/webservice) deployed on the same-webapp then url shouldn't start with slash. If you want to forward to a completely another App deployed on samecontainer on same machine (or) other container on same machine or the other container on the different machine then you should use the encodeRedirectUrl

How to deploy the multiple webapplications on the same container and on different Ports? With SpringBoot it is made easy with just a server.port specified on the each application individually. How it is different if you deploy the application on the GlassFish or WebLogic..Just with the server.port will it work or any other changes

Wrong time calling of the object method: IllegalStateException

If you look up sendRedirect() in the API, you’ll see that it throws an IllegalStateException if you try to invoke it after “the response has already been
committed.By committed, they mean that the response has been sent. That just means the data has been flushed to the stream. For practical purposes, it means you can’t write to the response and then call sendRedirect()!But some picky professor will tell you that technically, you could write to the stream
without flushing, and then sendRedirect() wouldn’t cause an exception. But it would be a completely stupid thing to do..

***By the way, this idea that “once it’s committed it’s too late” also applies to setting headers, cookies, status codes, the content-type, and so on...)

Well, it takes a String that IS a URL. The point is, sendRedirect() does NOT take an object of type URL. You pass it a String that’s either a complete URL or a relative one. If the Container can’t build a relative URL into a full one, it’ll throw an IllegalStateException. The tricky part is to remember that THIS is wrong: sendRedirect(new URL(“http://www.oreilly.com”));

Difference between the RequestDispatch & Redirect:
--------------------------------------------------
When a servlet does a redirect, it’s like asking the client to call someone else instead. In this case, the client is the browser, not the user. The browser makes the new call on the user’s behalf, after the originally-requested servlet says, Sorry, call this guy instead...The user sees the new URL in the browser

When a servlet does a request dispatch, it’s like asking a co-worker to take over working with a client. The co-worker ends up responding to the client, but the client doesn’t care as long as someone responds.

How do you do the HTTP Post Redirect?

Deployment Descriptor:
---------------------

Kim wants to configure his email address in the DD, not hard-code it inside the servlet class

PrintWriter out = response.getWriter();
out.println("blooper@wickedlysmart.com");

What happens when his email changes? He’ll have to recompile...He’d much rather put his email address in the Deployment Descriptor (web.xml file) so that when he deploys his web app, his servlet can somehow “read” his email address from the DD.and to change his email he modifies only the web.xml file, without having to touch his servlet source code.

You already have seen the requestParameters that can come over to the doGet and doPost, but servlets can also have the Intialization parameters as well..

<servlet>
<servlet-name>BeerParamTests</servlet-name>
<servlet-class>TestInitParams</servlet-class>
<init-param>
<param-name>adminEmail</param-name>
<param-value>likewecare@wickedlysmart.com</param-value>			Just make sure that it is inside the <servlet> element in DD
</init-param>
</servlet>

Servlet Code:out.println(getServletConfig().getInitParameter("adminEmail"));Every servlet inherits a getServletConfig() method.

Remeber you cannot call the getServletConfig() from the constructor of the servlet

That’s too early in the servlet’s life... it won’t have its full servletness until the Container calls init().

The Container “reads” the servlet init parameters from the DD and gives them to the ServletConfig, then passes the ServletConfig to the servlet’s init()
method.

Wait a minute! In the last chapter you said that we could override the init() method, and nobody said a word about the ServletConfig argument?

**There’s no law that stops you from overriding the one that takes a ServletConfig, but if you DO, then you better call super.init(ServletConfig)!

 public void init(ServletConfig config) throws ServletException {
	this.config = config;			//As the config Object is getting assigned....
	this.init();
    }


There is need to override the init(ServletConfig) method,since you can always get your ServletConfig by calling your inherited getServletConfig() method.

The servlet init parameters are read only ONCE—when the Container initializes the servlet..The servletConfig is the Interface and don't worry about the implementation

What is the benefit that you achive with the web.xml DD? You can avoid the recompilation of the code.But with SpringBoot that is ignored..

Sure it’s easy to tell Tomcat to shutdown and startup, but what about the web apps that are running? They all have to go down!

All the other webapps going down for sake of one initialization parameter change is BAD.production-quality Web Containers let you do a hot redeploy, which means that you don’t have to restart your server or take any other web apps down.In fact, Tomcat does include a manager tool that will let you deploy, undeploy, and redeploy entire web apps without restarting

But in the real world, even a hot redeploy is a Big Deal, and taking even a single app down just because the init parameter value changed can be a bad idea. If the values of your init parameters are going to change frequently, you’re better off having your servlet methods get the values from a file or database, but this approach will mean a lot more overhead each time your servlet code runs, instead of only once during initialization.


How can the JSP get the servlet InitParameters? Put them in requestAttribute

The request object lets you set attributes (think of them as a name/value pair where the value can be any object) that any other servlet or JSP that gets the request can use. That means any servlet or JSP to which the request is forwarded using a RequestDispatcher..

Why the servlet initParameters are required for other component in Webapp? initParams are specific to the one servlet configuration only na !!!

There is a way to have a servlet read the init parameters and then store them in a place other parts of the app could use, but then we’d have to know which servlet would always run first when the app is deployed, and any changes to the web app could break the whole thing. No, that won’t do either.

But I really want ALL the parts of my web app to have access to the email address. With init parameters, I have to configure them in the DD for every servlet, and then have all the servlets make them available for the JSPs. How boring is that? Not maintainable either. I need something more global

Context Parameters:
------------------
Context Parameters are avaialble to entire webapp servlet/jsp/webservice..So that means any servlet and JSP in the app automatically has access to the context init parameters, so we don’t have to worry about configuring the DD for every servlet, and when the value changes, you only have to change it one place!

<context-param>
<param-name>adminEmail</param-name>				Delcare them outside of the <servlet> & inside the <web-app> tag..As the contextparameters 	<param-value>clientheaderror@wickedlysmart.com</param-value>	are for entire webapp and not for the single servlet
</context-param>

out.println(getServletContext().getInitParameter(“adminEmail”));Every servlet inherits a getServletContext() method (and JSPs have special access to a context as well).

ServletContext is one per app, but only if the app is in a single JVM!In a distributed environment, you’ll have one ServletContext per JVM If the app is distributed, there’s one ServletContext per JVM!Now, chances are this won’t create problems, but if you have a distributed web app, you better consider the
consequences of having different contexts for each JVM

Yes, JSPs are turned into first-class servlets, so they also get their own ServletConfig..

You can only get the SevletInitParameter or ContextInitParameter but you cannot modify the values of them using the code in the servlet..

Perhaps the most common use of a context parameter is storing database lookup names. You’d want all parts of your app to have access to the correct name, and when it changes, you want to change it in only one place.

If you modify the XML to change the value of an init parameter (either servlet or context), when does the servlet or the rest of the web app see the change?

ServletContext and ServletConfig objects are created after reading the xml file.. If you change then you should redeploy inorder to change the values..
ONLY when the web app is redeployed. Remember—we talked about this before—the servlet is initialized only once, at the beginning of its life, and that’s when it’s given its ServletConfig and ServletContext. The Container reads the values from the DD when it creates those two objects, and sets the values.

Think Context-Params & init-Params are as deployment time constants.You can get them at runtime, but you can’t set them. There’s no setInitParameter().

Main Methods Inside the ServletContext:
--------------------------------------
getInitParameter(String)				
getInitParameterNames()
getAttribute(String)			--->Get init parameters and get/set attributes
getAttributeNames()
setAttribute(String, Object)
removeAttribute(String)
getMajorVersion()			--->Information about the Server/Container
getServerInfo()
getRealPath(String)
getResourceAsStream(String)
getRequestDispatcher(String)
log(String)				--->Write to the server’s log file (vendor-specific) or (System.out.)


getServletConfi g(). getServletContext(). getInitParameter() In a servlet, the only time you would NEED to go through your ServletConfi g to get your ServletContext is if you’re in a Servlet class that doesn’t extend HttpServlet or GenericServlet (the getServletContext() method you inherit comes from GenericServlet


It’s fine to use the ServletContext log() method for simple experiments, but in a real production environment, you will almost certainly want to choose something else

Hate to spoil your ServletContext party, but, um, those init parameters can’t be anything except STRINGS! That’s it! What if I want to initialize my app with a database DataSource that all the servlets can use..


What if you really want all the parts of your web app to have access to a shared database connection? You can certainly put the DataSource lookup name in a context init parameter, and that’s probably the most common use of context parameters today.But then who does the work of turning the String parameter into an actual DataSource reference that all parts of the web app can share..You can’t really put that code in a servlet, because which servlet would you choose to be The One To Lookup The DataSource And Store It In An Attribute? Do you really want to try to guarantee that one servlet in particular will always run first? Think about it.

You cannot Gurantee which servlet will first.. Based on the request that is coming the servlet would execute...

Listener: She needs someone who is sitting there, waiting to be notified that the app is starting up.She wants to listen for a context initialization event,
so that she can get the context init parameters and run some code before the rest of the app can service a client

Listener JOb:You need something else. Not a servlet or JSP, but some other kind of Java object whose sole purpose in life is to initialize the app (and possibly to uninitialize it too, cleaning up resources when it learns of the app’s demise...


ServletContextListener:: Listening for the two key events of ServletContxt creation and ServletContextDestruction

Get notified when the context is initialized (app is being deployed).
Get the context init parameters from the ServletContext.Use the init parameter lookup name to make a database connection
Store the database connection as an attribute, so that all parts of the web app can access it.

Get notified when the context is destroyed (the app is undeployed or goes down).Close the database connection

public class MyServletContextListener implements ServletContextListener {
	public void contextInitialized(ServletContextEvent event) {
	//code to initialize the database connection
	//and store it as a context attribute						These are the two notifications you get. Both give you a
											ServletContextEvent
}
public void contextDestroyed(ServletContextEvent event) {
	//code to close the database connection
}
}

What do I do? Where do I put the class? Who instantiates it? How do I register for the events? How does the listener set the attribute in the right ServletContext

Our Servlets JSP's and Listener all the Objects will be created by the ServletContainers..Spring Container takes care of creation of Bean Type Objects

***Now ServletContext has the Shared Object(listner kept in attribute) which can be used by multiple servlets at the same time

Listener is now like a factory class..with the help of parameter that is in the <init-param> we are creating the Object..

How container discovers and uses listener? Container can search for the classes inside the classes folder or the lib/ folder if it is deployed as Jar

<listener>
<listener-class>com.example.MyServletContextListener</listener-class>
</listener>

***How many Objects of listners will be created by the container? It will be one

Does the attributes need to be Serializable?

There are several different attribute types, and whether the attribute should be Serializable only matters with Session attributes. And the
scenario in which it matters is only if the application is distributed across more than one JVM. 

There’s no technical need to have any attributes (including Session attributes) be Serializable, although you might consider making all of your attributes Serializable by default, unless you have a really good reason NOT to.

Think about it—are you really certain that nobody will ever want to use objects of that type as arguments or return values as part of a remote method call? Can you really guarantee that anyone who uses this class (Dog, in this case) will never run in a distributed environment?

**Intializing the Application before any other Servlet is being serviced

Hold on... how are you telling the Container that this is a listener for ServletContext events? There doesn’t seem to be an XML element for <listener-type> or anything that says what type of events this listener is for. But I noticed you have “ServletContextListener” as part of the class name—is that how the Container knows? By the naming convention?.. Use the ServletContextListener

**One Listener can implement multiple Listeners

I just thought of something... since attributes can be set programmatically (unlike init parameters), can I listen for attribute
events? Like if someone adds or replaces a Dog?


Where there’s a lifecycle moment, there’s usually a listener to hear about it...Besides context events, you can listen for events related to context attributes, servlet requests and attributes, and HTTP sessions and session attributes

***You DO need to know the what kinds of events that you(Listener) can listen for?

ServletContextAttributeListener  ServletContextAttributeEvent
ServletContextListener		 ServletContextEvent
HttpSessionListener		 HttpSessionEvent
HttpSessionActivationListener    HttpSessionEvent
HttpSessionBindingListener	 HttpSessionBindingEvent
HttpSessionAtrributeListener	 HttpSessionBindingEvent
ServletRequestListener		 ServletRequestEvent
ServletRequestAttributeListener  ServletRequestAttributeEvent


HttpSessionBindingListener::You have an attribute class (a class for an object that will be stored as an attribute) and you want objects of this type to be notified when they are bound to or removed from a session..

HttpSessionActivationListener::You have an attribute class, and you want objects of this type to be notified when the session to which they’re bound is migrating to and from another JVM

HttpSessionBindingListener and HttpSessionActivationListener will be implemented by the attribute classes that will be part of the Session Attribute..

A plain old HttpSessionAttributeListener is just a class that wants to know when any type of attribute has been added, removed, or replaced in a Session. But the HttpSessionBindingListener exists so that the attribute itself can find out when it has been added to or removed from a Session.

****Note: binding listeners are NOT registered in the DD... it just happens automatically.

What is the reason for the BindingListener?

Imagine the Dog is a Customer class, with each active instance representing a single customer’s info for name, address, order info, etc. The real data is stored in an underlying database. You use the database info to populate the fields of the Customer object, but the issue is how and when do you keep the database record and the Customer info synchronized? You know that whenever a Customer object is added to a session, it’s time to refresh the fields of the Customer with this customer’s data from his record in the database. So the valueBound() method is like a kick that says, “Go load me up with fresh data from the database... just in case it changed since the last time I was used.” Then valueUnbound() is a kick that says, “Update the database with the value of the Customer object fields.


Sharing data to the other Parts of Web-App using the Atrributes.

Putting the Model in the request Object as the attribute and JSP is able to see them..ServletContextListener is able to get the context param and prepared the dog object and put it into the Context Scope. Now all parts of Web app is able to see the Attribute.

An attribute is an object set (referred to as bound) into one of three other servlet API objects—ServletContext, HttpServletRequest (or ServletRequest), or HttpSession. You can think of it as simply a name/value pair (where the name is a String and the value is an Object) in a map instance variable. In reality, we don’t know or care how it’s actually implemented—all we really care about is the scope in which the attribute exists. In other words, who can see it and how long does it live

Differences between the Atrribute and Parameters?

Types		Application/context,Request,Session         Application/context init parameters (&) Request parameters & Servlet init parameters

Notes:There is no servlet-specific attribute (just use an instance variable).No such thing as session parameters

setMethods:	setAttribute(String name, Object value)	    You CANNOT set Application and Servlet init parameters—they’re set in the DD, remember..

Return type:	Object					    String

Method to get:  getAttribute(String name)		    getInitParameter(String name)

Notes:Don’t forget that attributes must be cast, since the return type is Object
------------------------------------------------------------------------------------------------------------------------------------------------------------

The Three Scopes: Context, Request, and Session.

ContextAttributes: Everyone in the application has access

Session Attributes:: Accessible to only those with access to a specific HttpSession

REQUEST Attributes:: Accessible to only those with access to a specific ServletRequest

**The one who has access can set/remove or just read the attribute

Note: you should think about the implications of garbage collection when you think about scope... some attributes won’t be GC’d until the application is undeployed or dies

The three attribute scopes—context, request, and session—are handled by the ServletContext, ServletRequest, and HttpSession interfaces. The API
methods for attributes are exactly the same in every interface.

***There is a possibility if the scope of the attributes is higher then two resources in the webapp can be modifying them simulatenously...

**ServletContext & HttpSession Objects are sharable across multiple components in the WebApp. They have to be ThreadSafe Objects or Operations you perfom on them should be in Synchronized Fashion.

ContextScope isn't Thread Safe:
------------------------------

Remember, everyone in the app has access to context attributes, and that means multiple servlets. And multiple servlets means you might have multiple threads, since requests are concurrently handled, each in a separate thread.This happens regardless of whether the requests are coming in for the same or different servlets

Imagine Servlet-A

getServletContext().setAttribute(“foo”, “22”);
getServletContext().setAttribute(“bar”, “42”);		1)Lets assume request is first made to this servlet.. It was running and moved to runnable
out.println(getServletContext().getAttribute(“foo”));
out.println(getServletContext().getAttribute(“bar”));	3) Imagine this Thread has got again the chance now it will get the bar as 16 instead 42

Imagaine Servlet-B
getServletContext().setAttribute(“bar”, “16”); 		2) The second Thread has modified the attribute for the bar.


Why didn’t the Servlet spec developers just synchronize the get and set attribute methods in ServletContext, to make the attributes thread-safe?

The spec says you’re on your own if you need to protect attributes. Why force you to have all that synchronization overhead if you don’t need it? Of course some Web Containers do implement that synchronization anyway, but there’s no guarantee so you better be careful.

Options to get ThreadSafety on ServletContext & ServletSession:

***Synchronizing the doGet is Bad Idea?Synchronizing on the doGet() means kissing your concurrency goodbye. If you synchronize doGet(), it means that servlet can handle only ONE client at a time..


Synchronizing the service method means that only one thread in a servlet can be running at a time... but it doesn’t stop other servlets or JSPs from accessing the attribute!Synchronizing the service method would stop other threads from the same servlet from accessing the context attributes, but it won’t do anything to stop a completely different servlet...

You won’t do anything to stop OTHER servlets! Regardless of whether the service methods in other servlets are synchronized or not... it still means other parts of the app have access to the context attributes.

You don’t need a lock on the servlet... you need the lock on the context

If everyone accessing the context has to first get the lock on the context object, then you’re guaranteed that only one thread at a time can be getting or setting the context attribute. But... there’s still an if there. It only works if all of the other code that manipulates the same context attributes ALSO synchronizes on the ServletContext. If code doesn’t ask for the lock, then that code is still free to hit the context attributes. But if you’re designing
the web app, then you can decide to make everyone ask for the lock before accessing the attributes


HttpSessions:
------------

HTTP sessions  is an object used to maintain conversational state with a client.The session persists across multiple requests from the same client. But it’s still just one client we’re talking about..And if it’s one client, and a single client can be in only one request at a time, doesn’t that automatically mean that sessions are thread-safe? In other words, even if multiple servlets are involved, at any given moment there’s only one request from that particular client..


Can you think of a scenario in which there could be more than one request at the same time, from the same client? What do you think? Are session attributes
guaranteed thread-safe?

It is not that the Client is making the requests only from the WebBrowser.. Lets think it is coming from the POSTMAN.. What is now... The client could open a new browser window!So the Container can still use the same session for a client...

HttpSession session = request.getSession();

synchronized(session) {
	session.setAttribute(“foo”, “22”);
	session.setAttribute(“bar”, “42”);
	out.println(session.getAttribute(“foo”));
	out.println(session.getAttribute(“bar”));
}

synchronized(getServletContext()) {
	getServletContext().setAttribute(“foo”, “22”);
	getServletContext().setAttribute(“bar”, “42”);
	out.println(getServletContext().getAttribute(“foo”));
	out.println(getServletContext().getAttribute(“bar”));
}


If you need protection, then use synchronization but remember the standard rule of all forms of locking—keep the lock for the shortest amount of time to accomplish your goal! In other words, don’t synchronize the code that doesn’t access the protected state. Make your synchronized block as small as possible. Get the lock, get in, get what you need, and get the heck out so the lock can release and other threads can run that code.

SingleThreadModel:
-----------------
If a servlet implements this interface, you are guaranteed that no two threads will execute concurrently in the servlet’s service method.

The servlet container can make this guarantee by synchronizing access to a single instance of the servlet, or by maintaining a pool of servlet instances and
dispatching each new request to a free servlet.

The container can maintain a single servlet, but queue every request and process one request completely before allowing the next request to proceed. Or the container can create a pool of servlet instances and process each request concurrently, one per servlet instance.

Queuing Strategy or Multiple Instances:what if one of the instance variables is meant to record how many requests have been processed. The counter variable would have several different counts, and none of them would be right... only the summation of them is correct

Different venodors will be using the different strategy..The specification writers wanted to give the container vendors the opportunity to compete with each other in terms of performance and flexibility.

How will the STM strategy change how I write my servlet code?

If the container uses a queuing strategy, then the “single servlet instance” semantics still hold and you do not need to make any code changes. But if the container uses a pooling strategy, then the semantics of some instance variables might change. For example, if you have an instance variable that holds a “request counter,” then that variable no longer can be counted on when multiple servlet instances are created in the pool. In this case, you could choose to
make the counter variable a class variable instead

Why STM is introduced? To protect the instance varaibles from the ThreadSafety inside the servlet the STM was introduced...but by pooling multiple instances
the semantics of the servlet changes..Furthermore, STM does not help with other variable or attribute scopes.

But are class variables thread-safe?No, they are not, and the STM mechanism does not help with class variables..


Only Request attributes and method parameters & local variables are thread-safe!!!

That’s right. If you have multiple clients making requests on that servlet, that means multiple threads running that servlet code. And all threads have access to the servlet’s instance variables, so instance variables aren’t thread-safe.

But they WOULD be thread-safe if you implemented the SingleThreadModel, right!!Yes, because you’d never have more than one thread for that servlet, so the instance variables would be thread-safe. But of course nobody would ever allow you into the servlets club ever again.

What if synchronize the service method?idiot. The effect of implementing SingleThreadModel is virtually the same as synchronizing the service method. Both can bring a web app to its knees without protecting the session and context state.

But if you’re not supposed to use SingleThreadModel or synchronize the service method, then how DO you make instance variables thread-safe?

Look at a well-written servlet, and chances are you won’t find any instance variables. Or at least any that are non-final. (And since you’re a Java programmer you know that even a final variable can still be manipulated unless it’s immutable..just don’t use instance variables if you need thread-safe state, because all threads for that servlet can step on instance variables.

*****If you want all the threads or (multiple servelts) to access a value, decide which attribute state makes the most sense, and store the value in an attribute.


RequestDispatcher:
------------------

So how do we make another part of the component take over the request? With a RequestDispatcher..

RequestDispatchers have only two methods— forward() and include().Both take the request and response objects (which the component you’re forwarding to will need to finish the job).

Of the two methods, forward() is by far the most popular. It’s very unlikely you’ll use the include method from a controller servlet;however, behind the scenes the include method is being used by JSPs in the <jsp:include> standard action..

You can get a RequestDispatcher in two ways: from the request or from the context. Regardless of where you get it, you have to tell it the web component to which you’re forwarding the request..In other words, the servlet or JSP that’ll take over.

RequestDispatcher view = request.getRequestDispatcher(“result.jsp”);

The getRequestDispatcher() method in ServletRequest takes a String path for the resource to which you’re forwarding the request. If the path starts with
a forward slash (“/”), the Container sees that as “starting from the root of this web app”. If the path does NOT start with a forward slash, it’s considered
relative to the original request...But you can’t try to trick the Container into looking outside the current web app. In other words, just because you have
lots of “../../../” doesn’t mean it’ll work if it takes you past the root of your current web app!

RequestDispatcher view = getServletContext().getRequestDispatcher(“/result.jsp”);

Like the equivalent method in ServletRequest, this getRequestDispatcher() method takes a String path for the resource to which you’re forwarding the
request, EXCEPT you cannot specify a path relative to the current resource (the one that received this request). That means you must start the path with a
forward slash!

RequestDispatcher view = getServletContext().getRequestDispatcher(“/result.jsp”);

Like the equivalent method in ServletRequest, this getRequestDispatcher() method takes a String path for the resource to which you’re forwarding the
request, EXCEPT you cannot specify a path relative to the current resource (the one that received this request). That means you must start the path with a
forward slash..

view.forward(request, response);“Hey, RequestDispatcher, please forward this request to the thing I told you about earlier (in this case, a
JSP), when I first got you. And here’s the request and response, because that new thing is going to need them in order to finish handling the request

You can’t forward the request if you’ve already committed a response!Container will throw an IllegalStateException.

byte[] bytes = new byte[1024];
OutputStream os = response.getOutputStream();
while ((read = is.read(bytes)) != -1) {
os.write(bytes, 0, read);
}
os.flush();
RequestDispatcher view = request.getRequestDispatcher(“result.jsp”);
view.forward(request, response);
os.close();

os.flush();

That’s the line that causes the response to be sent to the client, and at that point, this response is DONE. FINISHED. OVER. You can’t possibly forward the
request at this point, because the request is history!You’ve already responded,

In other words, include() means asking for help in handling the request, but it’s not a complete hand-off. It’s a temporary, rather than permanent transfer of control. With forward(), you’re saying, “That’s it, I’m not do-ing anything else to process this request and response.” But with include(), you’re saying, “I want someone else to do some things with the request and/or response, but when they’re done, I want to finish handling the request and
response myself (although I might decide to do another include or forward after that...”).
	

view.inlcude() view.forward() shouldn't be called after you have commiteed the response...

**** Some Exceptions are thrown by Container like ServletException,IllegalThreadStateExceptionIOException other than the Programmer thrown Exceptions..

Context:(Entire APP)
--------
Visibility:Any part of the web app including servlets, JSPs, ServletContextListeners, ServletContextAttribute-Listeners

Scope:Lifetime of the ServletContext, which means life of the deployed app. If server or app goes down, the context is destroyed (along with itsattributes).
									
Usage:Resources you want the entire application to share, including database connections, JNDI lookup names, email addresses., etc.


HttpSession:(Servlet/JSP/WebService)
------------

Visibility:Any servlet or JSP with access to this particular session. Remember, a session extends beyond a single client request to span multiple requests by the same client, which could go to different servlets.

Life/Scope:The life of the session. A session can be destroyed programmatically or can simply time-out. 

Usgae:Data and resources related to this client’s session, not just a single request. Something that requires an ongoing conversation with the client. A shopping cart is a typical example.

Request:(Servlet/JSP/WebService)
-------

Visibility:Any part of the application that has direct access to the Request object. That mostly means only the Servlets and JSPs to which the request is forwarded using a RequestDispatcher. Also Request-related listeners

Life/Scope:The life of the Request, which means until the Servlet’s service() method completes. In other words, for the life of the thread (stack) handling this request.

Usage:Passing model info from the controller to the view... or any other data specific to a single client request.

If a servlet's RequestDispatcher was obtained using one of the getRequestDispatcher methods (and not using getNamedDispatcher), the following attributes are available in the ServletRequest:

When?	Name					Description
forward	javax.servlet.forward.request_uri	original request URI (see getRequestURI)
forward	javax.servlet.forward.context_path	original context path (see getContextPath)
forward	javax.servlet.forward.servlet_path	original context path (see getServletPath)
forward	javax.servlet.forward.path_info		original path info (see getPathInfo)
forward	javax.servlet.forward.query_string	original query string (see getQueryString)
include	javax.servlet.include.request_uri	included request URI (see getRequestURI)
include	javax.servlet.include.context_path	included context path (see getContextPath)
include	javax.servlet.include.servlet_path	included context path (see getServletPath)
include	javax.servlet.include.path_info		included path info (see getPathInfo)
include	javax.servlet.include.query_string	included query string (see getQueryString)


Forward to Static Content:
--------------------------
 // before or after noon? determine path to the right image in the WAR
boolean isPM = new GregorianCalendar().get(Calendar.AM_PM) == Calendar.PM; 
String resName = "/WEB-INF/images/time" + (isPM ? "PM" : "AM") + ".png";
getServletContext().getRequestDispatcher(resName).forward(request, response);

But sometimes you need to keep conversational state with the client across multiple requests...

A shopping cart wouldn’t work if the client had to make all his choices and then checkout in a single request

Wouldn’t it be cool if the user answers a question, and then the web app responds with a new question based on the answer to the previous ones?

Nobody in the app remembers anything that went on with this client prior to the current request !!!
-------------------------------------------------------------------------------------------------
The model (the business logic) has to figure out whether it has enough information to make a recommendation (in other words, to give final advice), and if it doesn’t, it has to give back the next question to ask the user.

public class BeerExpert {
	public NextResponse getAdvice(String answer) {
	// Process client answer by looking at ALL of the client’s previous answers, as well as the answer from the current request.
	// if there’s enough info, return final advice,else, return the next question to ask
}
}

Note:: Assume the NextResponse class encapsulates the next thing to display for the user, and something that indicates whether it’s the final advice recommendation or another question


It’s supposed to work like a REAL conversation!!!

Kim’s design won’t work unless he can keep track of everything the client has already said during the conversation, not just the answer in the current request. He needs the servlet to get the request parameters representing the client’s choices, and save it somewhere. Each time the client answers a question, the advice engine uses all of that client’s previous answers to come up with either another question to ask, or a final recommendation.

Choices: Servlet becomming the client to the StatefulSession Bean.But that’s way too much overhead (overkill) for this app! Besides, Kim’s hosting provider doesn’t have a full J2EE server with an EJB Container. He’s got Tomcat (a web Container) and that’s it

Use a database:His hosting provider does allow access to MySQL, so he could do it. He could write the client’s data to a database... but this is nearly as much of a runtime performance hit as an enterprise bean would be, possibly more. And way more than he needs.

***Login is Success then Sesssion Is created.. User Logout Then Session Object is destroyed.

We can use an HttpSession object to hold the conversational state across multiple requests. In other words, for an entire session with that client...

Actually, Kim would still have to use an HttpSession even if he did choose another option such as a database or session bean, because if the client is a web browser, Kim still needs to match a specific client with a specific database key or session bean ID, and as you’ll see in this chapter, the HttpSession takes care of that identification

An HttpSession object can hold conversational state across multiple requests from the same client.In other words, it persists for an entire session with a specific client..We can use it to store everything we get back from the client in all the requests the client makes during a session.

The HTTP protocol uses stateless connections. The client browser makes a connection to the server, sends the request, gets the response, and closes the connection. In other words, the connection exists for only a single request/response.Because the connections don’t persist, the Container doesn’t recognize that the client making a second request is the same client from a previous request. As far as the Container’s concerned, each request is from a new client.

Why can’t the Container just use the IP address of the client? It’s part of the request, right?

To the server, your IP address is the address of the router, so you have the same IP address as everybody else on that network! So that wouldn’t help. You’d have the same problem—the stuff Jim puts in his shopping cart might end up in Pradeep’s cart, and vice versa. So no, IP address isn’t a solution for uniquely identifying a specific client on the internet.


Well then how about security info? If the user is logged in, and the connection is secure (HTTPS), the Container knows EXACTLY who the client is, right

Yes, if the user is logged in and the connection is secure, the Container can identify the client and associate him with a session. But that’s a big if. Most good web site design says, “don’t force the user to log in until it really matters, and don’t switch on security (HTTPS) until it really matters.” If your users are just browsing, even if they’re adding items to a shopping cart, you probably don’t want the overhead (for you or the user) of having them authenticate to the system until they decide to checkout! So, we need a mechanism to link a client to a session that doesn’t require a securely authenticated client

What is the process container uses to identify the prvious client requests?

The idea is simple: on the client’s first request, the Container generates a unique session ID and gives it back to the client with the response. The client sends back the session ID with each subsequent request. The Container sees the ID, finds the matching session, and associates the session with the request

How do the Client and Container exchange Session ID info?

Somehow, the Container has to get the session ID to the client as part of the response, and the client has to send back the session ID as part of the request. The simplest and most common way to exchange the info is through cookies

HttpResponse:
------------
HTTP/1.1 200 OK
Set-Cookie: JSESSIONID=0AAB6C8DE415	
	    ------------------------- Cookie	
Content-Type: text/html
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close

HTTP REQUEST:
------------
POST /select/selectBeerTaste2.do HTTP/1.1
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=0AAB6C8DE415
        ------------------------- Cookie
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate


*** For the GET HttpRequests the JSESSIONID will be in the Request Headers only

The best part: the Container does virtually all the cookie work!

Our Role: Request.getSession();

Container Role: Container takes care of generating the SessionId 2)Creating the new Cookie Object 3)Stuffing the sessionId into the Cookie 4)Stuffing the Cookie into the Response Header..

And on subsequent requests, the Container gets the session ID from a cookie in the request, matches the session ID with an existing session, and associates that session with the current request.

HttpSession session = request.getSession();
------------------------------------------
You don’t make the new HttpSession object yourself.
You don’t generate the unique session ID.
You don’t make the new Cookie object.
You don’t associate the session ID with the cookie.
You don’t set the Cookie into the response
(under the Set-Cookie header).All the cookie work happens behind the scenes

Cookie::Cookie is the small piece of information. String value pair that we need from the client recognise.

HttpSession session = request.getSession();

IF (the request includes a session ID cookie)
	find the session matching that ID

ELSE IF (there’s no session ID cookie OR there’s no current session matching the session ID)
	create a new session.

All the cookie work happens behind the scenes.

What if I want to know whether the session already existed or was just created?


HttpSession session = request.getSession();getSession() returns a session no matter what.... but you can’t tell if it’s a new session unless you ask the session

if (session.isNew()) {}	isNew() returns true if the client has not yet responded with this session ID.

**You get a session by calling request.getSession(), but is that the only way to get the session? Can’t you get it from the ServletContext?

But there is another way that you can get a session... from a session event object. Remember, a listener class isn’t a servlet or JSP—it’s just a class that wants to know about the events. For example, the listener might be an attribute trying to find out when it (the attribute object) was added to or removed from a session..The event-handling methods defined by the listener interfaces related to sessions take an argument of type HttpSessionEvent, or its subclass, HttpSessionBindingEvent. And HttpSessionEvent has a getSession() method!So, if you implement any of the four listener interfaces related to sessions (we’ll get to that later in the chapter), you can access the session through the event-handling callback methods. For example, this code is from a class that implements the HttpSessionListener interface

public void sessionCreated(HttpSessionEvent event) {
HttpSession session = event.getSession();
// event handling code
}

What if I want ONLY a pre-existing session?It might not make sense for the checkout servlet, for example, to start a new session.

So there’s an overloaded getSession(boolean) method just for that purpose. If you don’t want to create a new session, call getSession(false), and you’ll get either null, or a pre-existing HttpSession

HttpSession session = request.getSession(false);	the no-arg getSession() would NEVER return null
Passing “false” means the method returns a pre-existing session, or null if there was no session associated with this client

if (session==null) {
out.println(“no session was available”);
out.println(“making one...”);
session = request.getSession();
} else {
out.println(“there was a session!”);	Here we KNOW we’re making a new session.
}

So it looks like getSession(true) is exactly the same as getSession()...

Right again. The no-arg version is a convenience for those times when you know that you always want a session, new or existing. The version that takes a boolean is useful when you know that you don’t want a new session, or when the decision of whether to make a new session happens at runtime (and you’re passing a variable into the getSession(someBoolean) method).

What if the cookies are disabled?You can do sessions even if the client doesn’t accept cookies.. But you have to do little more extra work

A client with cookies disabled will ignore “Set-Cookie” response headers..If your app depends on sessions, you need a different way for the client and Container to exchange session ID info. Lucky for you, the Container can handle a cookie-refusing client, but it takes a little more effort from you.

If you use the session code on the previous pages—calling getSession() on the request—the Container tries to use cookies. If cookies aren’t enabled, it means the client will never join the session. In other words, the session’s isNew() method will always return true

A client with cookies disabled will ignore “Set-Cookie” response headers?

If a client doesn’t accept cookies, you won’t get an exception. No bells and sirens going off to tell you that your attempt to have asession with this client went wrong. No, it just means the client ignores your attempt to set a cookie with the session ID.In your code, if you do NOT use URL rewriting, it means that getSession() will always return a NEW session (i.e. one that always returns “true” when you call isNew() on it). The client simply never sends
back a request that has a session ID cookie header.

URL Rewriting:
-------------

Remember the goal is for the client and Container to exchange session ID info. Passing cookies back and forth is the simplest way to exchange session IDs, but if you can’t put the ID in a cookie, where can you put it? URL rewriting takes the session ID that’s in the cookie and sticks it right onto the end of every URL that comes in to this app.

Imagine a web page where every link has a little bit of extra info (the session ID) tacked onto the end of the URL. When the user clicks that “enhanced” link, the request goes to the Container with that extra bit on the end, and the Container simply strips off the extra part of the request URL and uses it to find the matching session

DOes you change every url that you write as part of the webapp with Url Rewrting? Only the links that want the sessionState Compulsory.

In the HttpRespone Dynamic Reposne we should send using JSP always..

HTTP/1.1 200 OK
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close

<html>					Assume JSP:
<body>				***We add the session ID to the end of all the URLs in the HTML we send back in the Response.
<a href=”http://www.wickedlysmart.com/BeerTest.do;jsessionid=0AAB6C8DE415“>click me</a>
</body>
</html>

GET /BeerTest.do;jsessionid=0AAB6C8DE415	The session ID comes back as “extra” info stuck to the end of the Request URL. (The semicolon separator is 						vendor-specific
HTTP/1.1
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/
plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,defl ate

***URL rewriting kicks in ONLY if cookies fail, and ONLY if you tell the response to encode the URL

If you want the Container to always default to using cookies first, with URL rewriting only as a last resort, you can relax. That’s exactly how it works (except for the first time, but we’ll get to that in a moment). But if you don’t explicitly encode your URLs, and the client won’t accept cookies, you don’t get to use sessions. If you do encode your URLs, the Container will first attempt to use cookies for session management, and fall back to URL rewriting only if the cookie approach fails.

response.setContentType(“text/html”);
PrintWriter out = response.getWriter();
HttpSession session = request.getSession();
out.println(“<html><body>”);
out.println(“<a href=\”” + response.encodeURL(“/BeerTest.do”) + “\”>click me</a>”);
out.println(“</body></html>”);

What encodeURL does?

Wait a minute... how DOES the Container know that cookies aren’t working? At what point does the Container decide to use URL rewriting?

A really dumb Container doesn’t care whether cookies work or not—the dumb Container will always attempt to send the cookie AND do URL rewriting each time, even if cookies are working. But here’s how a decent Container handles it:When the Container sees a call to getSession(), and the Container didn’t get a session ID with the client’s request, the Container now knows that it must attempt to start a new session with the client. At this point, the Container doesn’t know if cookies will work, so with this first response back to the client, it tries BOTH cookies and URL rewriting

Why can’t it try cookies first... and do URL rewriting on the next response if it doesn’t get back a cookie?

Remember, if the Container doesn’t get a session ID from the client, the Container won’t even KNOW that this is the next request from that client. The Container won’t have any way to know that it tried cookies the last time, and they didn’t work. Remember, the ONLY way the Container can recognize that it has seen this client before is if the client sends a session ID!So, when the Container sees you call request.getSession(), and realizes it needs to start a new session with this client, the Container sends the response with both a “Set-Cookie” header for the session ID, and the session ID appended to the URLs (assuming you used response.encodeURL()).Now imagine the next request from this client—it will have the session ID appended to the request URL, but if the client accepts cookies, the request will ALSO have a session ID cookie. When the servlet calls request.getSession(), the Container reads the session ID from the request, finds the session, and thinks to itself,This client accepts cookies, so I can ignore the response.encodeURL() calls. In the response, I’ll send a cookie since I know that works, and there’s no need for any URL rewriting, so I won’t bother...

You might have a scenario in which you want to redirect the request to a different URL, but you still want to use a session.
There’s a special URL encoding method just for that:

response. encodeRedirectURL(“/BeerTest.do”)

What about all my static HTML pages... they are full of <a href> links. How do I do URL rewriting on those static pages?

You can’t! The only way to use URL rewriting is if ALL the pages that are part of a session are dynamically-generated! You can’t hard-code session ID’s, obviously, since the ID doesn’t exist until runtime. So, if you depend on sessions, you need URL rewriting as a fall-back strategy. And since you need URL rewriting, you have to dynamically generate the URLs in the response HTML! And that means you have to process the HTML at runtime.

Yes, this is a performance issue. So you must think very carefully about the places where sessions matter to your app, and whether sessions are critical to have or merely good to have

**For Sessions Management you need to depend on the Cookies or URL Rewriting 

URL rewriting is automatic but only if you encode your URLs. YOU have to run all your URLs through a method of the response object—encodeURL() or
encodeRedirectURL()—and the Container does everything else

You can do URL-rewriting in a JSP, and there’s even a simple JSTL tag that makes it easy, <c:URL>, that you’ll see when you get to the chapter on using custom tags...

Yes, URL rewriting is handled in a vendor-specific way. Tomcat uses a semicolon “;” to append the extra info to the URL. Another vendor might use a comma or something else. And while Tomcat adds “jsessionid=” in the rewritten URL, another vendor might append only the session ID itself. The point is, whatever the Container uses as the separator is recognized by the Container when a request comes in. So when the Container sees the separator that it uses (in other words, the separator that it added during URL rewriting), it knows that everything after that is “extra info” that the Container put there.


Don't ever do this:

String sessionID = request.getParameter(“jsessionid”)

And you shouldn’t see a custom “jsessionid” header in a request or response:

POST /select/selectBeerTaste.do HTTP/1.1
User-Agent: Mozilla/5.0
JSESSIONID: 0AAB6C8DE415	Don’t do this! It’s supposed to be a header!

In fact, the ONLY place a “jsessionid” belongs is inside a cookie header:
POST /select/selectBeerTaste.do HTTP/1.1
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=0AAB6C8DE415	This is right, but you don’t do it yourself

POST /select/selectBeerTaste.do;jsessionid=0AAB6C8DE415--->


*** If it is the GET Request or the POST request the in the URL Rewriting the jsessionId will be useful. That will be used for HACKING. So whenever you login to the website you should logout/invalidate the session before you come out of any site..


Getting rid of sessions:
========================

Changes the mind, Client Browser crashes or then completes the session by making a purchase and computer crashes.. Client didn't hit his logout Button

Now how long the session Object stays !!The point is, session objects take resources. You don’t want sessions to stick around longer than necessary. Remember, the HTTP protocol doesn’t have any mechanism for the server to know that the client is gone

But how does the Container (or you) know when the client walked away? How does the Container know when the client’s browser crashed? How does the Container know when it’s safe to destroy a session..

What is the mechanisms the container uses to manage the sessions?

Some distributed apps use leasing as a way for the server to know when a client is gone. The client gets a lease from the server, and then must renew the lease at specified intervals to tell the server that the client is still alive. If the client’s lease expires, the server knows it can destroy any resources it was holding for that client..


HttpSessionInterface Methods:

getCreationTime() 	Returns the time the session was first created.
>To find out how old the session is. You might want to restrict certain sessions to a fixed length of time. For example, you might say, Once you’ve logged in, you have exactly 10 minutes to complete this form...

getLastAccessedTime()   Returns the last time the Container got a request with this session ID (in milliseconds).
>To find out when a client last accessed this session. You might use it to decide that if the client’s been gone a long time you’ll send them an email asking if they’re coming back. Or maybe you’ll invalidate() the session

setMaxInactiveInterval() Specifies the maximum time, in seconds, that you want to allow between client requests for this session
>To cause a session to be destroyed after a certain amount of time has passed without the client making any requests for this session. This is one way to reduce the amount of stale sessions sitting in your server

getMaxInactiveInterval() Returns the maximum time, in seconds, that is allowed between client requests for this session
>To find out how long this session can be inactive and still be alive. You could use this to judge how much more time an inactive client has before the session will be invalidated

invalidate()		Ends the session. This includes unbinding all session attributes currently stored in this session.
>To kill a session if the client has been inactive or if you KNOW the session is over (for example, after the client does a shopping check-out or logs out). The session instance itself might be recycled by the Container, but we don’t care. Invalidate means the session ID no longer exists, and the attributes are removed from the session object.

Setting session timeout::  
------------------------

Good news: you don’t have to keep track of this yourself. See those methods on the opposite page? You don’t have to use them to get rid of stale (inactive) sessions. The Container can do it for you

Three ways sessions can die: > It times out  > You call invalidate() on the session object > The application goes down (crashes or is undeployed)

Configuring session timeout in the DD

<web-app ...>
<servlet>
...
</servlet> <session-config>
<session-timeout>15</session-timeout>***The 15 is in minutes. This says if the client doesn’t make any requests on this session for 15 minutes, kill it...
</session-confi g>
</web-app>

If you want to change the session-timeout value for a particular session instance (without affecting the timeout length for any other sessions in the app):

session.setMaxInactiveInterval(20*60);The argument to the method is in seconds, so this says if the client doesn’t make any requests on the session for 20 minutes, kill it.

Timeouts in the DD are in MINUTES:Here’s a big inconsistency to watch out for... you specify timeouts in the DD using MINUTES, but if you set a
timeout programmatically, you specify SECONDS..

HttpSession session = request.getSession();
session.setAttribute(“foo”, “42”);
session.setMaxInactiveInterval(0);
String foo = (String) session.getAttribute(“foo”);
if (session.isNew()) {
out.println(“This is a new session.”);
}

Result: a runtime exception (IllegalStateException) is thrown because you can’t call isNew() on the session AFTER the session becomes invalid. Setting the maximum inactive interval to 0 means the session times out and is invalidated immediately!!

Cookies for the other things:
----------------------------

Although cookies were originally designed to help support session state, you can use custom cookies for other things. Remember, a cookie is nothing more than a little piece of data (a name/value String pair) exchanged between the client and server. The server sends the cookie to the client, and the client returns the cookie when the client makes another request.

One cool thing about cookies is that the user doesn’t have to get involved—the cookie exchange is automatic (assuming cookies are enabled on the client, of course).By default, a cookie lives only as long as a session; once the client quits his browser, the cookie disappears. That’s how the “JSESSIONID” cookie works. But you can tell a cookie to stay alive even AFTER the browser shuts down.

<session-config>
    <session-timeout>720</session-timeout> <!-- 720 minutes = 12 hours -->
    <cookie-config>
        <max-age>43200</max-age> <!-- 43200 seconds = 12 hours -->		Client can comeback and use the same session..
    </cookie-config>
</session-config>

****Stale sessions on the server is increasing but they have some architecture that stores the huge amount of the data...


You can tell a cookie to stay alive even AFTER the browser shuts down.That way, your web app can still get the cookie information even though the session with that client is long gone. Imagine that Kim wants to display the user’s name each time he returns to the beer site. So he sets the cookie the first time he receives the client’s name, and if he gets the cookie back with a request, he knows not to ask for the name again. And it doesn’t matter if the user restarted his browser and hasn’t been on the site for a week!

How the Cookies to the specific site are sent ? How cookies are stored in the webbrowser?

When we access the flipkart does only the flipkart Cookies sent or all the Websites cookies are sent?

HTTP/1.1 200 OK
Set-Cookie: username=TomasHirsch		***Server sends this first
Content-Type: text/html
Content-Length: 397
Date: Wed, 19 Nov 2003 03:25:40 GMT
Server: Apache-Coyote/1.1
Connection: close
<html>
...
</html>

POST /select/selectBeerTaste2.do HTTP/1.1
Host: www.wickedlysmart.com
User-Agent: Mozilla/5.0
Cookie: username=TomasHirsch			***Client sends this back
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,defl ate

Everything you need to do with cookies has been encapsulated in the Servlet API in three classes: HttpServletRequest, HttpServletResponse, and Cookie.

HttpServletRequest:getCookies()

HttpServletResponse:addCookie()

javax.servlet.http. Cookie	What is Domain? What is Path?
--------------------------

Cookie(String, String)

String getDomain() int getMaxAge() String getName() String getPath() boolean getSecure() String getValue()
void setDomain(String) void setMaxAge(int) void setPath(String) void setValue(String)

Cookie[] cookies = request.getCookies();
for (int i = 0; i < cookies.length; i++) {
Cookie cookie = cookies[i];
if (cookie.getName().equals(“username”)) {			There’s no getCookie(String) method... you can only get cookies in a Cookie
								array, and then you have to loop over the array to find the one you want.
String userName = cookie.getValue();
out.println(“Hello “ + userName);
break;
}

Cookie Test:
-----------

public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
response.setContentType(“text/html”);
String name = request.getParameter(“username”);
Cookie cookie = new Cookie(“username”, name);
cookie.setMaxAge(30*60);
response.addCookie(cookie);
RequestDispatcher view = request.getRequestDispatcher(“cookieresult.jsp”);
view.forward(request, response);
}

The fact that we’re forwarding to a JSP doesn’t change the cookie setting. The cookie is already in the response by the time the request is forwarded to the JSP...

public class CheckCookie extends HttpServlet{		Another servlet getting cookies

public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
response.setContentType(“text/html”);
PrintWriter out = response.getWriter();
Cookie[] cookies = request.getCookies();
if ( cookies != null ) {
for (int i = 0; i < cookies.length; i++) {
Cookie cookie = cookies[i];
if (cookie.getName().equals(“username”)) {
String userName = cookie.getValue();
out.println(“Hello “ + userName);
break;
}
}
}

When you add a header to a response, you pass the name and value Strings as arguments: response.addHeader(“foo”, “bar”);
But when you add a Cookie to the response, you pass a Cookie object. You set the Cookie name and value in the Cookie constructor.

Cookie cookie = new Cookie(“name”, name);
response.addCookie(cookie);

And remember, too, that there’s both a setHeader() and an addHeader() method (addHeader adds a new value to an existing header, if there is one, but setHeader replaces the existing value). But there’s NOT a setCookie() method. There’s only an addCookie() method!


Lifecycle of Sessions:
---------------------

The session was created
When the Container first creates a session. At this point, the session is still considered new (in other words, the client has not yet sent a request with the session ID).

The session was destroyed
When the Container invalidates a session (because the session timed out or some part of the application called the session’s invalidate() method).

An attribute was added
When some part of the app calls setAttribute() on the session.

An attribute was removed
When some part of the app calls removeAttribute() on the session.

An attribute was replaced
When some part of the app calls setAttribute() on the session, and the name of the attribute has already been bound to the session


The session is about to be passivated
When the Container is about to migrate (move) the session into a different VM. Called before the session moves, so that attributes have a chance to prepare themselves for migration.

The session has been activated
When the Container has just migrated (moved) the session into a different VM. Called before any other part of the app can call getAttribute() on the session, so the just-moved attributes have a chance to get themselves ready for access.


HttpSessionBindingListener:: The attribute class itself gets notified..

public class Dog implements HttpSessionBindingListener {

public void valueBound(HttpSessionBindingEvent event) {
// code to run now that I know I’m in a session
}
public void valueUnbound(HttpSessionBindingEvent event) {
// code to run now that I know I am no longer part of a session
}

}
** We don't need to declare the Binding Listeners in the DD..

If an attribute class (like the Dog class here) implements the HttpSessionBindingListener, the Container calls the event-handling callbacks (valueBound() and valueUnbound()) when an instance of this class is added to or removed from a session. That’s it. It just works. But this is NOT true for the other session-related listeners. HttpSessionListener and HttpSessionActivationListener must be registered in the DD, since they’re related to the session itself, rather than an individual attribute placed in the session

** Who creates the Objects of the Listener? When it creates the Object First time when the event is triggered or before only?

we talked briefly about distributed web apps, where the pieces of the app might be replicated across multiple nodes in the network. In a clustered environment, the Container might do load-balancing by taking client requests and sending them out to JVMs (which may or may not be on different physical boxes, but that doesn’t matter to us). The point is, the app is in multiple places.

That means each time the same client makes a request, the request could end up going to a different instance of the same servlet. In other words, request A for Servlet A could happen on one VM, and request B for Servlet A could end up on a different VM. So the question is, what happens to things like ServletContext, ServletConfig, and HttpSession objects?


Only HttpSession objects (and their attributes) move from one VM to another.
There is one ServletContext per VM. There is one ServletConfig per servlet, per VM. But there is only one HttpSession object for a given session ID per web app, regardless of how many VM’s the app is distributed across.

How to replicate the APP in the same machine on multiple VMS by using the Tomcat/Weblogic/Websphere?

How to replicate the one APP in different machine?

Everything is duplicated in the second server EXCEPT the HttpSession objects.Sessions live in only ONE place at any given moment. The same session ID for a given web app will NEVER appear in two VMs at the same time


App server vendor handles clustering and web app distribution varies with each vendor, and there’s no guarantee in the J2EE spec that a vendor has to support distributed apps. But the picture here gives you a high-level idea of how it works. The key point is that while other parts of the app are replicated on each node/VM,the session objects are moved. And that is guaranteed. In other words, if the vendor does support distributed apps, then the Container is required to migrate sessions across VMs. And that includes migrating session attributes as well.

A Container is required to migrate Serializable attributes (which assumes that all instance variables within the attribute are either Serializable or null).

But a Container is not required to use Serialization as the means for migrating the HttpSession object! What does this mean to you? Simple: make sure your attribute class types are Serializable and you never have to worry about it. But if they’re not Serializable (which could be because one of the
attribute object’s instance variables is not Serializable), have your attribute object class implement HttpSessionActivationListener and use the activation/passivation callbacks to work around

The Container is not REQUIRED to use Serialization, so there’s no guarantee that readObject() and writeObject() will be called on a Serializable attribute or one of its instance variables

If you’re familiar with Serialization, you know that a class that implements Serializable can also choose to implement a writeObject() method, called by the VM whenever an object is serialized, and a readObject() method, called when an object is deserialized. A Serializable object can use these methods to, for example, set non-Serializable fields to null during Serialization (writeObject()) and then restore the fields during deserialization (readObject()). (If you’re NOT familiar with the details of Serialization, don’t worry about it.) But the methods won’t necessarily be called during session migration! So if you need to save and restore instance variable state in your attribute, use HttpSessionActivationListener, and use the two event call- backs (sessionDidActivate() and sessionWillPassivate()) the way you’d use readObject() and writeObject().

public class BeerSessionCounter implements HttpSessionListener {
	static private int activeSessions;
public static int getActiveSessions() {
	return activeSessions;
}
public void sessionCreated(HttpSessionEvent event) {
	activeSessions++;
}
public void sessionDestroyed(HttpSessionEvent event) {
	activeSessions--;
}
}

This class will be deployed in WEB-INF/classes like all the other web-app classes, so all servlets and other helper classes can access this method..

FYI- this wouldn’t work correctly if the app is distributed on multiple JVMs, because there is no way to keep the static variables in sync. If the class is loaded on more than one JVM, each class will have its own value for the static counter variable

what the heck are you printing to? Where does System.out go in a web app?

Wherever this Container chooses to send it (which may or may not be configurable by you). In other words, in a vendor-specific place, often a log file. Tomcat puts the output in tomcat/logs/catalina.log. You’ll have to read your server docs to find out what your Container does with standard output.


public class Dog implements HttpSessionBindingListener, HttpSessionActivationListener,Serializable {
private String breed;

// imagine more instance variables, including
// some that are not Serializable
// imagine constructor and other getter/setter methods
public void valueBound(HttpSessionBindingEvent event) {
// code to run now that I know I’m in a session
}

public void valueUnbound(HttpSessionBindingEvent event) {
// code to run now that I know I am no longer part of a session
}

public void sessionWillPassivate(HttpSessionEvent event) {
// code to get my non-Serializable fields in a state
// that can survive the move to a new VM
}

public void sessionDidActivate(HttpSessionEvent event) {
// code to restore my fields... to redo whatever I undid
// in sessionWillPassivate()
}
}

***A session whose timeout period has been set to -1 will never expire.A session will become invalid after a timeout period defined by the servlet container.

** The app1 session Objects are not accessible inside the app-2. Suppose from your app-1 you redirect request to app2 & want to use the same session then it is not possible.. You have to configure within the context.xml to have the Sharable SessionContext..

<Valve className="org.apache.catalina.valves.PersistentValve"/>
    <Manager className="org.apache.catalina.session.PersistentManager">
        <Store className="org.apache.catalina.session.FileStore" directory="${catalina.base}/temp/sessions"/>
    </Manager>

https://www.cacheonix.org/articles/How_to_Distribute_Java_Application_on_Multiple_JVMs.htm

Multi Layered Architecture..


							JSP:
							----

JSP finally will be become servlet..It’s a lot like any other servlet, except that the servlet class is written for you—by the Container..

The Container takes what you’ve written in your JSP, translates it into a servlet class source (.java) file, then compiles that into a Java servlet class. After that, it’s just servlets all the way down, and the servlet runs in exactly the same way it would if you’d written and compiled the code yourself. In other words, the Container loads the servlet class, instantiates and initializes it, makes a separate thread for each request, and calls the servlet’s service() method

container Translates		   Compiles		  Loaded and Intialized	
MyJSP.jsp----------->MyJSP_jsp.java--------->MyJSP_jsp.class---------------------->MYJSP_jsp(ServletObject)


Questions:
---------
Where does each part of your JSP file end up in the servlet source code?Do you have access to the “servletness” of your JSP page?For example, does a JSP have a concept of a ServletConfig or ServletContext..What are the types of elements you can put in a JSP?What’s the syntax for the different elements in a JSP?What’s the lifecycle of a JSP, and can you step into the middle of it?How do the different elements in a JSP interact in the fi nal servlet?

You can put regular old Java code in a JSP using a scriptlet—which just means Java code within a <% ... %> tag.

<html>
<body>
The page count is:
<%
out.println(Counter.getCount()); %>	The “out” object is implicitly there. Everything between <% and %> is a scriptlet, which is just plain old Java
</body>
</html>

The only tricky part is making sure that the Counter class is available to the JSP, and that’s easy—just be sure the Counter class is in the WEB-INF/
classes directory of the web app. She accesses the JSP directly in the browser at http://localhost:8080/testJSP1/BasicCounter.jsp

When You have some changes to JSP.. Does changes get reflected immediately or it needs to deployed again? Reflected Immediately

On First request to the jsp ..The jsp will be converted to java file and compile it and intialize.. If you make some changes then does the jsp need to reconverted and recompile the file and load and intialize.(Yes.. All that happen on fly without even deploying again)

For the Normal Servlets you need to need to do the maven compile.. But it is not the case with the JSP's

****Container takes care of the conversion of the JSP file to .java file..

A directive is a way for you to give special instructions to the Container at page translation time. Directives come in three flavors: page, include, and taglib

<%@ page import=”foo.*” %> 		Importing the package..See carefully there is no semicolon at end..
<%@ page import=”foo.*,java.util.*” %>	Importing multiple packages..Use a comma to separate the packages. The quotes go around the entire list of packages

<%out.println(Counter.getCount()); %> Scriplets are like the regualr java statements ..All staements should end with ;

<%="Counter value is "+ Counter.getCount()  %> Expressions doesn't end with.. It avoids using the out Object

<%! %>

If you did put a semicolon in your expression	<%= Counter.getCount(); %>

That would be bad. It would mean this:out.print(Counter.getCount(););Yikes!! This will never compile.

Well, if you’re supposed to use expressions INSTEAD of putting out.println() into a scriptlet, then why is the implicit “out” there?

You probably won’t use the implicit out variable from within your JSP page, but you might pass it to something else... some other object that’s part of your app that does not have direct access to the output stream for the response

In an expression, what happens if the method doesn’t return anything?

You’ll get an error!! You cannot, MUST NOT use a method with a void return type as an expression. The Container is smart enough to figure out that there won’t be anything to print if the method has a void return type

Why does the import directive start with the word “page”? Why is it <%@ page import...%> instead of just <%@ import... %>.

Good question! Rather than having a whole big pile of different directives, the JSP spec has just three JSP directives, but the directives can have attributes. What you called “the import directive” is actually “the import attribute of the page directive

What are the other attributes for the page directive?

Remember, the page directive is about giving the Container information it needs when translating your JSP into a servlet. The attributes we care about (besides import) are session, contentType, and isELIgnored (we’ll come back to these later in the chapter).

<html><body>		The argument to the out.write
<% int count=0; %>
The page count is now:	The argument to out.write
<%= ++count %>		The argument to the out.print
</body></html>


public class basicCounter_jsp extends SomeSpecialHttpServlet {

     public void _jspService(HttpServletRequest request,HttpServletResponse response)throws java.io.IOException,ServletException {
	
	PrintWriter out = response.getWriter();
	response.setContentType(“text/html”);
	out.write(“<html><body>”);
	int count=0;
	out.write(“The page count is now:”);
	out.print( ++count );
	out.write(“</body></html>”);
}

}

***The Container puts all the code into a generic service method. Think of it as a catch-all combo doGet/doPost...The Get/Post sends to JSP directly

Every you invoke the jsp value of count is created and instatinated with 0. So every time we get the value=1.

But there’s another JSP element called a declaration			<%! int count=0; %>

Put an exclamation point (!) after the percent sign (%). This isn’t an expression—you NEED the semicolon here..

JSP declarations are for declaring members of the generated servlet class. That means both variables and methods! In other words, anything between the <%! and %> tag is added to the class outside the service method. That means you can declare both static variables and methods.

<%! int count=0; %>	This isn’t an expression—you NEED the semicolon here!

****This is also servlet so not recommeded to take the class level varaibles they are subjected to Multiple Threads modifications..

Time to see the REAL generated servlet:
-------------------------------------

1) Looks at the directives, for information it might need during translation

2) Creates an HttpServlet subclass. For Tomcat 5, the generated servlet extends: org.apache.jasper.runtime.HttpJspBase

3) If there’s a page directive with an import attribute, it writes the import statements at the top of the class file, just below the package statement.
   For Tomcat 5, the package statement (which you don’t care about) is: package org.apache.jsp;

4)If there are declarations, it writes them into the class file, usually just below the class declaration and before the service method. Tomcat 5 declares   one static variable and one instance method of its own

5)Builds the service method. The service method’s actual name is _jspService(). It’s called by the servlet superclass’ overridden service() method, and receives the HttpServletRequest and HttpServletResponse. As part of building this method, the Container declares and initializes all the implicit objects. (You’ll see more implicit objects when you turn the page.)

6)Combines the plain old HTML (called template text), scriptlets, and expressions into the service method, formatting everything and writing it to the PrintWriter response output.


public final class BasicCounter_jsp extends org.apache.jasper.runtime.HttpJspBase implements org.apache.jasper.runtime.JspSourceDependent {
 int count=0;
 private static java.util.Vector _jspx_dependants;
  public java.util.List getDependants() {
		return _jspx_dependants;
}
public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {
	JspFactory _jspxFactory = null;				
	PageContext pageContext = null;				** This service method can handle all the doGet & doPost requests..
	HttpSession session = null;
	ServletContext application = null;			The Container declares a bunch of its own local variables, including those that represent 								the “implicit objects” your code might need, like “out” and “request
	ServletConfig config = null;
	JspWriter out = null;
	Object page = this;
	JspWriter _jspx_out = null;
	PageContext _jspx_page_context = null;

	try {
	_jspxFactory = JspFactory.getDefaultFactory();
	response.setContentType(“text/html”);
	pageContext = _jspxFactory.getPageContext(this, request, response,null, true, 8192, true);
	_jspx_page_context = pageContext;
	application = pageContext.getServletContext();
	config = pageContext.getServletConfig();
	session = pageContext.getSession();
	out = pageContext.getOut();
	_jspx_out = out;
	out.write(“\r<html>\r<body>\r”);
	out.write(“\rThe page count is now: \r”);
	out.print( ++count );
	out.write(“\r</body>\r</html>\r”);
	} 
	catch (Throwable t) {
		if (!(t instanceof SkipPageException)){
			out = _jspx_out;
		if (out != null && out.getBufferSize() != 0)
			out.clearBuffer();
		if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
	}
} 	finally {
	if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);
}
}
}
}

The implicit Objects:

With implicit objects, you can write a JSP knowing that your code is going to be part of a servlet. In other words, you can take advantage of your servletness, even though you’re not directly writing a servlet class yourself

JspWriter		-	out
HttpServletRequest	-	request	
HttpServletResponse	-	response
HttpSession		-	session
ServletContext		-	application
ServletConfig		-	config
Throwable		-	exception		This implicit object is only available to designated “error pages”.
PageContext		-	pageContext
Object			-	page

But now there’s a NEW fourth scope, “page-level”, and page-scoped attributes are stored in pageContext

PageContext:A PageContext encapsulates other implicit objects, so if you give some helper object a PageContext reference, the helper can use that reference to get references to the OTHER implicit objects and attributes from all scopes.

What’s the difference between a JspWriter and a PrintWriter I get from an HttpServletResponse?

The JspWriter is not in the class hierarchy of PrintWriter, so you can’t use it in place of a PrintWriter. But it has most of the same print methods, except it adds some buffering capabilities


JSP Comments:
-------------
The template text inside the jsp should go into the HTML Comment: <!-- HTML comment -->

The <% %> <%! %> <%= %> JSP elements should go inside the JSP Comments..<%-- JSP comment --%>

If you’re a Java programmer with very little HTML experience, you might find yourself typing:
// this is a comment without thinking twice. But if you do, then unless it’s within a scriptlet or declaration tag, you’ll end up DISPLAYING that to the client as part of the response. In other words, to the Container, those two slashes are just more template text, like “Hello” or “Email is:”.

HTML Comments---> Use them only for the Template Text  JSP Comments---> Use them for the JSP Elments Java Comments-->Use them inside the jsp elements

HTML Comments are passed on but browser will not intrpret.. JSP Comments are removed during the pageTranslation..


JspPage:	All Superinterfaces: javax.servlet.Servlet All Known Subinterfaces: HttpJspPage
--------
 
Methods:
--------
public void jspDestroy()    public void jspInit()... You can override this methods.

public void _jspService(ServletRequestSubtype request,ServletResponseSubtype response)throws ServletException, IOException; You shouldn't ovveride
          

HttpJspPage:	All Superinterfaces: JspPage, javax.servlet.Servlet
-----------
void	_jspService(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)..

The _jspService()method corresponds to the body of the JSP page.
 

HttpJspBase:
---------

All Implemented Interfaces:javax.servlet.jsp.HttpJspPage, javax.servlet.jsp.JspPage, java.io.Serializable, javax.servlet.Servlet,javax.servlet.ServletConfig

Fields:protected  javax.servlet.jsp.PageContext	pageContext

Methods:
-------

abstract  void	_jspService(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
void destroy()
java.lang.String getServletInfo()
void init(javax.servlet.ServletConfig config)
void jspDestroy()
void jspInit()
void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) ****Entry point into service.


public abstract class HttpJspBase extends HttpServlet implements HttpJspPage {		This class is a Servlet

    private static final long serialVersionUID = 1L;

    protected HttpJspBase() {
    }

    @Override
    public final void init(ServletConfig config)
        throws ServletException
    {
        super.init(config);
	jspInit();
        _jspInit();
    }

    @Override
    public String getServletInfo() {
	return MESSAGES.jspInfo();
    }

    @Override
    public final void destroy() {
	jspDestroy();
	_jspDestroy();
    }

    /**
     * Entry point into service.
     */
    @Override
    public final void service(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {
        _jspService(request, response);
    }

    @Override
    public void jspInit() {
    }

    public void _jspInit() {
    }

    @Override
    public void jspDestroy() {
    }

    protected void _jspDestroy() {
    }

    @Override
    public abstract void _jspService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException;
}


jspInit():This method is called from the init() method. You can override this method.

jspDestroy():This method is called from the servlet’s destroy() method. You can override this method as well.

_jspService():This method is called from the servlet’s service() method,which means it runs in a separate thread for each request. The Container passes the Request and Response objects to this method. You can’t override this method! You can’t do ANYTHING with this method yourself..(except write code that goes inside it), and it’s up to the Container vendor to take your JSP code and fashion the _jspService() method that uses it.

LifeCycle of the JSP:
--------------------

1) You write the .jsp file. The Container writes the .java file for the servlet your JSP becomes.

2)Kim writes a .jsp file, and deploys it as part of a web app.The Container “reads” the web.xml (DD) for this app, but doesn’t do anything else with the
.jsp fi le (until the first time it’s requested).It’s just sitting here on the server...waiting for a client to request it.

3)The client hits a link that asks for the .jsp.The Container tries to TRANSLATE the .jsp into .java source code for a servlet class.JSP syntax errors are
caught in this phase.

4)The Container tries to COMPILE the servlet .java source into a .class file.Java language/syntax errors are caught here..

5)The Container LOADS the newly-generated servlet class

6)The Container instantiates the servlet and causes the servlet’s jspInit() method to run.The object is now a full-fl edged servlet, ready to accept client requests.

7)The Container creates a new thread to handle this client’s request, and the servlet’s _jspService() method runs..Everything that happens after
this is just plain old servlet request-handling.Eventually the servlet sends a response back to the client (or forwards the request to another web app component

During the Translation time: JSP Syntax Errors are caught COMPILE: During the compilation java syntax errors are caught..

Translation and compilation happens only ONCE:
----------------------------------------------
When you deploy a web app with a JSP, the whole translation and compilation step happens only once in the JSP’s life. Once it’s been translated and compiled, it’s just like any other servlet. And just like any other servlet, once that servlet has been loaded and initialized, the only thing that happens at request time is creation or allocation of a thread for the service method. So the picture on the previous two pages is for only the first request.

OK, so that means only the first client to ask for the JSP takes the big hit. But there MUST be a way to configure the server to pre-translate and compile...right?

Although it’s only the first client that has to wait, most Container vendors DO give you a way to ask for the whole translation/compilation thing to happen in advance, so that even the first request happens like any other servlet request..But watch out—it’s vendor-dependent and not guaranteed. There IS a mention in the JSP spec (JSP 11.4.2) of a suggested protocol for JSP precompilation


Initializing your JSP:
--------------------
You can do servlet initialization stuff in your JSP, but it’s slightly different from what you do in a regular servlet.

You configure servlet init params for your JSP virtually the same way you configure them for a normal servlet. The only difference is that you have to add a <jsp-file> element within the <servlet> tag.

<web-app ...>
<servlet>
	<servlet-name>MyTestInit</servlet-name>
	<jsp-file>/TestInit.jsp</jsp-file>	This is the only line that’s different from a regular servlet. It basically says, “apply everything in this 						<servlet> tag to the servlet created from this JSP page...”
	<init-param>
	<param-name>email</param-name>
	<param-value>ikickedbutt@wickedlysmart.com</param-value>
	</init-param>
</servlet>
<servlet-mapping>
	<servlet-name>MyTestInit</servlet-name> **When you define a servlet for a JSP, you must also define a servlet mapping to the JSP page.
	<url-pattern>/jspservlet</url-pattern>
</servlet-mapping>


Even the Jsp's can also have the URLS..When you invoke the appname/jspservlet --->It will map to servlet called /TestInit.jsp or /WEB-INF/TestInt.jsp

This way you can hide the .jsp extension to the user..

** Is there any annotation style of configuring the init-params for the JSP..

Overriding the jspint():
------------------------

Yes, it’s that simple. If you implement a jspInit() method, the Container calls this method at the beginning of this page’s life as a servlet. It’s called from the servlet’s init() method, so by the time this method runs there is a ServletConfig and ServletContext available to the servlet. That means you can call getServletConfig() and getServletContext() from within the jspInit() method.

This example uses the jspInit() method to retrieve a servlet init parameter (configured in the DD), and uses the value to set an application-scoped attribute

<%!						         //Override the jspInit() method using a declaration
public void jspInit() {
ServletConfig sConfig = getServletConfig();		//You’re in a servlet, so you can call your inherited getServletConfig() method
String emailAddr = sConfig.getInitParameter(“email”);	
ServletContext ctx = getServletContext();		//Get a reference to the ServletContext and set an application-scope attribute.
ctx.setAttribute(“mail”, emailAddr);
}
%>


The example on the opposite page shows the JSP setting an application-scoped attribute using a method declaration that overrides jspInit(). But most of the
time you’ll be using one of the four implicit objects to get and set attributes corresponding to the four attribute scopes available in a JSP.

**The implicit Objects will not be available in the jsp init and jspdestroy methods that you write..


In JSP the things that go into the service method:


Application 		getServletContext().setAttribute(“foo”, barObj); 			application.setAttribute(“foo”, barObj);
Request 		request.setAttribute(“foo”, barObj); 					request.setAttribute(“foo”, barObj);
Session 		request.getSession().setAttribute(“foo”, barObj); 			session.setAttribute(“foo”, barObj);
Page			Page Does not apply! 							pageContext.setAttribute(“foo”, barObj);

But this isn’t the whole story! In a JSP, there’s another way to get and set attributes at any scope, using only the pageContext implicit object

There’s no such thing as “context” scope... even though attributes in application scope are bound to the ServletContext object	

The naming convention might trick you into thinking that attributes stored in the ServletContext are... context scope. But there’s no such thing.
Remember, when you see “Context”, think “application”. But there’s an inconsistency between the servlet and JSP names used to get app-scoped attributes—in a servlet, you say:

getServletContext().getAttribute(“foo”)  but in a JSP you say:
application.getAttribute(“foo”)

Using PageContext for attributes:
---------------------------------

You can use a PageContext reference to get attributes from any scope, including the page scope for attributes bound to the PageContext

The methods that work with other scopes take an int argument to indicate the scope. Although the attribute access methods come from JspContext, you’ll find the constants for the scopes inside the PageContext class

JspContext:
   |	
getAttribute(String name)
getAttribute(String name, int scope)
getAttributeNamesInScope(int scope)
findAttribute(String name)

PageContext

APPLICATION_SCOPE
PAGE_SCOPE
REQUEST_SCOPE			static final fields
SESSION_SCOPE

getRequest()
getServletConfi g()
getServletContext()
getSession()


Examples using pageContext to get and set attributes:::
-----------------------------------------------------

Setting a page-scoped attribute:

<% Float one = new Float(42.5); %> <% pageContext.setAttribute(“foo”, one); %>

Getting a page-scoped attribute :   <%= pageContext.getAttribute(“foo”) %>

Using the pageContext to set a session-scoped attribute

<% Float two = new Float(22.4); %>
<% pageContext.setAttribute(“foo”, two, PageContext.SESSION_SCOPE); %>

Using the pageContext to get a session-scoped attribute

<%= pageContext.getAttribute(“foo”, PageContext.SESSION_SCOPE) %> (Which is identical to: <%= session.getAttribute(“foo”) %> )


<%= pageContext.getAttribute(“mail”, PageContext.APPLICATION_SCOPE) %> identical to (Email is: <%= application.getAttribute(“mail”) %>)

****Using the PageCOntext for getting & setting the attributes is bit uglier and heavy.. But there is no way for setting and retriving the page scoped attributes...

Using the pageContext to find an attribute when you don’t know the scope

<%= pageContext.findAttribute(“foo”) %>find it where?

Where does the findAttribute() method look? It looks first in the page context, so if there’s a “foo” attribute with page context scope, then calling findAttribute(String name) on a PageContext works just like calling getAttribute(String name) on a PageContext. But if there’s no “foo” attribute, the method starts looking in other scopes, from most restricted to least restricted scope —in other words, first request scope, then session, then finally application scope. The fi rst one it fi nds with that name wins.

The below things are like expressions.. 

<%= request.getAttribute()%> <%= session.getAttribute()%> <%= application.getAttribute()%> <%= pageContext.getAttribute("“foo”")%>(for pagescope)

The below things are like statements

<% request.setAttribute()%> <% session.setAttribute()%> <% application.setAttribute()%> <% pageContext.setAttribute("foo",one)%>(for pagescope)

We already looked at the directive used for getting import statements into the generated servlet class made from your JSP. That was a page directive (one of the three directive types) with an import attribute (one of 13 attributes of the page directive).

<%@ page import=”foo.*” session=”false” %>  ****Translation time Accordingly servlet code will be written

Defines page-specific properties such as character encoding, the content type for this page’s response, and whether this page should have the implicit session object.A page directive can use up to thirteen different attributes (like the import attribute), although only four attributes are covered on the exam.

The taglib directive:			*** Translation time accordingly the taglibs will be used..
--------------------

<%@ taglib tagdir=”/WEB-INF/tags/cool” prefix=”cool” %>Defines tag libraries available to the JSP. We haven’t talked about using custom tags and standard actions yet... 

The include directive:
---------------------

<%@ include file=”wickedHeader.html” %> ****Translation time

Defines text and code that gets added into the current page at translation time. This lets you build reusable chunks (like a standard page heading or navigation bar) that can be added to each page without having to duplicate all that code in each JSP.

Attributes to the page directive:
---------------------------------

import: for free (by default): java.lang (duh), javax.servlet, javax.servlet.http, and javax.servlet.jsp
isThreadSafe: by default true.. if false it implements the SingleThreadModel
contentType:Defines the MIME type (and optional character encoding) for the JSP response
isELIgnored:Defines whether EL expressions are ignored when this page is translated.

isErrorPage:Defines whether the current page represents another JSP’s error page. The default value is “false”, but if it’s true, the page has access to 		    the implicit exception object..If false, the implicit exception object is not available to the JSP.
errorPage:Defines a URL to the resource to which uncaught Throwables should be sent. If you define a JSP here, then that JSP will have an isErrorPage=”true” 	  attribute in its page directive

language: Defines the scripting language used in scriptlets, expressions, and declarations.
extends: Defines the superclass of the class this JSP will become. You won’t use this unless you REALLY know what you’re doing—it overrides the class 	 hierarchy provided by the Container

session: Defines whether the page will have an implicit session object. The default value is “true”.
buffer: Defines how buffering is handled by the implicit out object (reference to the JspWriter).
autoFlush: Defines whether the buffered output is flushed automatically. The default value is “true”.
info: Defines a String that gets put into the translated page, just so that you can get it using the generated servlet’s inherited getServletInfo() method
pageEncoding: Defines the character encoding for the JSP. The default is “ISO-8859-1”


Writing the Scriplets, Expressions and declartions code in the jsp page is Bad Programming practisce..Some people believe (OK, technically a lot of people including the JSP and Servlet spec teams) that it’s bad practice to put all this Java into your JSP.To clearly give the seprate roles for the webdesigners and Java Developers..

1) Web page designers shouldn’t have to know Java.
2) Java code in a JSP is hard to change and maintain

							EL is answer for everything:

Oh if only there were a way in a JSP to use simple tags that cause Java methods to run, without having to put actual Java code into the page

EL stands for “Expression Language”, and it became officially part of the spec beginning with JSP 2.0 spec..EL is nearly always a much simpler way to do some of the things you’d normally do with scriptlets and expressions..

But if I want my JSP to use custom methods, how can I declare and write those methods if I can’t use Java..Ahhhh... writing the actual functionality (method code) is not the purpose of EL. The purpose of EL is to offer a simpler way to invoke Java code—but the code itself belongs somewhere else.
That means in a regular old Java class that’s either a JavaBean, a class with static methods, or something called a Tag Handler. In other words, you don’t write method code into your JSP when you’re following today’s Best Practices. You write the Java method somewhere else, and call it using EL...

An EL expression ALWAYS looks like this: ${something} In other words, the expression is ALWAYS enclosed in curly braces, and prefixed with a dollar ($) sign

EL expression:Please contact: ${applicationScope.mail}
Java expression:Please contact: <%= application.getAttribute(“mail”) %>

EL it’s not always about you. EL is much easier for a non-Java programmer to learn and get up to speed in. And for a Java programmer, it is still much
easier to maintain a scriptless page..

You can make it invalid for a JSP to have scripting elements (scriptlets, Java expressions, or declarations) by putting a <scripting-invalid> tag in the DD:

<web-app>
<jsp-config>
	<jsp-property-group>
	<url-pattern>*.jsp</url-pattern>
	<scripting-invalid>true</scripting-invalid>
	</jsp-property-group>
</jsp-config>
</web-app>

This disables scripting elements for ALL JSPs in the app (because we used the wildcard *.jsp as the URL pattern.).. You cannot disable it for the particular JSP

Scripting validity:

DD configuration <scripting-invalid>	
------------------------------------
unspecified	evaluated
true		error
false		evaluated

****You can only disable scripting elements through the DD. The <jsp-property-group> element allows you to disable scripting in selective JSPs by specifying URL patterns to be disabled

You can also choose to Ignore the EL:
-------------------------------------

It’s kind of the same thing with disabling EL—if you happened to have template text (plain old HTML or text) in your JSP that included something that looked like EL (${something}), you’d be in Big Trouble if you couldn’t tell the Container to just ignore anything that appears to be EL and instead treat it like any other unprocessed text....

If you want EL-looking things in your JSP to be ignored, you have to say so explicitly, either through a page directive or a DD element.

<web-app ...>
<jsp-confi g>
	<jsp-property-group>
	<url-pattern>*.jsp</url-pattern>
	<el-ignored>true</el-ignored>
	</jsp-property-group>
</jsp-config>
</web-app>

Using the isELIgnored page directive attribute::<%@ page isELIgnored=”true” %>

The page directive takes priority over the DD setting:: If there’s a conflict between the <el-ignored> setting in the DD and the isELIgnored page directive attribute, the directive always wins! That lets you specify the default behavior in the DD, but override it for a specific page using a page directive

DD el-ignored		Page Directive(isElIgnored)     
unspecified		unspecified				evaluated
false			unspecified				evaluated
true			unspecified				ignored
false			false					evaluated
false			true					ignored
true			false					evaluated


JSP Actions:
-----------

Standard Action: <jsp:include page=”wickedFooter.jsp” />  Custom Action: <c:set var=”rate” value=”32” />

Although that’s misleading, because there are some actions that aren’t considered standard actions, but which are still part of a now-standard library. In other words, you’ll later learn that some of the non-standard (the objectives refer to them as custom) actions are... standard, but yet they still aren’t considered “standard actions”. Yes, that’s right—they’re standardized non-standard custom actions.

***Custom actions are part of the standard Library but they aren't considered as the Standard Actions.(they’re standardized non-standard custom actions)

The word “expression” by itself means “scripting expression” NOT “EL expression”....

Of course the word “expression” is overloaded for JSP elements. If you see the word “expression” or “scripting expression” it means the same thing—an expression using Java language syntax: <%= foo.getName() %>..The only time the word “expression” refers to EL is if you specifically see “EL” in the descriptions or label! So, always assume that the default for the word “expression” is “scripting/Java expression”, not EL.

****All the standardActions/CustomActions & Expression language statements,scriplets,expressions and declrations are translated into the Java Statements before they are itself put into the service methods..


							Expression Language:
							--------------------

Inside the Scripting elements we can use the jsp default Objects.. In the expression language we should use the Expression Language implicit Objects..

JSP View Code: Hello <%= request.getAttribute(“name”) %>

Use a scripting expression to get the attribute and print it to the response..scripting expressions are ALWAYS the argument to the out.print() method

But what if the attribute is not a String, but an instance of Person?

foo.Person p = new foo.Person();
p.setName(“Evan”);
request.setAttribute(“person”, p);

Person is: <%= request.getAttribute(“person”) %>	Person is: foo.Person@512d66

Modify the JSP Code to: <% foo.Person p = (foo.Person) request.getAttribute(“person”); %> 		Person is: <%= p.getName() %>

OR using an expression:: Person is: <%= ((foo.Person) request.getAttribute(“person”)).getName() %>


JavaBean Spec:And not just a Person, but a Person with a “name” property. We’re using the term “property” in the non-enterprise JavaBean* way—the Person ------------
class has a getName() and setName() method pair, which in the JavaBean spec means Person has a property called “name”.

Bean Realted Standard Actions:
------------------------------
With a couple of standard actions, we can eliminate all the scripting code in our JSP (remember: scripting code includes declarations, scriptlets, and expressions) and still print out the value of the person attribute’s name property. Don’t forget that name is not an attribute—only the person object is an attribute. The name property is simply the thing returned from a Person’s getName() method.

<jsp:useBean id=”person” class=”foo.Person” scope=”request” /> Search for the attribute "person" in the Request scope..need to give class name

Person created by servlet: <jsp:getProperty name=”person” property=”name” />

<!-- Java in the JSP.. Dont use the scripting   -->
		<% Person person=(Person)request.getAttribute("person"); %>
		<% out.println(person.toString()); %>
		<%= person.getName() %>
		<%=((Person) request.getAttribute("person")).getName() %>
		
		<jsp:useBean id="person" class="com.model.Person" scope="request"/>		Duplicate Local Varaible Error will be received
		<jsp:getProperty property="name" name="person"/>				Background all elements are converted into the JavaCode


Deconstructing <jsp:useBean> and <jsp:getProperty>:
---------------------------------------------------

All we really wanted was the functionality of <jsp:getProperty> because we wanted only to display the value of the person’s “name” property. But how does the Container know what “person” means? If we had only the <jsp:getProperty> tag in the JSP, it’s almost like using an undeclared variable—the name “person”. The Container usually has no idea what you’re talking about, unless you FIRST put a <jsp:useBean> into the page. The <jsp:useBean> is a way of declaring and initializing the actual bean object you’re using in <jsp:getProperty>.

<jsp:useBean id="person" class="com.model.Person" scope="request"/>: Translate to 	Person person=request.getAttribute("person");
<jsp:getProperty property="name" name="person"/>		     Translate to 	out.print(person.getName())
<jsp:getProperty property="name" name="person"/>	 	     Translate to 	out.print(person.getName())

<jsp:useBean id=”person” class=”foo.Person” scope=”request” />

<jsp:useBean>:Identifies the standard action	
id=”person”Declares the identifier for the bean object. This corresponds to the name used when the servlet code said: request.setAttribute(“person”, p);
class=”foo.Person” Declares the class type (fully-qualified, of course) for the bean object
scope=”request”  Identifies the attribute scope for this bean object

<jsp:getProperty name=”person” property=”name” />

<jsp:getProperty Identifies the standard action
name=”person”	Identifies the actual bean object. This will match the “id” value from the <jsp:useBean> tag.
property=”name” Identifies the property name (in other words, the thing with the getter and setter in the bean class).


<jsp:useBean> can also CREATE a bean!::
---------------------------------------

If the <jsp:useBean> can’t find an attribute object named “person”, it can make one! It’s kind of the way request.getSession() (or getSession(true)) works—it first searches for an existing thing, but if it doesn’t find one, it creates one

Look at the code from the generated servlet, and you’ll see what’s happening—there’s an if test in there! It checks for a bean based on the values of id and scope in the tag, and if it doesn’t get one, it makes an instance of the class specified in class, assigns the object to the id variable, then sets it as an attribute in the scope you defined in the tag.

Turns into this code in the _jspService() method

foo.Person person = null;
Declare a variable based on the value of id. This variable is what lets other parts of your JSP (including other bean tags) refer to that variable.
synchronized (request) {
person = (foo.Person)_jspx_page_context.getAttribute(“person”, PageContext.REQUEST_SCOPE);
if (person == null){									BUT, if there was NOT an attribute with that name at that scope...
person = new foo.Person();
_jspx_page_context.setAttribute(“person”, person, PageContext.REQUEST_SCOPE);
}						Finally, set the new object as an attribute at the scope you defined
}

You can use <jsp:setProperty>:

<jsp:useBean id=”person” class=”foo.Person” scope=”request” />
<jsp:setProperty name=”person” property=”name” value=”Fred” />

That’s worse! NOW it means that if the bean already existed, my JSP will reset the existing bean’s property value!
I want to set the property on only the NEW beans...

<jsp:useBean> can have a body!:  jsp:useBean searches for the attribute inside the scope 
------------------------------

If you put your setter code (<jsp:setProperty>) inside the body of <jsp:useBean>, the property setting is conditional! In other words, the property values will be set only if a new bean is created. If an existing bean with that scope and id are found, the body of the tag will never run, so the property won’t be reset from your JSP code.

<jsp:useBean id=”person” class=”foo.Person” scope=”request”>
<jsp:setProperty name=”person” property=”name” value=”Fred” />
<jsp:useBean/>


Bean Laws:

Why didn’t they just let you specify arguments to the constructor of the bean? Why do you have to go through the extra trouble of setting values anyway?

The simple answer is this: beans can’t HAVE constructors with arguments! Well, as a Java class, they can, but when an object is going to be treated as a bean, Bean Law states that ONLY the bean’s public, no-arg constructor will be called. End of story. In fact if you do NOT have a public no-arg constructor in your bean class, this whole thing will fail anyway.

What the Heck is the Beans Law?

1) You MUST have a public, no-arg constructor

2) You MUST name your public getter and setter methods starting with “get” (or “is”, for a boolean) and “set”, followed by the same word. 
(getFoo(), setFoo()).The property name is derived from stripping off the “get” and “set”, and changing the first character of what’s left to lowercase.

3) The setter argument type and the getter return type MUST be identical. This defines the property type. int getFoo() void setFoo(int foo)

4)The property name and type are derived from the getters and setters and NOT from a member in the class. For example, just because you have a private int foo variable does NOT mean a thing in terms of properties. You can name your variables whatever you like. The “foo” property name comes from the methods. In other words, you have a property simply because you have a getter and setter

5)5) For use with JSPs, the property type SHOULD be a type that is either a String or a primitive. If it isn’t, it can still be a legal bean, but you won’t be able to rely only on standard actions, and you might have to use scripting.


Can you make polymorphic bean references?

When you write a <jsp:useBean>, the class attribute determines the class of the new object (if one is created). It also determines the type of the reference variable used in the generated servlet.

<jsp:useBean id=”person” class=”foo.Person” scope=”page” />

foo.Person person = null;
// code to get the person attribute
if (person == null){
person = new foo.Person();
}

What if we want the reference type to be different from the actual object type?We’ll change the Person class to make it abstract, and make a concrete subclass Employee. Imagine we want the reference type to be Person, and the new object type to be Employee.

Our original JSP
<jsp:useBean id=”person” class=”foo.Person” scope=”page”/>The attribute doesn't allow Person class becuase it cannot create the Object.. 

CE://java.lang.InstantiationException: foo.Person  Because the Container tries to: new foo.Person();

Person is now abstract! Obviously,you can’t make one, but the Container still tries, based on the class attribute in the tag...

We need to make the reference variable type Person, and the object an instance of class Employee. Adding a type attribute to the tag lets us do that.

<jsp:useBean id=”person” type=”foo.Person” class=”foo.Employee” scope=”page”>

foo.Person person = null;
// code to get the person attribute
if (person == null){
person = new foo.Employee();		Now the reference type is the abstract Person and the object type is the concrete Employee
}

Type can be a class type, abstract type, or an interface—anything that you can use as a declared reference type for the class type of the bean object...
You can’t violate Java typing rules, of course. If the class type can’t be assigned to the reference type, you’re screwed. So that means the class must be a subclass or concrete implementation of the type

What if you have the only Type attribute but you don't have the class attribute:
--------------------------------------------------------------------------------

What happens if we declare a type, but not a class? Does it matter if the type is abstract or concrete

<jsp:useBean id=”person” type=”foo.Person” scope=”page”/> It searches for the attribute of types Person in the page scope.. The attribute can be the Employee or the any other subtype..If it is found you're out of the danger. Else jsp:useBean tries to create the newBean but it doesn't have class attribute
so we get the exception..java.lang.InstantiationException: bean person not found within scope

If type is used without class, the bean must already exist.
If class is used (with or without type) the class must NOT be abstract, and must have a public no-arg constructor..If class is abstract we will get CE

In your example, “foo.Person” is an abstract type, so of COURSE it can’t be instantiated. What if you change the type to “foo.Employee”? Will it use the type for both the reference AND the object type?

<jsp:useBean id=”person” type=”foo.Employee” scope=”page”/> It searches for the attributes of type Employee or the subtypes. If it doesn't find it tries to create the Object. We have Refrenced varaible type given as part of type attribute but the Object type was not given as part of the class attribute..

Container cannot use the fallback mechanism..“If you can’t find the object, go ahead and use the type for BOTH the reference and the object.” No, that is NOT how it works.if you use type without class, you better make CERTAIN that the bean is already stored as an attribute, at the scope and with the id you put in the tag.if you use type without class, you better make CERTAIN that the bean is already stored as an attribute, at the scope and with the id you put in the tag.

The scope attribute defaults to “page”
If you don’t specify a scope in either the <jsp:useBean> or <jsp:getProperty> tags, the Container uses the default of “page"

This: <jsp:useBean id=”person” class=”foo.Employee” scope=”page”/>
Is the same as this:: <jsp:useBean id=”person” class=”foo.Employee”/>

<jsp:useBean id=”person” type=”foo.Employee” class=”foo.Person”/>

Be prepared to recognize that this will NEVER work! You’ll get a big fat: org.apache.jasper.JasperException: Unable to compile class for JSP foo.Person is abstract; cannot be instantiated Person = new foo.Person();

Be SURE that you remember: type == reference type class == object type 
type is what you DECLARE (can be abstract) class is what you INSTANTIATE (must be concrete)


				Going straight from the request to the JSP without going through a servlet
				--------------------------------------------------------------------------

Is there a way I can use the request parameters to set a bean property, WITHOUT using scripting?

<form action=“TestBean.jsp”>
name: <input type=“text” name=“userName”>
ID#: <input type=“text” name=“userID”>
<input type=”submit”>
</form>

<jsp:useBean id=“person” type=“foo.Person” class=“foo.Employee”/>
<% person.setName(request.getParameter(“userName”)); %>

<jsp:useBean id=“person” type=“foo.Person” class=“foo.Employee”>
<jsp:setProperty name=“person” property=“name” value='<%= request.getParameter(“userName”) %>' />
</jsp:useBean>

Yes, you ARE seeing an expression INSIDE the <jsp:setProperty> tag (which happens to be inside the body of a <jsp:useBean> tag) And yes, it DOES look bad

Example:
-------

<form action="formParameters.jsp">
Name: <input type="text" name="userName">
ID#: <input type="text" name="userID">
<input type="submit">
</form>

abstract public class Person {
	String name;
	public void setName(String name) {
		this.name = name;
	}
}

public class Employee extends Person{
	private Integer empId;
	public void setEmpId(Integer empId) {
		this.empId = empId;
	}
}

<jsp:useBean id="person" type="com.model.Person" class="com.model.Employee">
<jsp:setProperty name="person" property="name" value='<%=request.getParameter("userName")%>'/>
<jsp:setProperty name="person" property="empId" value='<%=Integer.parseInt(request.getParameter("userID"))%>'/>
</jsp:useBean>

You should take the extra Headache of Converting them to the Type it is required...

The param attribute to the rescue:
------------------------------------
It’s so simple. You can send a request parameter straight into a bean, without scripting, using the param attribute

***The param attribute lets you set the value of a bean property to the value of a request parameter. JUST by naming the request parameter!

<jsp:setProperty name="person" property="empId" param="userID"/> 
The param value “userName” comes from the name attribute of the form’s input field

There is a chance that if you don't specify the requestParamName correctly you will receive the null value from the front end..

*****param takes the Headche of converting it to the required types 

But wait! It gets even better...

And all you have to do is make sure your form input field name (which becomes the request parameter name) is the same as the property name in your bean. Then in the <jsp:setProperty> tag, you don’t have to specify the param attribute. If you name the property but don’t specify a value or param, you’re telling the Container to get the value from a request parameter with a matching name...

<jsp:setProperty name="person" property="empId" value='<%=Integer.parseInt(request.getParameter("userID"))%>'/> you have do Parsing explictly
<jsp:setProperty name="person" property="empId" param="userID"/> You don't have to do the parsing
<jsp:setProperty name="person" property="empID"/>  	*******If the form parameter name and bean property name are same	
<!-- Look for the requestParameter with name and set its value here in beans name property -->

<jsp:setProperty name="person" property="*"/> If all the input field names of the form are matching to Bean Property names then container does work automatcally..

JSP::I want you to iterate through the request parameters, and find any that match this bean’s property names, and set the VALUE of the matching properties equal to the value of the corresponding request parameter...

Container:Oh sure... make ME do all the work. I have to look at the bean class getters and setters to figure out the bean properties, then match that to
the parameter names...

Bean tags convert primitive properties automatically:
----------------------------------------------------

JavaBean properties can be anything, but if they’re Strings or primitives, all the coercing is done for you. That’s right—you don’t have to do the parsing and conversion yourself..

OK, I’m thinking that the Container code is doing some kind of Integer.parseInt(“343”), so wouldn’t you get a NumberFormatException if the user doesn’t type in something that can be parsed to an int? Like, what if the user types “three” in the employee ID fi eld

Good catch. Yes, something will definitely go wrong if the request parameter for the empID property can’t be parsed into an int. You need to validate the contents of that field, to make sure it contains only numeric characters. You could send the form data to a servlet first, instead of sending it straight to the JSP. But if you’re committed to going from the form straight to the JSP, and you don’t want scripting, just use JavaScript in the HTML form to check the
field before sending the request

Working with complex Datatype using the <jsp:useBean> and <jsp:setProperty>?

If a bean property doesn’t have to be a String or a primitive, then HOW can you set the property without scripting? The value attribute of the tag is always a String, right?

It is possible (but potentially a *lot* of extra work) to create a special class, called a custom property editor, that supports the bean. It takes your String value and figures out how to parse that into something that can be used to set a more complex type... This is part of the JavaBeans spec,though, not the JSP spec. Also, if the value attribute in the <jsp:setProperty> tag is an expression rather than a String literal, then IF that expression evaluates to an object that’s compatible with bean property type, then it will probably work. If you pass in an expression that evaluates to a Dog, for example, the Person bean’s setDog(Dog) method will be called. But think about it—this means the Dog object must already exist. Anyway, you’re way better off NOT trying to construct new things in your JSP! Trying to get away with constructing and setting even marginally complex data types is gonna be tough without scripting

***If the request if coming from servlet to the jsp and working to set the properties of String/Primitive types in the JSP Bean then you have to use the value attribute.. If you have to deal with the complex types then you need to write the scripting(expression) inside the value attribute..Even if you set the complex type using the value attribute it is difficult to retrive using the <jsp:getProperty> where you can retrive the only simple String and primitive Types..

***If the request is Coming from the form/html and want to map all the coming field values to Bean then you use the <jsp:setProperty> with the param attribute.As the coming values from the fields are of the String type then <jsp:setProperty> tag is capable of coercing into the required primtive 
datatypes automatically... If you maintain the input filed names same with the bean property names then you don't have to use the param tag also

****Automatic String-to-primitive conversion does NOT work if you use scripting!! It fails even if an expression is INSIDE the <jsp:setProperty> tag

If you use the <jsp:setProperty> standard action tag with the property wildcard, OR just a property name without a value or param attribute (which means the property name matches the request parameter name), OR you use a param attribute to indicate the request parameter whose value should be assigned to the bean’s property, OR you type a literal value, the automatic conversion from String to int works. Each of these examples converts automatically

<jsp:setProperty name=”person” property=”*” />
<jsp:setProperty name=”person” property=”empID” />				====> All these works..
<jsp:setProperty name=”person” property=”empID” value=”343” />
<jsp:setProperty name=”person” property=”empID” param=”empID” />

BUT... if you use scripting, the automatic conversion does NOT work:
<jsp:setProperty name=”person” property=”empID” value=”<%= request.getParameter(“empID”)%>”/>
------------------------------------------------------------------------------------------------------------------------------------------------------------
But what if the property is something OTHER than a String or primitive?

That worked fine, because the standard actions can handle String and primitive properties. So, we know that standard actions can deal with an attribute of any type, as long as all the attribute’s properties are Strings or primitives

Person has a String “name” property. Person has a Dog “dog” property. Dog has a String “name” property

What if we want to print the name of the Person’s dog?

foo.Person p = new foo.Person(); p.setName(“Evan”);
foo.Dog dog = new foo.Dog(); dog.setName(“Spike”); p.setDog(dog);
request.setAttribute(“person”, p); RequestDispatcher view = request.getRequestDispatcher(“result.jsp”); view.forward(request, response);

Trying to display the property of the property..We know we can do it with scripting, but can we do it with the bean standard actions?
What happens if we put “dog” as the property in the <jsp:getProperty> tag?

Without standard actions (using scripting):<%= ((foo.Person) request.getAttribute(“person”)).getDog().getName() %>

With standard actions (no scripting): 
<jsp:useBean id=”person” class=”foo.Person” scope=”request” /> 		Dog’s name is: <jsp:getProperty name=”person” property=”dog” />

										All we got was the result of Dog’s toString() method

The <jsp:getProperty> lets you access only the properties of the bean attribute. There’s no capability for nested properties, where you want a property of a property, rather than a property of the attribute


						Expression Language (EL) saves the day!:
						----------------------------------------

The JSP Expression Language (EL) was added to the JSP 2.0 spec, releasing us from the tyranny of scripting..

Dog’s name is: ${person.dog.name}	EL makes it easy to print nested properties... in other words, properties of properties!

This is it! We didn’t even declare what person means... it just knows

<%= ((foo.Person) request.getAttribute(“person”)).getDog().getName() %>

you’ll find things that wouldn’t work in Java but will work in EL, and vice-versa. Just don’t try to map Java language/syntax rules onto EL, and you’ll be fine..think of EL as a way to access Java objects without using Java..

EL expressions are ALWAYS within curly braces, and prefixed with the dollar sign..${person.name}

${firstThing.secondThing}	The first named variable in the expression is either an implicit object or an attribute.

EL IMPLICIT OBJECT:pageScope requestScope sessionScope applicationScope param paramValues header headerValues cookie initParam pageContext

pageContext:Of all the implicit objects, only pageContext is not a map. It’s an actual reference to the pageContext object! (And the pageContext is a JavaBean.)

OR ATTRIBUTE in pagescope/in requestscope/ in sessionscope/in applicationscope..If the first thing in the EL expression is an attribute, it can be the name of an attribute stored in any of the four available scopes.


** The first thing in the EL resolves to the JavaBean/Map.. Second thing has to be the JavaBean Property name or the Map Key..

The first variable is either an implicit object or an attribute, and the thing to the right of the dot is either a map key (if the first variable is a map) or a bean property if the first variable is an attribute that’s a JavaBean..

And the thing on the right must follow normal Java naming rules for identifiers...

****Must start with a letter, _, or $.After the first character, you can include numbers..Can’t be a Java keyword

**Please consider to prepare the attributes as the JavaBeans..

pageContext/attribute that is a bean and the named property doesn’t exist, then an exception is thrown...


					The [] operator is like the dot only way better
					-----------------------------------------------

${person[“name”]} ${person.name}

The dot operator works only when the thing on the right is a bean property or map key for the thing on the left. That’s it. But the [ ] operator is a lot more powerful and flexible...

The simple dot operator version works because person is a bean, and name is a property of person..

But what if person is an array?Or what if person is a List? Or what if name is something that can’t be expressed with the normal Java naming rules...

Map/attribute(JavaBean).(beanproperty/mapkey)..  Map/Attribute(JavaBean)/List/Array["ListIndex/ArrayIndex/MapKey/BeanProperty"]


class Person{

Details[] details;	
	
}

${requestScope.person.details["0"]} /${requestScope.person.details[0]}	 

${person.details[0]}/${person.details["0"]}  A String index is coerced to an int for arrays and Lists:

The EL for accessing an array is the same as the EL for accessing a List.In EL, the [ ] operator is NOT the array access operator. No, it’s just called the [ ] operator.We swear, look it up in the spec—it has no name! Just the symbol [ ]. Like Prince, kind of.) If it DID have a name, it would be the
array/List/Map/bean Property access operator.

java.util.ArrayList favoriteFood = new java.util.ArrayList();
favoriteFood.add(“chai ice cream”);
favoriteFood.add(“fajitas”);
favoriteFood.add(“thai pizza”);
favoriteFood.add(“anything in dark chocolate”);
request.setAttribute(“favoriteFood”, favoriteFood);


Foods are: ${favoriteFood} O/p:Foods are: [chai ice cream, faji-tas, thai pizza, anything in dark chocolate]
First food is ${favoriteFood[0]} 	O/p:First food is chai ice cream
Second food is ${favoriteFood[“1”]}	O/p:Second food is fajitas
${favoriteFood[“one”]}	Because “one” can’t be turned into an int. You’ll get an NFE error if the index can’t be coerced.

What happens if it's out of Index: Music is: ${musicList["1"]} o/p: Doesn't throw the ArrayIndexOOBoundsException..

Person is: ${requestScope.person.name} PropertyFound No Error
Person is: ${requestScope.person.name1} If the property is not found then it throws the  PropertyNotFoundException: Property 'name1' not found on type com.model.Employee

[] .

For the Java beans & Maps you can use the either operators []/.
--------------------------------------------------------------
Example1:

java.util.Map musicMap = new java.util.HashMap();
musicMap.put(“Ambient”, “Zero 7”);
musicMap.put(“Surf”, “Tahiti 80”);
musicMap.put(“DJ”, “BT”);
musicMap.put(“Indie”, “Travis”);
request.setAttribute(“musicMap”, musicMap);

Ambient is: ${musicMap.Ambient}		***Both expressions use Ambient as the key into a Map (since musicMap is a Map)
Ambient is: ${musicMap[“Ambient”]}

Example2:
String[] favoriteMusic = {"Zero 7", "Tahiti 80", "BT", "Frou Frou"};
Person person=new Employee();
person.setName("Muni");
Map<String,Person> map=new HashMap<String, Person>();
map.put("person", person);	

request.setAttribute("musicList", favoriteMusic);
request.setAttribute("person",person);
request.setAttribute("personMap", map);
		
Music is: ${musicList["4"]} <br/>
Person is: ${requestScope.person.name} <br/>
Person from Map: ${requestScope.personMap.person["name"]} <br/> If the Map key is also an Object it should be continued with . property
Person from Map: ${requestScope.personMap.person.name} 


["Mapkey/BeanProperty/ListIndex/ArrayIndex"]:: If the thing that is in the [] operator is not in the String , then it searches for the attribute underthat name in the request/page/session/applictionscope & substitutes the values of that attribute.(If there is an Implicit Object with same name then that Object will be used..)

Music is: ${musicMap[Ambient]}		Find an attribute named “Ambient”. Use the VALUE of that attribute as the key into the Map, or return null.

Example:

java.util.Map musicMap = new java.util.HashMap();
musicMap.put(“Ambient”, “Zero 7”);
musicMap.put(“Surf”, “Tahiti 80”);
musicMap.put(“DJ”, “BT”);
musicMap.put(“Indie”, “Frou Frou”);
request.setAttribute(“musicMap”, musicMap);
request.setAttribute(“Genre”, “Ambient”);	

Music is: ${musicMap[Ambient]} Without quotes around Ambient, this does NOT work!! Since there’s no bound attribute named “Ambient”, the result comes back 		 	null				
					   Evaluates to 
Music is ${musicMap[Genre]};------------------------------->Music is ${musicMap[“Ambient”]}

Because there IS a request attribute named “Genre” with a value of “Ambient”, and “Ambient” is a key into musicMap

If the Keyname/Propertyname is there as attribute in the anyof the request/session/context/page scope..Then use the above concept..

You can use nested expressions inside the brackets:
--------------------------------------------------

It’s expressions all the way down in EL. You nest expressions to any arbitrary level. In other words, you can put a complex expression inside a complex expression inside a.(it keeps going). And the expressions are evaluated from the inner most brackets out...

java.util.Map musicMap = new java.util.HashMap();
musicMap.put(“Ambient”, “Zero 7”);
musicMap.put(“Surf”, “Tahiti 80”);
musicMap.put(“DJ”, “BT”);
musicMap.put(“Indie”, “Frou Frou”);
request.setAttribute(“musicMap”, musicMap);
String[] musicTypes = {“Ambient”, “Surf”, “DJ”, “Indie”};
request.setAttribute(“MusicType”, musicTypes);


Music is ${musicMap[	MusicType[0]	]}
		      Evaluated First				

Music is ${musicMap[“Ambient”]}

						You can’t do ${foo.1}
						----------------------
With beans and Maps, you can use the dot operator, but only if the thing you type after the dot is a legal Java identifer..

		   converted							 Can't be Converted
${musicMap.Ambient} ---->${musicMap[“Ambient”]}   		${musicList[“1”] -------------------->${musicList.1}
						

EL renders raw text, including HTML:
-----------------------------------

${pageContent.currentTip}  ***Assume the currentTip is <b></b> tags make things bold! 	O/P will be::  tags make things bold!

<%= pageContent.getCurrentTip() %>Whatever this evaluates to is treated as standard HTML, so any HTML tags are rendered, not displayed as text

<b>Tip of the Day:</b> <br/> <br/>
<jsp:getProperty name='pageContent' property='currentTip' />Same thing here. Text like <i></i> and <b></b> get rendered, not displayed as plain text.


What to do if you don't want browser to evaluate/render the HTML Special Characters?
So we want to send “&lt;” in order for the user to see the actual < character in the browser, and “&gt;” to produce the > character.

EL Implicit Objects:
------------------

pageScope requestScope sessionScope applicationScope...A Map of the scope attributes.

param paramValues....Maps of the request parameters  

header headerValues...Maps of the request headers

cookie...Ooohhhh... this is a tough one... could it be a Map of... cookies

initParam..A Map of the context init parameters (NOT servlet init parameters!)

pageContext:The only thing that is NOT a Map. This is the real deal—an actual reference to the pageContext object, which you can think of as a bean. Look in the API for the PageContext getter methods.

Request parameters in EL:
-------------------------

The param implicit object is fine when you know you have only one parameter for that particular parameter name. Use paramValues when you might have more than one parameter value for a given parameter name..

HTML FORM:
---------

<form action=”TestBean.jsp”>
Name: <input type=”text” name=”name”>
ID#: <input type=”text” name=”empID”>
First food: <input type=”text” name=”food”>		The “name” and “empID” will each have a single value. But the “food” parameter could
							have two values, if the user fills in both fields before hitting the submit button...
Second food: <input type=”text” name=”food”>
<input type=”submit”> </form>

JSP:
---

Request param name is: ${param.name} <br>	Remember, param is just a Map of parameter names and values. The things to the right of the dot come from 							the names specified in the input fields of the form
Request param empID is: ${param.empID} <br>

Request param food is: ${param.food} <br>	Even though there might be multiple values for the “food” parameter, you can still use the single param 							implicit object, but you’ll get only the first value
First food request param: ${paramValues.food[0]} <br>
Second food request param: ${paramValues.food[1]} <br>
Request param name: ${paramValues.name[0]}


What if you want more information from the request?
--------------------------------------------------

What if you want, say, the server host information that comes with the “host” header in the request? If you look in the HttpServletRequest API, you can see a getHeader(String) method. We know that if we pass “host” to the getHeader() method, we’ll get back something like: “localhost:8080” (because that’s where the web server is).

Host is: <%= request.getHeader(“host”) %>

But with EL, we’ve got the header implicit object: Host is: ${header[“host”]}

Host is: ${header.host} The header implicit object keeps a Map of all the headers. Use either access operator to pass in the header name and the value of that header will print. (Note: there’s also a headerValues implicit object for headers with multiple values. It works just like paramValues.)

Getting the HTTP request method:: 

We know we can do it with scripting... Method is: <%= request.getMethod() %>

But with EL, this will NOT work Method is: ${request.method} NO! NO! NO! There IS no implicit request object

Method is: ${requestScope.method} NO! NO! NO! There IS an implicit requestScope, but it’s NOT the request object itself

The requestScope is NOT the request object:
-------------------------------------------

The implicit requestScope is just a Map of the request scope attributes, not the request object itself! What you want (the HTTP method) is a property of the request object, not an attribute at request scope. In other words, you want something that comes from calling a getter method on the request object (if we treat the request object like a bean).

Use requestScope to get request ATTRIBUTES, not request PROPERTIES. For request properties, you need to go through pageContext.

Method is: ${pageContext.request.method} pageContext has a request property request has a method property


Don’t confuse the Map scope objects with the objects to which the attributes are bound.

It’s so easy to think that, say, applicationScope is a reference to ServletContext, since that’s where application-scoped attributes are bound.But just as with requestScope and the request object, the scope Map for application-scoped attributes is just that a Map of attributes, and nothing more. You can’t treat it like a Servlet Context, so don’t expect to get ServletContext properties back from the applicationScope implicit object


If EL looks through all the scopes anyway, why would I ever use one of the scope implicit objects? The only thing I can think of is a naming conflict, but I wonder if there might be another reason

Think about this scenario: if you have a name that’s not in quotes in brackets [ ], that means it MUST adhere to Java naming rules, right? Here, we’re OK, because person is a perfectly legal Java variable name. But that’s because somewhere, someone said,
request.setAttribute(“person”, p);

But an attribute name is a String!Strings don’t follow Java variable name rules! That means someone could say:
request.setAttribute(“foo.person”, p);

And then you’d be in trouble, because THIS won’t work::${foo.person.name}

NO! This is certainly legal, but the Container just thinks that “foo” is an attribute somewhere, with a “person” property. But the Container never finds a “foo” attribute


But you’ll be so thankful for scope objects, because using a scope object lets you switch to the [ ] operator, that can take String names that don’t conform to Java naming rules.${requestScope[“foo.person”].name}


Printing the value of the “userName” Cookie:
-------------------------------------------

This is kind of a pain, because the request object does NOT have a getCookie(cookieName) method! We have to get the whole Cookie array and iterate through it ourselves.

<% Cookie[] cookies = request.getCookies();
for (int i = 0; i < cookies.length; i++) {
if ((cookies[i].getName()).equals(“userName”)) {
out.println(cookies[i].getValue());
}
} %>

But with EL, we’ve got the Cookie implicit object :: ${ cookie.userName.value} WAY easier. Just give it the name, and the value comes back from the Map of Cookie names/values

Printing the value of a context init parameter:
-----------------------------------------------

<context-param>
<param-name>mainEmail</param-name>
<param-value>likewecare@wickedlysmart.com</param-value>
</context-param>

email is: <%= application.getInitParameter(“mainEmail”) %>

And with EL, it’s even easier::email is: ${ initParam.mainEmail}

					The EL initParam is NOT for params configured using <init-param>
					
Here’s what’s confusing: servlet init params are configured using <init-param> while context params use <context-param> but the EL implicit “initParam”
is for context params! Had they consulted us, we would have suggested that the spec designers might consider naming this variable, oh, “contextParam”...
but once again, they forgot to ask us.

							EL Functions:			
							-------------

Not just attribute or property values. If only there were a way to have an EL expression call a Java method that returns a value...then I would be happy.

When you need a little extra help from, say, a Java method, but you don’t want scripting, you can use an EL function. It’s an easy way to write a simple EL expression that calls a static method in a plain old Java class that you write. Whatever the method returns is used in the expression. It does take a tiny
bit more work to configure things, but functions give you

Step1:
	Write a Java class with a public static method.

This is just a plain old Java class. The method MUST be public and static, and it can have arguments. It should (but isn’t required to) have a non-void return type. After all, the whole point is to call this from a JSP and get something back that you can use as part of the expression or to print out.
Put the class file in the /WEB-INF/classes directory structure (matching the appropriate package directory structure, just like you would with any other class).

Step2:
	Write a Tag Library Descriptor (TLD) file

For an EL function, the TLD provides a mapping between the Java class that defines the function and the JSP that calls the function. That way, the function name and the actual method name can be different. You might be stuck with a class with a really stupid method name, for example, and maybe you want to provide a more obvious or intuitive name to page designers using EL. No problem—the TLD says, “This is the Java class, this is the method signature for the function (including return type) and this is the name we’ll use in EL expressions”. In other words, the name used in EL doesn’t have to be the same as the actual method name, and the TLD is where you map that.Put the TLD file inside the /WEB-INF directory. Name it with a .tld extension. (There are other places the TLD can go; we’ll talk about that in the next two chapters.)

TLD:

funcName--->ClassName RT MethodName(args)
funcName--->ClassName RT MethodName(args)	>>>For the overloaded methods within the same class can we use the same functionName in the TLD


Step 3:
	Put a taglib directive in your JSP.

The taglib directive tells the Container, “I’m going to use this TLD, and in the JSP, when I want to use a function from this TLD, I’m going to prefix it with this name...” In other words, it lets you define the namespace. You can use functions from more than one TLD, and even if the functions have the same name, that’s OK. The taglib directive is kind of like giving all your functions fully-qualified names. You invoke the function by giving both the function name AND the TLD prefix. The prefix can be anything you like.


Step 4: 
	Use EL to invoke the function.function from an expression using ${prefix:name()}.

Class:

package foo;
public class DiceRoller {
public static int rollDice() {
return (int) ((Math.random() * 6) + 1);
}
}

taglib>
<tlib-version>2.1</tlib-version>
<uri>DiceFunctions</uri>
<function>
<name>rollIt</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>int rollDice()</function-signature>
</function>
</taglib>

<%@ taglib prefix=”mine” uri=”DiceFunctions”%>	
The uri in the taglib directive tells the Container the name of the TLD (which does NOT have to be the name of the FILE!), which the Container needs so
it knows which method to call when the JSP invokes the EL function.

<html><body>${mine:rollIt()}		The function name rollIt() comes from the <name> in the TLD, not from anything in the actual Java class.
</body></html>


Deploying the tld file:
-----------------------
The only thing that’s new here is the “myFunctions.tld” file. It has to be somewhere within WEB-INF or one of its subdirectories (unless it’s deployed in a
JAR file, but we’ll talk about that later in the book).Here, because this app is so simple, we have both the DD (web.xml) and the TLD (myFunctions.tld) at the top level of WEB-INF, but you could organize them into subdirectories

The key point is that the class with the static function MUST be available to the app, so... for now, you know that putting it inside WEB-INF/classes will work. And remember that in the taglib directive in the JSP, we specified a URI that matches the URI declared in the TLD. For now, think of the URI as simply
whatever you decided to name the TLD. It’s just a name. In the next chapter on using custom tags, we’ll go into all the details about TLDs and URIs..


When the application is deployed container scans through the Entire Application & maintains the map that contains Map<URI,TLDLocationDetails>
But with old specifications we had configure in the web.xml file...

<jsp-config>
  <taglib>
  	<taglib-uri>https://journaldev.com/jsp/tlds/mytags</taglib-uri>
  	<taglib-location>/WEB-INF/numberformatter.tld</taglib-location>
  </taglib>
</jsp-config>

And remember that in the taglib directive in the JSP, we specified a URI that matches the URI declared in the TLD. For now, think of the URI as simply
whatever you decided to name the TLD. It’s just a name. In the next chapter on using custom tags, we’ll go into all the details about TLDs and URIs.

** For the overloaded methods in the class we can overload the function names in the TLD.. Every function should have the individual name..
** But within the two seprate TLD files we can have the same function names.

<function>
<name>rollIt</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>int rollDice()</function-signature>
</function>
<function>
<name>rollItWithString</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>java.lang.String rollDice(java.lang.String)</function-signature>
</function>
<function>
<name>rollDog</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>foo.Dog rollDog()</function-signature>
</function>

public static int rollDice() {
		return (int) ((Math.random() * 6) + 1);
	}
	
	public static String rollDice(String s) {
		return "Always a constant String I Print";
	}
	
	public static Dog rollDog() {
		Dog dog=new Dog();
		dog.setName("NewBiee");
		return dog;
	}

}
Dog dog=new Dog();
dog.setName("Villie");
request.setAttribute("dog", dog);

Getting the value from the reuestAttributes ${requestScope.dog.bark()} <br/>


A regular scriptlet expression MUST return something. If you say <%= foo.getFoo() %>, getFoo() must NOT have a void return type. (At least that’s what you said earlier.) So I’m thinking it’s the same with EL functions?

No! It’s NOT the same with EL functions,although just about everybody finds that... surprising. Think about this—if you’re calling an EL function that doesn’t return anything, then you’re calling it just for its side effects! Given that part of the goal for EL is to reduce the amount of logic in a JSP (a JSP is supposed to be the VIEW!), invoking an EL function just for its side effects doesn’t sound like a good idea

How did the Container find the TLD? The URI doesn’t match the path or file name of the TLD. Was this a miracle

Can an EL function have arguments?

Definitely. Just remember in the TLD to specify the fully-qualified class name (unless it’s a primitive) for each argument. A function
that takes a Map would be:

<function-signature>int rollDice(java.util.Map)</function-signature>   And call it with ${mine:rollDice(aMapAttribute)}

Notee::

Memorize the relationships between the class, the TLD, and the JSP. Most importantly, remember that the METHOD name does NOT have to match the FUNCTION
name. What you use in EL to invoke the function must match the <name> element in the <function> declaration in the TLD. The element for <function-signature> is there to tell the Container which method to call when the JSP uses the <name>. And the only place the class name appears (besides the class declaration itself) is in the <function-class> element.

						
							EL Operators:

You probably won’t (and shouldn’t) do calculations and logic from EL. Remember, a JSP is the View, and the View’s job is to render the response, not to make Big Important Decisions or do Big Processing..If you need real functionality, that’s normally the job of the Controller and Model. For lesser functionality, you’ve got custom tags (including the JSTL tags) and EL functions

But... for little things, sometimes a little arithmetic or a simple boolean test might come in handy. So, with that perspective, here’s a look at the most useful EL artithmetic, relational, and logical operators

Arithmetic (5):

Addition: +
Subtraction: -
Multiplication: *
Division: / and div		By the way... you CAN divide by zero in EL—you get INFINITY, not an error.
Remainder: % and mod		But you CANNOT use the Remainder operator against a zero—you’ll get an exception

Don’t use EL reserved words as identifiers!
------------------------------------------
You can already see 11 of them on this page—the alternate “words” for the relational, logical and some arithmetic operators. But there are a few more

true 	a boolean literal
false 	the OTHER boolean literal
null 	It means... null
instanceof (this is reserved for “the future”)
empty an operator to see if something is null or empty (eg. ${empty A}) returns true if A is null or empty


String num = “2”;
request.setAttribute(“num”, num);
Integer i = new Integer(3);
request.setAttribute(“integer”, i);

${num > 3}	false	The “num” attribute was found, and its value “2” coerced to an int

${integer le 12} true   Even better! The Integer value was converted to its primitive value, and then compared.

java.util.ArrayList list = new java.util.ArrayList();
list.add(“true”);
list.add(“false”);
list.add(“2”);
list.add(“10”);
request.setAttribute(“list”, list);

${list[0] || list[“1”] and true}  true		${num > integer}  false	   ${num == integer-1}  true

<jsp:useBean class=”foo.Dog” id=”myDog” >
<jsp:setProperty name=”myDog” property=”name” value=”${list[1]}” />
</jsp:useBean>

${myDog.name and true}	false         ${42 div 0}{o/p: Infinity}


EL Handles the Null Values Gracefully:
-------------------------------------

A key design decision the developers of EL came up with is to handle null values without throwing exceptions. Why? Because they figured “it’s better to show a partial, incomplete page than to show the user an error page.


Assume that there is not an attribute named “foo”, but there IS an attribute named “bar”, but that “bar” does not have a property or key named “foo”.

${foo}			
${foo[bar]}
${bar[foo]}		------------>Nothing prints out for these expressions. If you say “The value is: ${foo}.” You’ll just see “The value is.”
${foo.bar}

${7 + foo}	7
${7 / foo}      Infinity  	----------->In arithmetic expressions, EL treats the unknown variable as “zero”.
${7 - foo}	7 
${7 % foo}	Exception is thrown

${7 < foo}		false
${7 == foo}		false
${foo == foo}		true
${7 != foo}		true		------------------>In logical expressions, EL treats the unknown variable as “false”.
${true and foo}		false
${true or foo}		true
${not foo}		true


*****EL is null-friendly. It handles unknown or null values so that the page still displays, even if it can’t find an attribute/property/key with the name in the expression. In arithmetic, EL treats the null value as “zero”. In logical expressions, EL treats the null value as “false”.

***Inside the EL Expression you can use all the above operators and perfom small calculations..

							JSP INCLUDE:
							-----------
You have headers on every page on your web site. They’re always the same. You have the same footer on every page as well. How stupid would it be to code in the same header and footer tags into every JSP in your web app?

If you’re thinking like a Java programmer (which of course you are), you know that doing that is about as un-OO as it gets. The thought of all that duplicate code probably makes you feel a little sick. What happens when the site designer makes, oh, a tiny little change to the header or footer?

There’s a mechanism for handling this in a JSP—it’s called include. You write your JSP in the usual way, except that instead of putting the reusable stuff explicitly into the JSP you’re authoring, you instead tell the Container to include the other file into the existing page, at the location you select. It’s kind of like saying:


<html><body>
<!-- insert the header file here -->
Welcome to our site...
blah blah blah more stuff here...
<!-- insert the footer file here -->
</body></html>


In this section we’ll look at two different include mechanisms: the include directive and the <jsp:include/> standard action.


Include Directive:
------------------

The include directive tells the Container one thing: copy everything in the included file and paste it into this file, right here...

Header.jsp

<html><body>
<img src=”images/Web-Services.jpg” > <br>
<em><strong>We know how to make SOAP suck less.</strong></em> <br>
</body></html>

A JSP from the web app(“Contact.jsp”)
-------------------------------------
<html><body>
<%@ include file=”Header.jsp”%>	This says “Insert the complete Header.jsp file into this point in THIS page, then keep going with the rest of this JSP...”
<br>
<em>We can help.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>


<jsp:include> standard action:
------------------------------
<html><body>
<jsp:include page=”Header.jsp” /> <br> This says “Insert the response of Header.jsp file into this point in THIS page, then keep going with the rest of this 				       JSP...”
<em>We can help.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>


They’re NOT the same underneath::

The <jsp:include /> standard action and the include directive look the same, and often give the same result, but take a look at the generated servlets. We took this code directly out of the _jspService() method from Tomcat’s generated servlet code


Generated Code for the include directive:
-----------------------------------------

out.write(“<html><body>\r”);

out.write(“\r<html>\r<body>\r<img src=\”images/Web-Services.jpg\” >		This part in bold is EXACTLY the same as the Header.jsp page  generates		<br>\r<em><strong>We know how to make SOAP suck less.</strong></em> <br>\r\r</body>\r</html>\r”);

out.write(“\r<br>\r\r\r<em>We can help.</em> <br><br>\r\rContact us at: “);
out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(“${initParam.mainEmail}”, java.lang.String.class,
(PageContext)_jspx_page_context, null, false));
out.write(“\r\r\r</body></html>”);

The include directive just takes the contents of the “Header.jsp” file and places it into the “Contact.jsp” page BEFORE it does the translation!

Generated servlet for the JSP using the <jsp:include /> standard action
-----------------------------------------------------------------------

out.write(“<html><body>\r”);org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,“Header.jsp”, out, false);
out.write(“\r<br>\r\r\r<em>We can help.</em> <br><br>\r\rContact us at: “);
out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.
proprietaryEvaluate(“${initParam.mainEmail}”, java.lang.String.class,
(PageContext)_jspx_page_context, null, false));
out.write(“\r\r\r</body></html>”);

*******This is different! The original Header.jsp file is NOT inside the generated servlet. Instead, it’s some kind of runtime call

The include directive happens at translation time <jsp:include> happens at runtime:
----------------------------------------------------------------------------------

With the include directive, there is NO difference between you opening your JSP page and pasting in the contents of “Header.jsp”. In other words, it really is just as though you duplicated the code from the header file into your other JSP. Except the Container does it at translation time for you, so that you don’t have to duplicate the code everywhere. You can write all your pages with an include directive, and the Container will go through the trouble of copying the header code into each JSP before translating and compiling the generated servlet.

But <jsp:include> is a completely different story. Rather than copying in the source code from “Header.jsp”, the include standard action inserts the response of “Header.jsp”, at runtime. The key to <jsp:include> is that the Container is creating a RequestDispatcher from the page attribute and applying the include() method. The dispatched/included JSP executes against the same request and response objects, within the same thread.

Translation time work:

What happens if any changes made to to the included JSP file? How the container recognises the change? Does it fetches new changes agian? Yes

**Containers are having the ability to recognise them by somehow.. It fetches the new code again and translate and compile and runs the jsp with new code.
excpet for the whenevr you makes changes to included file the first request would take sometime..

**But With Runtime calls though you make the changes to the included jsp file frequently also it is not a problem...

So why wouldn’t you always use <jsp:include>? That way you can guarantee you’ll always have the latest content.

Think about it. There’s an extra performance hit with every <jsp:include>. With the directive, on the other hand, the hit happens only once—when the including page is translated. So if you’re pretty sure that once you go to production the included file won’t change, the directive might be the way to
go. Of course there’s still the tradeoff that the generated servlet class is a little larger when you use the directive

***I tried this with Tomcat— I made a static HTML fi le, and included it with the directive. Then I changed the HTML file, without redeploying or anything, and the output from the JSP refl ected the difference! So if that’s the case, then why ever use <jsp:include >?

Ahhh... you have a friendly Container (like Tomcat 5). Yes, most of the newer Containers have a way of detecting when the included files have changed, and they do retranslate the including file and everything’s great. The problem is that this is NOT GUARANTEED BY THE SPEC! So if you write your code to depend on it, your app won’t necessarily be portable to other Containers


NOte::With the include directive, the Container has a lot of work to do, but only on the first request. From the second request on, there’s no extra runtime overhead..With the include standard action, there’s less work at translation time, and more work with each request, especially if the included file is a JSP.


WorkFlow:
--------

The client makes a request for Contact.jsp, which has not been translated. The Container reads the Contact.jsp page to start the translation process..
The container sees the include directive, and combines the source code of Header.jsp and Contact.jsp, and creates/translates that into a Java source file for the generated servlet..The Container compiles the translated source file into a servlet class. It’s just like any other servlet at this point, and the previous step never has to happen again, unless Contact.jsp changes (or, if your Container is smart and can tell that the included Header.jsp has changed).
To complete the request, the Container loads the newly compiled class, initializes a servlet (instantiates the servlet then calls init() on the new object), allocates a thread for the request, and calls the _jspService() method. From the second request on, the Container does only step (C): allocates a thread and calls the _jspService() method

The <jsp:include> standard action at first request
--------------------------------------------------

The client makes a request for Contact. jsp, which has not been translated. The Container reads the Contact.jsp page to start the translation process..
The container sees the include standard action, and uses that to insert a method call in the generated servlet code that—at runtime—will dynamically
combine the response from Header. jsp into the response from Contact. jsp. The Container generates servlets for both JSP files. (This is not dictated
by the spec, so we’re showing only an example of how it could work.)..The Container compiles the translated source file into a servlet class. It’s
just like any other servlet at this point. The generated servlet class file is loaded into the Container’s JVM and is initialized. Next, the Container allocates a thread for the request and calls the JSP’s _jspService() method.....The Contact servlet hits the method that does the dynamic include, and
something vendor-specific happens! All we care about is that the response generated by the Header servlet is combined with the response from the
Contact servlet (at the appropriate place). (NOT SHOWN: at some point the Header.jsp is translated and compiled, then the generated servlet class is
loaded and initialized)...


Yep. The directive attribute is fi le but the standard action attribute is page! To help you remember, the include directive <%@ include file=”foo.jsp” %> is used only at translation time (as with all directives). And when translating, the Container cares only about fi les—.jsp to .java, and .java to .class.
But the <jsp:include page=”foo.jsp”> standard action, as with all standard actions, is executed at request time, when the Container cares about pages to be executed..

Can the included JSP have its own dynamic content? In your examples, the Header.jsp might as well have been a static Header.html page

It’s a JSP, so yes it can be dynamic (but you’re right— in our example we could have made the header a static HTML page and it would have worked in exactly the same way). There are a few limitations, though: an included page CANNOT change the response status code or set headers (which means it can’t call, say, addCookies()). You won’t get an error if the included JSP tries to do things it can’t—you just won’t get what you asked for....

** The included page can't do anything with the response Object>.Like adding the cookies,seeting the repsonse headers chainging the status code like that..

But if the included thing is dynamic, and you’re using the static include directive, does that mean that the dynamic stuff is evaluated only once?

Let’s say you include a JSP that has an EL expression that calls the rollIt function that generates a random number. Remember, with the include directive, that EL expression is simply copied into the includING JSP. So each time that page is accessed, the EL expression runs and a new random
number is generated. Burn this in: with the include directive, the source of the included thing becomes PART of the page with the include directive.


Recommendattions:
-----------------

<%@ include file="static.html" %> <jsp:include page="dynamic.jsp" />

But you can also do this::  

<%@ include file="dynamic.jsp" %> Yes you can do it.. It can be achived.Dynamic content will be evaluated every time the request comes in

<jsp:include page="static.html" /> Never recommended to have the static pages that doesn't change once prepared using the <jsp:include>.. It is a runtime hit every time..


The include directive is position-sensitive!

And it’s the ONLY directive whose position in the JSP actually matters. With a page directive, for example, you can put it anywhere in the page, although by convention most people put page directives at the top

<html><body>
<%@ include fi le=”Header.html”%> <br>
<em>We can help.</em> <br><br>
Contact us at: ${initParam.mainEmail} <br>
<%@ include fi le=”Footer.html”%>
</body></html>

Remember, everything from the JSP plus the two included files is combined into one big page

And, yes, the <jsp:include> is of course ALSO position-sensitive, but that’s more obvious than with the include directive..


HELLO! Did you actually LOOK at the generated servlet code for the include directive? You’ve got nested HTML and BODY tags! That’s wrong and stupid.

We made a page for the header, “Header.jsp”. It was a nice JSP all on its own, complete with its opening and closing HTML and BODY tags. Then we made the “Contact.jsp” and it, too, had nice opening and closing tags. Well, didn’t we say that everything in the included file is pasted (virtually) into the page with the include? That means everything

The code below, from the generated servlet, will NOT work in all browsers. It worked in ours because we got lucky.

Do NOT put opening and closing HTML and BODY tags within your reusable pieces! Design and write your layout template chunks (like headers, nav bars, etc.) assuming they will be included in some OTHER page.

Container:Don’t expect ME to strip out your redundant opening and closing tags.

Note: this idea of stripping out the opening and closing tags applies to BOTH include mechanisms <jsp:include> and the include directive.

Customizing the included content with <jsp:param>:
-------------------------------------------------

OK, so you’ve got a header that’s supposed to appear the same way on every page. But what if you want to customize part of the header? What if you want, say, a context-sensitive subtitle that’s part of the header, but that changes depending on the page? You have a couple options


The dumb way: put the subtitle information into the main page, as, say, the first thing in your page after the include for the header.

The smarter way: pass the subtitle information as a new request parameter to the included page!

Why that’s cool: if the subtitle information is supposed to be part of the header, but it’s a part that changes, you still want the header part of the template to make the decision about how that subtitle should appear in the final page. In other words, let the person who designed the header decide how the subtitle should be rendered

JSP that does the include:	
-------------------------
<html><body>
<jsp:include page=”Header.jsp” >
<jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>		<jsp:include> can have a BODY, so that you add (or replace) request parameters that the included thing can use.
<br>
<em>Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>

The included header that USES the new param (“Header.jspf”)

<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em> <br>
To the included file, the param set with <jsp:param> is just like any OTHER request parameter. Here we’re using EL to get it.

Note: this idea of params doesn’t make any sense with the include directive (which is not dynamic), so it applies ONLY to the <jsp:include> standard action.

if I can include one JSP in another, what if I wanted to forward from one JSP to another? If the client gets to my page and hasn’t logged in, I want to send him to a different page...

Of course, you don’t usually want to do this in production, because if you’re using MVC, the View is supposed to be the View! And the View has no business doing control logic. In other words, it shouldn’t be the View’s job to figure out if the guy is logged in or not—someone else should have made that decision (the Controller), before deciding to forward to the View.

Why bother if you’ll never do it? Well, you might one day stumble on a problem where <jsp:forward> is a useful solution. More importantly, like a lot of what’s in the book (and the exam), the use of <jsp:forward> is outthere. Lurking in gazillions of JSPs that you might one day find yourself maintaining (or ideally refactoring).


Conditional Forward:
--------------------

Imagine you’re a JSP and you assume you’re being called from a request that includes a userName parameter. Since you’re counting on that parameter, you want to first check that the userName parameter isn’t null. If it’s not, no problem—finish the response. But if the userName parameter is null, you want to stop right here and turn the whole request over to something else—like a different JSP that will ask for the userName

JSP with a conditional forward (Hello.jsp)

<html><body>
Welcome to our page!
<% if(request.getParameter(“userName”) == null){%>	If the parameter was null, forward the request (just like using a RequestDispatcher) to the page 							specified in the attribute
<jsp:forward page=”HandleIt.jsp” />
<%} %>
Hello ${param.userName}</body></html>

If we made it this far, the userName must have been valid! NOTHING in this page will appear in the response if the request is forwarded

HandleIt.jsp:

<html><body>
We’re sorry... you need to log in again.
<form action=”Hello.jsp” method=”get”>
Name: <input name=”userName” type=”text”>
<input name=”Submit” type=”submit”>
</form>
</body></html>


Direct /Hello.jsp No Parameter forwared to HandleIt.jsp..

Wait a minute... what happened to the words “Welcome to our page!”? They’re in the Hello.jsp before the forward happens...so why don’t they show up on the first request

Assuming the user types a name into the name input field, the second request won’t do the forward, since the userName request parameter has a non-null value.


With <jsp:forward>, the buffer is cleared BEFORE the forward?

When a forward happens, the resource to which the request is forwarded starts with a clear response buffer! In other words, anything written to the response before the forward happens is thrown out

This makes sense if the page is buffered... because what you write is sent to the buffer, and the Container just clears the buffer. But what if you commit the response BEFORE you do the forward? Like, what happens if you write something and then call flush() on the out object?


<html><body>
Welcome to our page!
<% out.flush(); %>
<% if (request.getParameter(“userName”) == null) { %>
<jsp:forward page=”HandleIt.jsp” /> <% } %>
Hello ${param.userName}
</body></html>

Welcome to our page! is displayed and in the application logs we find th error.

Stacktrace:]] with root cause
java.io.IOException: Error: Attempt to clear a buffer that's already been flushed

Except nobody will see the exception! The client just sees “Welcome to our page!”... and nothing else. The forward throws an exception but it’s too late for the Container to take back the response, so the client sees what was flushed, and that’s it. The forward doesn’t happen, the rest of the current page doesn’t happen. End of story for that page. So never do a flush-and-forward!

When you need more functionality, something beyond what you can get with the standard actions or EL, you don’t have to resort to scripting. In the next chapter, you’ll learn how to use the JSP Standard Tag Library 1.1 (JSTL 1.1) to do just about everything you’ll ever need, using a combination of tags and EL...

							She doesn’t know about JSTL tags

When you need more functionality, something beyond what you can get with the standard actions or EL, you don’t have to resort to scripting. In the next chapter, you’ll learn how to use the JSP Standard Tag Library 1.1 (JSTL 1.1) to do just about everything you’ll ever need, using a combination of tags and EL. Here’s a sneak peek of how to do our conditional forward without scripting. I don’t understand how we ended with a scriptlet. I was TOLD there would be no scripting in this chapter. If only there were a way to do a conditional test without having to go back to scripting...
			      -----------------------------------------------------------------------------------------
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>	**Declare a taglib directive that names the library where the tags live
<html><body>
Welcome to our page!
<c:if test=”${empty param.userName}” >
<jsp:forward page=”HandleIt.jsp” />----------------->This replaces the scriptlet if test
</c:if>


***JistPoints:
--------------

We didn’t show it in this chapter, but the <jsp:param> can be used inside the body of a <jsp:forward> tag as well..

The ONLY places where a <jsp:param> makes sense are within a <jsp:include> or a <jsp:forward> standard action..If the param name used in <jsp:param> already has a value as a request parameter, the new value will overwrite the previous one. Otherwise, a new request parameter is added to the request
The included resource has some limitations: it cannot change the response status code or set headers.

******The <jsp:forward> standard action forwards the request (just like using a RequestDispatcher) to another resource from the same web app.When a forward happens, the response buffer is cleared first! The resource to which the request was forwarded gets to start with a clean output. So anything written to the response before the forward will be thrown away.If you commit the response before the forward (by calling out.flush(), for example), the client will be sent whatever was flushed, but that’s it. The forward won’t happen, and the rest of the original page won’t be processed.


Note:: ${header.User-Agent} is equivalent to ${header[User-Agent]} or ${header.User-Agent} is equivalent to ${header[“User-Agent”]}

Both are incorrect: Options D and E are incorrect because of the dash in User-Agent. Only header[“User-Agent”] will work



In an HTML page with a rich, graphical layout, which JSP standard action can be used to import an image file into the JSP page?

A. <jsp:image page=”logo.png” />
B. <jsp:image file=”logo.png” />
C. <jsp:include page=”logo.png” />
D. <jsp:include file=”logo.png” />
E. This CANNOT be done using a JSP standard action

This is a tricky question because it is NOT possible to import the contents of any binary file into a JSP page, which generates an HTML response.


***If the . (dot) operator is used to access a bean property but the property doesn’t exist, then a runtime exception is thrown.

What is JSPF:?jspf is for JSP fragments. A fragment may not be complete and compilable source, so they likely can't be compiled independently of another, complete, source that references them.


An online jewelry retailer wishes to customize their online catalog for users who are logged in. They want to show specials for the user's birthstone month. The company's special offers are stored as a Map<String, Special[]> identified as specials in application scope and updated daily.
There is a bean stored as a session-scoped attribute named userInfo. Calling getBirthdate().getMonth() on this bean will return the user's birthstone month

${applicationScope.specials[userInfo.birthdate.month]}

Option B correctly retrieves our Map<String, Special[]> from the application scope. It then attempts to get the month value from the user's birthday and uses that as the key to search for a Special[] in the Map. Assuming a match is found in the Map, our Special[] is returned. This EL could be used in a c:forEach tag to iterate over the returned specials.

${mine:rollIt(${arrayList})}

					Sometimes you need more than EL or standard actions:
					----------------------------------------------------

What if you want to loop through the data in an array, and display one item per row in an HTML table? You know you could write that in two seconds using a for loop in a scriptlet. But you’re trying to get away from scripting. No problem. When EL and standard actions aren’t enough, you can use custom tags

Someone’s already written a pile of the ones you’re most likely to need, and bundled them into the JSP Standard Tag Library (JSTL).

The JSTL 1.1 is NOT part of the JSP 2.0 specification! Having access to the Servlet and JSP APIs doesn’t mean you have access to JSTL

Before you can use JSTL, you need to put two files, “jstl.jar” and “standard.jar” into the WEB-INF/lib directory of your web app. That means each web app needs a copy

There’s got to be a way to iterate through a collection in a JSP...without scripting. I want to show one element per row in a table...

Developers usually want way more standard actions or—even better—the ability to create their own actions.
That’s what custom tags are for. Instead of saying <jsp:setProperty>, you want to do something like <my:doCustomThing>

But it’s not that easy to create the support code that goes behind the tag. For the JSP page creator, custom tags are much easier to use than scripting. For the Java programmer, however, building the custom tag handler (the Java code invoked when a JSP uses the tag) is tougher.

Fortunately, there’s a standard library of custom tags known as the JSP Standard Tag Library (JSTL 1.1). Given that your JSP shouldn’t be doing a bunch of business logic anyway, you might find that the JSTL (combined with EL) is all you’ll ever need. Still, there could be times when you need something from, say, a custom tag library developed specifically for your company

In this chapter, you’ll learn how to use the core JSTL tags, as well as custom tags from other libraries

Custom Tag Library or JSP Standard Tag Library(Custom Tags)JSTL 1.1

------------------------------------------------------------------------------------------------------------------------------------------------------------

<b></b> tags make things bold! This comes out as an “invisible” bolded empty space.. Because the HTML is being rendered..
We should convert the < & > and entities of the HTML so it is not renedered..

<b>Tip of the Day:</b> <br/> <br/>
&lt;b&gt;&lt;/b&gt; tags make things bold!  To achive this.. Who can convert all the angualr brackets..So it will nnot be rendered by the browser..

If you know or think you might run into some XML entities that need to be displayed, and not just rendered, you can use the escapeXml attribute on c:out. Setting this to true means that any XML will be converted to something the web browser will render, angle brackets and all:

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.currentTip}' escapeXml='true' />
</div>

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.currentTip}' escapeXml='true' />Your HTML is treated as XHTML, which in turn is XML... so this affects HTML characters, too
</div>

Sometimes, you want just the opposite behavior. Maybe you’re building a page that takes content, and you want to display that content with HTML formatting. In that case, you can turn off XML conversion

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.rawHTML}' escapeXml='false' />
</div>


Conversion by default: The escapeXml attribute defaults to true, so you can leave it out if you want. A c:out tag without an escapeXML attribute is just the same as a c:out tag with escapeXML set to “true

<div class='tipBox'>
<b>Tip of the Day:</b> <br/> <br/>
<c:out value='${pageContent.currentTip}' />
</div>

Which HTML special characters are converted?

There are only five characters that require escaping: <, >, &, and the two quote symbols,single and double ". All of these are converted into the equivalent HTML entities. For example, < becomes &lt;, & becomes &amp;, and so on

Last month my company hired a web consultant to audit our web application. She noticed that we were using EL everywhere to output strings entered by users. She said this was a security risk and recommended we output all user strings using the c:out tag. What gives?

The security risk she is referring to is called cross-site hacking or cross-site scripting. The attack is sent from one user to another user’s web browser using your webapp as the delivery mechanism

User1 “cracker”:The cracker enters a comment field in your webapp, which is stored in the database. The cracker includes viral JavaScript code in the comment.

User2 “innocent":The innocent user views the cracker’s comment, but the text the cracker entered also includes JavaScript code that compromises user2’s system!

Using the c:out tag to render the text of users prevents cross-site hacking of this form by displaying the <script> tags and the JS code in user2’s web browser. This prevents the JS code from being interpreted by the browser, foils the attack from user1.


What happens if value of the EL expression is null?

Good question. You know an EL expression ${evalsToNull} generates an empty string in the response output, and so will <c:out value=”${evalsToNull}”/>.
But that’s not the end of the story with c:out. The c:out tag is smart, and it recognizes when the value is null and can perform a special action. That action is to provide a default value

Null values are rendered as blank text:
----------------------------------------

Suppose you have a page that welcomes the user by saying “Hello <user>.” But lately, users haven’t been logging in, and the output looks pretty odd:

EL prints nothing if user is null::::   <b>Hello ${user}.</b> Rendered as <b>Hello .</b>

A JSP expression tag prints nothing if user is null:: <b>Hello <%= user %>.</b> 	Rendered as :: <b>Hello .</b>

Set a default value with the default attribute:

Suppose you want to show these anonymous users a message that says, “Hello guest.” This is a perfect place to use a default value with the c:out tag. Just add a default attribute, and provide the value you want to print if your expression evaluates to null

<b>Hello <c:out value=’${user}’ default=’guest’ />.</b>  	This value is output if the value attribute evaluates to null.

<b>Hello <c:out value=’${user}’>guest</c:out></b>

Looping without scripting:
-------------------------

Imagine you want something that loops over a collection (say, an array of catalog items), pulls out one element at a time, and prints that element in a
dynamically-generated table row. You can’t possibly hard-code the complete table—you have no idea how many rows there will be at runtime, and of course you don’t know the values in the collection. The <c:forEach> tag is the answer.By the way, on the exam you are expected to know how to use <c:forEach> with tables.

<table>
<% String[] items = (String[]) request.getAttribute(“movieList”);
String var=null;
for (int i = 0; i < items.length; i++) {
var = items[i];
%>
<tr><td><%= var %></td></tr>
<% } %>
</table>


The <c:forEach> tag maps nicely into a for loop—the tag repeats the body of the tag for each element in the collection (and we use “collection” here to mean
either an array or Collection or Map or comma-delimited String). The key feature is that the tag assigns each element in the collection to the variable you declare with the var attribute

<c:forEach var=”movie” items=”${movieList}” >	The variable that holds each ELEMENT in the collection. Its value changes with each iteration
${movie}					The actual thing to loop over(array, Collection, Map, or a comma-delimited String).
</c:forEach>

<table>
<c:forEach var=”movie” items=”${movieList}” varStatus=”movieLoopCount” >
<tr>
<td>Count: ${movieLoopCount.count}</td>			varStatus makes a new variable that holds an instance of javax.servlet.jsp.jstl.core.LoopTagStatus
</tr>					Helpfully, the LoopTagStatus class has a count property that gives you the current value of the iteration counter.
					(Like the “i” in a for loop.)
<tr>
<td>${movie} <br><br></td> </tr>
</c:forEach>
</table>


What if you have something like a collection of collections? An array of arrays? You can nest <c:forEach> tags for more complex table structures. In this example, we put String arrays into an ArrayList, then make the ArrayList a request attribute. The JSP has to loop through the ArrayList to get each String array, then loop through each String array to print the actual elements of the array.

Ex: new Array[][]; new ArrayList<String[]>(); Where each element is again a complexType


String[] movies1 = {“Matrix Revolutions”, “Kill Bill”, “Boondock Saints”};
String[] movies2 = {“Amelie”, “Return of the King”, “Mean Girls”};
java.util.List movieList = new java.util.ArrayList();
movieList.add(movies1);
movieList.add(movies2);
request.setAttribute(“movies”, movieList);
	
<table>
			<c:forEach items="${requestScope.movies}" var="listElement">
				<tr>
					<c:forEach items="${listElement}" var="movie">
						<td><c:out value="${movie}"></c:out></td>
					</c:forEach>
				</tr>
			</c:forEach>
	</table>


**Items: Stores the Array,Collection,String(comma delimited) attribute that is in the request,Session,Context Scopes etc...

**Var: Stores the each element retrived from the collection. JSP creates the tag scoped attribute with the name given..it can be further used in the page anywhere..

**Body of the Tag is repeated for the no:of times i.e equal to the no:of elements in the collection

**varStatus: Makes a new varaible that holds an instance of javax.servlet.LoopTagStatus..Creates a attribute and stored in the pageScope


Is the “c” in <c:forEach> a required prefix?

Some prefix is required, of course; all tags and EL functions must have a prefix to give the Container the namespace for that tag or function name. But you
don’t HAVE to name the prefix “c”.It’s just the standard convention for the set of tags in JSTL known as “core”. We recommend using something other than “c” as a prefix, whenever you want to totally confuse the people you work with

The “var” variable is scoped to ONLY the tag!

That’s right, tag scope. No this isn’t a full-fledged scope to which you can bind attributes like the other four— page, request, session, and application. Tag scope simply means that the variable was declared INSIDE a loop.And you already know what that means in Java terms. You’ll see that for most other tags, a variable set with a “var” attribute will be visible to whatever scope you specifically set (using an optional “scope” attribute), OR, the variable will default to page scope.


<c:if test=”${userType eq 'member'}” > Assume a servlet somewhere set the userType attribute, based on the user’s login information.
<jsp:include page="inputComments.jsp"/> Yes, those are SINGLE quotes around ‘member’. Don’t forget that you can use EITHER double or single
					quotes in your tags and EL
</c:if>


What if you want to do one thing if the condition is true, and a different thing if the condition is false?In other words, what if we want to show either one thing or the other, but nobody will see both? The <c:if> on the previous page worked fine because the logic was: everybody sees the first part, and then if the test condition is true, show a little extra.

But now imagine this scenario: you have a car sales web site, and you want to customize the headline that shows up on each page, based on a user attribute set up earlier in the session. Most of the page is the same regardless of the user, but each user sees a customized headline —one that best fits the user’s personal motivation for buying. (We are, after all, trying to sell him a car and become obscenely wealthy.) At the beginning of the session, a form asks the user to choose what’s most important

The first page asks the user what he feels is most important. Just like a good salesman, the pages that talk about features of the car will customize the presentation based on the user’s preference, so that each feature of the car looks like it was made with HIS personal needs in mind

The <c:if> tag won’t work for this:
-----------------------------------

There’s no way to do exactly what we want using the <c:if> tag, because it doesn’t have an “else”. We can almost do it, using something like:

<c:if test=”${userPref==’performance’}” >
Now you can stop even if you <em>do</em> drive insanely fast..
</c:if>
<c:if test=”${userPref==’safety’}” >
Our brakes won’t lock up no matter how bad a driver you are.
</c:if>
<c:if test=”${userPref==’maintenance’}” >
Lost your tech job? No problem--you won’t have to service these brakes
for at least three years.
</c:if>  

********But what happens if userPref doesn’t match any of these? There’s no way to specify the default headline
	
<!-- continue with the rest of the page that EVERYONE should see -->

The <c:if> won’t work unless we’re CERTAIN that we’ll never need a default value. What we really need is kind of an if/else construct


JSP with scripting, and it does what we want

<html><body><h2>
<% String pref = (String) session.getAttribute(“userPref”);
if (pref.equals(“performance”)) {
out.println(“Now you can stop even if you <em>do</em> drive insanely fast.”);
} else if (pref.equals(“safety”)) {
out.println(“Our brakes won’t lock up, no matter how bad a driver you are. “);
} else if (pref.equals(“maintenance”)) {
out.println(“ Lost your tech job? No problem--you won’t have to service these brakes for at least three years.”);
} else {
// userPref doesn’t match those, so print the default headline
out.println(“Our brakes are the best.”);
} %>


The <c:choose> tag and its partners <c:when> and <c:otherwise>
-------------------------------------------------------------
<c:choose>
<c:when test=”${userPref == ‘performance’}”> Now you can stop even if you <em>do</em> drive insanely fast. </c:when>
<c:when test=”${userPref == ‘safety’}”> Our brakes will never lock up, no matter how bad a driver you are. </c:when>
<c:when test=”${userPref == ‘maintenance’}”>Lost your tech job? No problem--you won’t have to service these brakesfor at least three years.</c:when>
<c:otherwise> Our brakes are the best.</c:otherwise>
</c:choose>

No more than ONE of these four bodies (including the <c:otherwise>) will run...It’s not like a switch statement there’s no fall-through

If none of the <c:when> tests are true, the <c:otherwise> runs as a default. Note: the <c:choose> tag is NOT required to have a <c:otherwise> tag.


The <c:set> tag... so much cooler than <jsp:setProperty>:
--------------------------------------------------------

The <jsp:setProperty> tag can do only one thing—set the property of a bean..But what if you want to set a value in a Map? What if you want to make a new entry in a Map? Or what if you simply want to create a new request-scoped attribute?

You get all that with <c:set>, but you have to learn a few simple rules. Set comes in two flavors: var and target. The var version is for setting attribute variables, the target version is for setting bean properties or Map values.Each of the two flavors comes in two variations: with or without a body.

With NoBody:

<c:set var=”userLevel” scope=”session” value=”Cowboy” />

If there’s NOT a session-scoped attribute named “userLevel”, this tag creates one (assuming the value attribute is not null).
The scope is optional; var is required. You MUST specify a value, but you have a choice between putting in a value attribute or putting the value in the tag body..value doesn’t have to be a String...

<c:set var=”Fido” value=”${person.dog}” /> If ${person.dog} evaluates to a Dog object, then “Fido” is of type Dog.

WITH a body:

<c:set var=”userLevel” scope=”session” >Sheriff, Bartender, Cowgirl </c:set> The body is evaluated and used as the value of the variable.

If the value evaluates to null, the variable will be REMOVED! That’s right, removed
-------------------------------------------------------------------------------------
Imagine that for the value (either in the body of the tag or using the value at- tribute), you use ${person.dog}. If ${person.dog} evaluates to null (meaning there is no person, or person’s dog property is null, then if there IS a variable attribute with a name “Fido”, that attribute will be removed!

if you don’t specify a scope, it will start looking at page, then request, etc.). This happens even if the “Fido” attribute was originally set as a String, or a Duck, or a Broccoli

With NO body

<c:set target=”${PetMap}” property=”dogName” value=”Clover” />

****target must NOT be null!!..If target is a Map, set the value of a key named “dogName"..If target is a bean, set the value of the property “dogName"

<c:set target=”${person}” property=”name” > ${foo.name}</c:set>


The “target” must evaluate to the OBJECT! You don’t type in the String “id” name of the bean or Map attribute!

Person p=new Person(); p.setName("Muni"); p.setCourse(map);
request.setAttrbute("person",p);

<c:set scope="request" var="person" value="${requestScope.person}"/>

Bean 

class Person{
	private String name;
	private Map<String,String> course;		Assume the Person attribute is stored somewhere in the requestScope
}

<c:set target="${requestScope.person}" property="name" value="Clover"/>			Changing the value of the name property
<c:set target="${requestScope.person}" property="course" value="Clover"/>		Adding the new Entries to the existing Map object
<c:set target="${requestScope.person}" property="course" value="Clover1"/>
<c:set target="${requestScope.person}" property="course" value="Clover2"/>

The “target” must evaluate to the OBJECT! You don’t type in the String “id” name of the bean or Map attribute!

This is a huge gotcha. In the <c:set> tag, the “target” attribute in the tag seems like it should work just like “id” in the <jsp:useBean>. Even the “var” attribute in the other version of <c:set> takes a String literal that represents the name of the scoped attribute. BUT... it doesn’t work this way with “target”! With the “target” attribute, you do NOT type in the String literal that represents the name under which the attribute was bound to the page, scope, etc. No, the “target” attribute needs a value that resolves to the REAL THING. That means an EL expression or a scripting expression (<%= %>), or something we haven’t seen yet: <jsp:attribute>.


KeyPoints:
---------

1) You can never have BOTH the “var” and “target” attributes in a <c:set>.
2) Scope” is optional, but if you don’t use it the default is page scope
3) If the “value” is null, the attribute named by “var” will be removed
4) If the attribute named by “var” does not exist, it’ll be created, but only if “value” is not null.
5) If the “target” expression is null, the Container throws an exception
6) The “target” is for putting in an expression that resolves to the Real Object. If you put in a String literal that represents the “id” name of the bean      or Map, it won’t work. In other words, “target” is not for the attribute name of the bean or Map—it’s for the actual attribute object.
7) If the “target” expression is not a Map or a bean, the Container throws an exception.
8) If the “target” expression is a bean, but the bean does not have a property that matches “property”, the Container throws an exception. Remember that the    EL expression ${bean.notAProperty} will also throw an exception.


Why would I use the body version instead of the no-body version? It looks like they both do exactly the same thing.

The body version is just for convenience when you want more room for the value. It might be a long and complex expression, for example, and putting it in the body makes it easier to read.

If I don’t specify a scope, does that mean it will find attributes that are ONLY within page scope, or does it do a search beginning with page scope?

If you don’t use the optional “scope” attribute in the tag, then the tag will only look in the page scope space. Sorry, you will just have to know exactly which scope you are dealing with


Note: The word attribute is overloaded.. You can bind the attributes in the tag into the fourscopes[page,request,response& session]

<c:set var="userLevel" scope="session" value="cowboy"/> The attribute userLevel is created in session scope for the attribute value var
<c:for Each  items="${list/array/collection/map/commaDelimitedString}" var=""> Using the var attr value an attribute is created for the session scope

<c:remove> just makes sense::
-----------------------------
We agree with Dick—using a set to remove something feels wrong. (But remember, set does a remove only when you pass in a null value.) The <c:remove> tag is intuitive and simple

<c:remove var=”userStatus” scope=”request” />
The var attribute MUST be a String literal! It can’t be an expression....It has to be only String can't be like say ${sessionScope.userLevel} or{userLevel}
*****The scope is optional, but if you leave it out then the attribute is removed from ALL scopes

<c:set var=”userStatus” scope=”request” value=”Brilliant” />
userStatus: ${userStatus} <br>
<c:remove var=”userStatus” scope=”request” />
userStatus is now: ${userStatus}		The value of userStatus was removed, so nothing prints when the EL expression is used AFTER the remove.
	
With <c:import>, there are now THREE ways to include content:
-------------------------------------------------------------
So far, we’ve used two different ways to add content from another resource into a JSP. But there’s yet another way, using JSTL

<%@ include file=”Header.html” %>
Static: adds the content from the value of the file attribute to the current page at translation time.

<jsp:include page=”Header.jsp” />
Dynamic: adds the content from the value of the page attribute to the current page at request time


<c:import url=”http://www.wickedlysmart.com/skyler/horse.html” />

Unlike the other two includes, the <c:import> url can be from outside the web Container!

Dynamic: adds the content from the value of the URL attribute to the current page, at request time. It works a lot like <jsp:include>, but it’s more
powerful and flexible

They all have different attribute names! (And watch out for “include” vs. “import”)

Each of the three mechanisms for including content from another resource into your JSP uses a different word for the attribute. The include directive uses file, the <jsp:include> uses page, and the JSTL <c:import> tag uses url. This makes sense, when you think about it... but you do have to memorize all three. The directive was originally intended for static layout templates, like HTML headers. In other words, a “file”. The <jsp:include> was intended more for dynamic content coming from JSPs, so they named the attribute “page” to reflect that. The attribute for <c:import> is named for exactly what you give it—a URL! Remember, the fi rst two “includes” can’t go outside the current Container, but <c:import> can.

<c:import> can reach OUTSIDE the web app:
----------------------------------------

This simple example shows a JSP on Server A importing the contents of a URL on Server B. At request time, the HTML chunk in the imported file is added to
the JSP. The imported chunk uses a reference to an image that is also on Server B.

Server A, the JSP doing the import::
----------------------------------
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
<c:import url=”http://www.wickedlysmart.com/skyler/horse.html” />
<br> This is my horse. </body></html>

Server B, the imported content
-----------------------------

The imported file <img src=”http://www.wickedlysmart.com/skyler/horse.gif”>

Don’t forget: as with other include mechanisms, the thing you import should be an HTML fragment and NOT a complete page with opening and closing <html><body> tags

Customizing the thing you include:
---------------------------------

Remember in the previous chapter when we did a <jsp:include> to put in the layout header (a graphic with some text), but we wanted to customize the subtitle used in the header? We used <jsp:param> to make that happen..Giving the chance for the header itself to print the header information.

The JSP with the <jsp:include>::
--------------------------------
<html><body>
<jsp:include page=”Header.jsp”>
<jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>
<br>
<em>Welcome to our Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>

The included file (“Header.jsp”)::
--------------------------------
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em>
<br>

1)The JSP with the <jsp:import>
-------------------------------
<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<html><body>
<c:import url=”Header.jsp” >
<c:param name=”subTitle” value=”We take the sting out of SOAP.” />
</c:import>
<br>
<em>Welcome to our Web Services Support Group.</em> <br><br>
Contact us at: ${initParam.mainEmail}
</body></html>

2) The included file (“Header.jsp”)
-----------------------------------
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${param.subTitle}</strong></em>
<br>

Note: <c:import> can also be used to import the file from the 


							URL ReWriting in JSP
							-------------------

How can you guarantee session tracking from a JSP... without using scripting..

Session tracking happens automatically with JSPs, unless you explicitly disable it with a page directive that has a session attribute that says session=”false..

My real question is--if the client doesn’t support cookies, how can I get URL rewriting to happen? How can I get the session ID added to the URLs in my JSP

Ahhh... he obviously doesn’t know about the <c:url> tag. It does URL rewriting automatically

But with servlets, you STILL have to encode your URLs. In other words, you still have to tell the Container to “append the jsessionid to the end of this particular URL...” for each URL where it matters. Well, you can do the same thing from a JSP, using the <c:url> tag.


out.println(“<html><body>”);
out.println(“<a href=\”” + response.encodeURL(“/BeerTest.do”) + “\”>click</a>”);
out.println(“</body></html>”);


<a href="<c:url value='/inputComments.jsp'/>">Click here</a> 	This adds the jsessionid to the end of the “value” relative URL (if cookies are disabled).

What if the URL needs encoding:
------------------------------
For example, if a form on an HTML page has two text fields—first name and last name—the request URL will stick the parameter names and values on to the end of the request URL. But...an HTTP request won’t work correctly if it contains unsafe characters (although most modern browsers will try to
compensate for this..

If you’re a web developer, this is old news, but if you’re new to web development, you need to know that URLs often need to be encoded. URL encoding means replacing the unsafe/reserved characters with other characters, and then the whole thing is decoded again on the server side. For example, spaces aren’t allowed in a URL, but you can substitute a plus sign “+” for the space. The problem is, <c:url> does NOT automatically encode your URLs!

Using <c:url> with a query string:
----------------------------------

<c:set var="last” value=”Hidden Cursor” />
<c:set var=”first” value=”Crouching Pixels”/>
<c:url value=”/inputComments.jsp?first=${first}&last=${last}” var=”inputURL” /> Use the optional “var” attribute when you want access to this value later

The URL using params is: ${inputURL} <br>  The problem is, <c:url> does NOT automatically encode your URLs!

O/P:The URL using param's is: /06SixthDynamicWebProject/inputComments.jsp?first=Crouching Pixels&last=Hidden Cursor 

<c:url value=”/inputComments.jsp” var=”inputURL” >	This solves our problem! Now we get both URL rewriting and URL encoding.
<c:param name=”firstName” value=”${first}” />
<c:param name=”lastName” value=”${last}” />             Now we’re safe, because <c:param> takes care of the encoding!
</c:url

O/P:The URL using param's is: /06SixthDynamicWebProject/inputComments.jsp?firstName=Hidden+Cursor&lastName=Crouching+Pixels 

							Error Handling:
							--------------

**You do NOT want your clients to see this UGLY Error WebPage that is showing the Tomcat Container generated webpage..

The guy surfing your site doesn’t want to see your stack trace. And he’s not too thrilled to get a standard “404 Not Found”, either.
You can’t prevent all errors, of course, but you can at least give the user a friendlier (and more attractive) error response page. You can design a custom page to handle errors, then use the page directive to configure it..


4xx (ClientSide Errors.. Because of the Wrong inputs passing from the client) 
5xx (Server Side Errors.. due to the Logical/Programming mistakes on the server Side)

The designated ERROR page (“errorPage.jsp”)
--------------------------------------------
<%@ page isErrorPage=”true” %>
<html><body>
<strong>Bummer.</strong>			********Confirms for the Container, "Yes, this IS an officially-designated error page"
<img src=”images/bummerGuy.jpg”>
</body></html>


The BAD page that throws an exception (“badPage.jsp”)
---------------------------------------------------
page that throws an exception (“badPage.jsp”)
<%@ page errorPage=”errorPage.jsp” %>
<html><body>					***Tells the Container, “If something goes wrong here, forward the request to errorPage.jsp”
About to be bad...
<% int x = 10/0; %>
</body></html>


http://localhost:8080/tests/badPage.jsp 

****The REQUEST was for “badPage.jsp”, but that page threw an exception, so the RESPONSE came from “errorPage.jsp"

It will take me FOREVER to put page directives in all my JSPs, to specify the error page to use..And what if I want a different error page depending on the error? If only there were a way to configure error pages for the whole web app...

** For any Kind of the error same Page will be utilised

You need one specific page for the one kind of Error.. Oveerding the above Behaviour

You can declare error pages in the DD for the entire web app, and you can even configure different error pages for different exception types, or HTTP error code types (404, 500, etc.).

The Container uses <error-page> configuration in the DD as the default, but if a JSP has an explicit errorPage page directive, the Container uses the directive.

****Container looks into the Web.xml to observe the matching errorPage if it is Configured for the generated ExceptionType or HTTP status Code..If there are no exception pages configured then it uses the errorPage attribute and forwards the request to the errorPage..

You can declare error pages in the DD based on either the <exception-type> or the HTTP status <error-code> number. That way you can show the client different error pages specific to the type of the problem that generated the error

This applies to everything in your web app—not just JSPs. You can override it in individual JSPs by adding a page directive with an errorPage attribute

<error-page>
<exception-type>java.lang.Throwable</exception-type>
<location>/errorPage.jsp</location>
</error-page>

Declaring an error page for a more explicit exception::

This configures an error page that’s called only when there’s an ArithmeticException. If you have both this declaration and the catch-all above, any exception other than ArithmeticException will still end up at the “errorPage.jsp”.

<error-page>
<exception-type>java.lang.ArithmeticException</exception-type>
<location>/arithmeticError.jsp</location>
</error-page>


Declaring an error page based on an HTTP status code:

This configures an error page that’s called only when the status code for the response is “404” (file not found).

<error-page>
<error-code>404</error-code>
<location>/notFoundError.jsp</location>
</error-page>

***The <location> MUST be relative to the web-app root/context, which means it MUST start with a slash. (This is true regardless of whether the error page is based on <error-code> or <exception-type>.)


Error pages get an extra object: exception:
-------------------------------------------

An error page is essentially the JSP that handles the exception, so the Container gives the page an extra object for the exception. You probably
won’t want to show the exception to the user, but you’ve got it. In a scriptlet, you can use the implicit object exception, and from a JSP, you
can use the EL implicit object ${pageContext.exception}.

The object is type java.lang.Throwable, so in a script you can call methods, and with EL you can access the stackTrace and message properties.

A more explicit ERROR page (“errorPage.jsp”):
--------------------------------------------

<%@ page isErrorPage=”true” %>		****Assume this is page handling the exception generated in Servlet.. And Showing the user message
<html><body>
<strong>Bummer.</strong><br>
You caused a ${pageContext.exception} on the server.<br>
<img src=”images/bummerGuy.jpg”>
</body></html>


Note: the exception implicit object is available ONLY to error pages with an explicitly-defined page directive:

<%@ page isErrorPage=”true” %> In other words, configuring an error page in the DD is not enough to make the Container give that page the implicit exception object!


Execution Order for the different configurations:
-------------------------------------------------

500
400				------->Only for the ArithmeticException this page is mapped. Rest all exceptions Throwable page is utilised. It will not
Throwable				utilise the 500 & 400 pages also
ArithmeticException

500
400				-------->Only for the ArithmeticException this page is mapped. for the server side errors 500 page is mapped 
ArithmeticException			for client exceptions 400 pages is matched.

Throwable
400				--------->For the any exceptions only Throwable deafult page will be shownup..Error code pages will not be utilised
500


If you want to show the different pages for the client & server side erros use the 400 & 500 error pages only..Without the Throwable Error Pages.

If you want to show samepage for all the client server side Errors use the Throwable page without configuring the 400 & 500 ErrorPage..


Error pages get an extra object: exception:
---------------------------------------------

An error page is essentially the JSP that handles the exception, so the Container gives the page an extra object for the exception. You probably won’t want to show the exception to the user, but you’ve got it. In a scriptlet, you can use the implicit object exception, and from a JSP, you can use the EL implicit object ${pageContext.exception}. The object is type java.lang.Throwable, so in a script you can call methods, and with EL you can access the stackTrace and message properties.


<%@ page isErrorPage=”true” %>
<html><body>
<strong>Bummer.</strong><br>
You caused a ${pageContext.exception} on the server.<br>
<img src=”images/bummerGuy.jpg”>
</body></html>

Note: The exception implicit object is available ONLY to error pages with an explicitly-defined page directive:
<%@ page isErrorPage=”true” %> In other words, configuring an error page in the DD is not enough to make the Container give that page the implicit exception object

The <c:catch> tag. Like try/catch...sort of:
-------------------------------------------

If you have a page that invokes a risky tag, but you think you can recover, there’s a solution. You can do a kind of try/catch using the <c:catch> tag, to wrap the risky tag or expression. Because if you don’t, and an exception is thrown, your default error handling will kick in and the user will get the error page declared in the DD.

The part that might feel a little strange is that the <c:catch> serves as both the try and the catch—there’s no separate try tag. You wrap the risky EL or tag calls or whatever in the body of a <c:catch>, and the exception is caught right there...

But you can’t assume it’s exactly like a catch block, either, because once the exception occurs, control jumps to the end of the <c:catch> tag body (more on that in a minute).

Idea: is Don't worry about that exception and process the next Lines in the current Page..

<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<%@ page errorPage=”errorPage.jsp” %>
<html><body>
About to do a risky thing: <br>
<c:catch>
<% int x = 10/0; %>			This scriptlet will DEFINITELY cause an exception... but we caught it instead of triggering the error page
</c:catch>
If you see this, we survived. 		If this prints out, then we KNOW we made it past the exception (which in this example, means we successfully caught 						the exception).
</body></html>

But how do I get access to the Exception object? The one that was actually thrown? Since this isn’t an actual error page, the implicit exception object doesn’t work here

You can make the exception an attribute:
---------------------------------------

In a real Java try/catch, the catch argument is the exception object. But with web app error handling, remember, only officially-designated error
pages get the exception object. To any other page, the exception just isn’t there. So this does not work:

<c:catch>
Inside the catch...
<% int x = 10/0; %> </c:catch>				Won’t work because this isn’t an official error page, so it doesn’t get the exception object.
Exception was: ${pageContext.exception}

Using the “var” attribute in <c:catch>:
--------------------------------------

Use the optional var attribute if you want to access the exception after the end of the <c:catch> tag. It puts the exception object into the page scope, under the name you declare as the value of var.

<%@ taglib prefi x=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
<%@ page errorPage=”errorPage.jsp” %>
<html><body>
About to do a risky thing: <br>
<c:catch var=”myException”>
Inside the catch...
<% int x = 10/0; %>
</c:catch>
<c:if test=”${myException != null}”>				This now acts like the Catch Block
There was an exception: ${myException.message} <br>
</c:if>

*****Now there’s an attribute myException, and since it’s a Throwable, it has a “message” property (because Throwable has a getMessage() method

Flow control works in a <c:catch> the way it does in a try block—NOTHING runs inside the <c:catch> body after the exception?
----------------------------------------------------------------------------------------------------------------------------

In a regular Java try/catch, once the exception occurs, the code BELOW that point in the try block never executes—control jumps directly to the catch block.
With the <c:catch> tag, once the exception occurs, two things happen:

1) If you used the optional “var” attribute, the exception object is assigned to it.
2) Flow jumps to below the body of the <c:catch> tag.

Flow control works in a <c:catch> the way it does in a try block—NOTHING runs inside the <c:catch> body after the exception.

<c:catch>
Inside the catch...
<% int x = 10/0; %>

After the catch...				//You’ll NEVER see this!

</c:catch>

We survived.

Be careful about this. If you want to use the “var” exception object, you must wait until AFTER you get to the end of the <c:catch> body. In other words, there is simply no way to use any information about the exception WITHIN the <c:catch> tag body.

A <c:catch> acts more like a try block, because it’s where you put the risky code. Except it’s like a try that never needs (or has) a catch or finally block. Confused?


JSTL Core Library 
------------------

General-purpose
<c:out>			Printing the Data on the Webpages..
<c:set>			Setting the attribute on request application & session scopes..Setting the values to the bean Properties/adding the new keys for Map
<c:remove>		Removing the attribute from the request application & session scopes
<c:catch>		Catching the Exceptions thrown from the risky tags & EL expresssions

Conditional
<c:if>
<c:choose>
<c:when>
<c:otherwise>

URL related
<c:import>	Including the content from the another server webpage to the current Webpage..you can also use for including the Current WebApp content
<c:url>		Encoding the Urls and for attaching the JsessionIds 
<c:redirect>	using the SendRedirect 
<c:param>

Iteration
<c:forEach>	Iterating over the Collection.. Like the Enchanced For Loop
<c:forTokens>

The “SQL” library:
------------------

Database access
<sql:query>
<sql:update>
<sql:setDataSource>
<sql:param>
<sql:dateParam>


The “Formatting” library
------------------------
Internationalization
<fmt:message>
<fmt:setLocale>
<fmt:bundle>
<fmt:setBundle>
<fmt:param>
<fmt:requestEncoding>

Formatting
<fmt:timeZone>
<fmt:setTimeZone>
<fmt:formatNumber>
<fmt:parseNumber>
<fmt:parseDate>

The “XML” library
-----------------

Core XML actions
<x:parse>
<x:out>
<x:set>


XML flow control
<x:if>
<x:choose>
<x:when>
<x:otherwise>
<x:forEach>

Transform actions
<x:transform>
<x:param>


What happens, for example, if someone hands you a custom tag library they created for your company or project? How do you know what the tags are and how to use them? With JSTL, it’s easy—the JSTL 1.1 specification documents each tag, including how to use each of the required and optional attributes.

But not every custom tag will come so nicely packaged and well-documented. You have to know how to figure out a tag even if the documentation is weak or nonexistent, and, one more thing—you have to know how to deploy a custom tag library

To use a custom library, you MUST read the TLD. Everything you need to know is in there.

TagNames & Syntax:

The tag has a name, obviously. In <c:set>, the tag name is set, and the prefix is c. You can use any prefix you want, but the name comes from the TLD. The syntax includes things like required and optional attributes, whether the tag can have a body (and if so, what you can put there), the type of each attribute, and whether the attribute can be an expression (vs. a literal String).


The library URI

The URI is a unique identifier in the Tag Library Descriptor (TLD). In other words, it’s a unique name for the tag library the TLD describes.
The URI is what you put in your taglib directive. It’s what tells the Container how to identify the TLD file within the web app, which the Container needs in order to map the tag name used in the JSP to the Java code that runs when you use the tag 


The TLD describes two main things: custom tags, and EL functions

<tlib-version>1.2</tlib-version>
<short-name>RandomTags</short-name>
<function>
<name>rollIt</name>
<function-class>foo.DiceRoller</function-class>
<function-signature>int rollDice()</function-signature>
</function>
<uri>randomThings</uri>

<tag>
<description>random advice</description>			Optional, but a really good idea...
<name>advice</name>						REQUIRED! This is what you use inside the tag (example: <my:advice>)
<tag-class>foo.AdvisorTagHandler</tag-class>			REQUIRED! This is how the Container knows what to call when someone uses the tag in a JSP.	
<body-content>empty</body-content>				REQUIRED! This says that the tag must NOT have anything in the body.
<attribute>
<name>user</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>					This says the “user” attribute can be a runtime expression value (i.e. doesn’t have to be a 								String literal
</attribute>
</tag>


<html><body>
<%@ taglib prefi x=”mine” uri=”randomThings”%>		Each library you use in a page needs its own taglib directive with a unique prefix
Advisor Page<br>
<mine:advice user=”${userName}” />
</body></html>

The custom tag handler:
----------------------

public class AdvisorTagHandler extends SimpleTagSupport {

private String user;

public void doTag() throws JspException, IOException { 

getJspContext().getOut().write( “Hello “ + user + “ <br>” );
getJspContext().getOut().write( “Your advice is: “ + getAdvice() );

}
public void setUser(String user) {
	this.user=user;
}

String getAdvice() {

String[] adviceStrings = {“That color’s not working for you.”,“You should call in sick.”, “You might want to rethink that haircut.”};
int random = (int) (Math.random() * adviceStrings.length);
return adviceStrings[random];
} }


Custom tag handlers don’t use custom method names
------------------------------------------------

With EL functions, you created a Java class with a static method, named the method whatever you wanted, then used the TLD to map the actual method <function-signature> to the function <name>. But with custom tags, the method name is ALWAYS doTag(), so you never declare the method name for a custom tag.
Only functions use a method signature declaration in the TLD!


The <rtexprvalue> is especially important because it tells you whether the value of the attribute is evaluated at translation or runtime. If the <rtexprvalue> is false, or the <rtexprvalue> isn’t defined, you can use only a String literal as that attribute’s value!

<my:handleIt rate=”${currentRate}” /> NO! This must NOT be an expression... it must be a String literal


You still didn’t answer the question about how you know what type the attribute is...

We’ll start with the easy one. If the <rtexprvalue> is false (or not there at all), then the attribute type can be ONLY a String literal. But if you can
use an expression, then you have to hope that it’s either dead obvious from the tag description and attribute name, OR that the developer included the
optional <type> subelement of the <attribute> element. The <type> takes a fully-qualified class name for the type. Whether the TLD declares the type or
not, the Container expects the type of the expression to match the type of argument in the tag handler’s setter method for that attribute. In other words,
if the tag handler has a setDog(Dog) method for the “dog” attribute, then the value of your expression for that attribute better evaluate to a Dog object! (Orsomething that can be implicitly assigned to a Dog reference type.)

<rtexprvalue> is NOT just for EL expressions:
--------------------------------------------

EL expressions:: <mine:advice user=”${userName}” />

Scripting expressions: <mine:advice user=’<%= request.getAttribute(“username”) %>’ /> As there are "" inside user singlequotes around the attribute

<jsp:attribute> standard actions

<mine:advice>
<jsp:attribute name=”user”>${userName}</jsp:attribute>    What is this?? I thought this tag didn’t have a body
</mine:advice>

<jsp:attribute> lets you put attributes in the BODY of a tag, even when the tag body is explicitly declared “empty” in the TLD
-------------------------------------------------------------------------------------------------------------------------------
The <jsp:attribute> is simply an alternate way to define attributes to a tag. The key point is, there must be only ONE <jsp:attribute> for EACH attribute in the enclosing tag. So if you have a tag that normally takes three attributes IN the tag (as opposed to in the body), then inside the body you’ll now have three <jsp:attribute> tags, one for each attribute. Also notice that the <jsp:attribute> has an attribute of its own, name, where you specify the name of the outer tag’s attribute for which you’re setting a value.There’s a little more about this on the next page...


A tag can have a body only if the <body-content> element for this tag is not configured with a value of empty. The <body-content> element can be one of either three or four values, depending on the type of tag

<body-content>empty</body-content>  It can have the attributes.. The tag must NOT have a body.

<body-content>scriptless</body-content> The tag must NOT have scripting elements (scriptlets, scripting expressions, and declarations), but it CAN have template text and EL and custom and standard actions

<body-content>tagdependent</body-content> The tag body is treated as plain text, so the EL is NOT evaluated and tags/actions are not triggered

<body-content>JSP</body-content>The tag body can have anything that can go inside a JSP


THREE ways to invoke a tag that can’t have a body

Each of these are acceptable ways to invoke a tag configured in the TLD with <body-content>empty</body-content>.

An empty tag::<mine:advice user=”${userName}” />

A tag with nothing between the opening and closing tags::<mine:advice user=”${userName}”> </mine:advice>

A tag with only <jsp:attribute> tags between the opening and closing tags
------------------------------------------------------------------------
<mine:advice>
<jsp:attribute name=”user”>${userName}</jsp:attribute>			<jsp:attribute> tags don’t count as “body content”.
</mine:advice>


Summary of the tag handler, the TLD, and the JSP
------------------------------------------------
The tag handler developer creates the TLD to tell both the Container and the JSP developer how to use the tag. A JSP developer doesn’t care about the <tag-class> element in the TLD; that’s for the Container to worry about. The JSP developer cares most about the uri, the tag name, and the tag syntax. Can the tag have a body? Does this attribute have to be a String literal, or can it be an expression? Is this attribute optional? What type does the expression need to evaluate to?Think of the TLD as the API for custom tags. You have to know how to call it and what arguments it needs


				The taglib <uri> is just a name, not a location
				-----------------------------------------------
The <uri> element in the TLD is a unique name for the tag library. That’s it. It does NOT need to represent any actual location (path or URL, for example). It simply has to be a name—the same name you use in the taglib directive.

“But,” you’re asking, “how come with the JSTL it gives the full URL to the library?” The taglib directive for the JSTL is:

<%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core” %>
This LOOKS like a URL to a web resource, but it’s not. It’s just a name that happens to be formatted as a URL

The web Container doesn’t normally try to request something from the uri in the taglib directive. It doesn’t need to use the uri as a location! If you type that as a URL into your browser, you’ll be redirected to a different URL, one that has information about JSTL. The Container could care less that this particular uri happens to also be a valid URL (the whole “http://...” thing). It’s just the convention Sun uses for the uri, to help ensure that it’s a unique name. Sun could have named the JSTL uri “java_foo_tags” and it would have worked in exactly the same way. All that matters is that the <uri> in the TLD and the uri in the taglib directive match!

As a developer, though, you do want to work out a scheme to give your libraries unique <uri> values, because <uri> names need to be unique for any given web app. You can’t, for example, have two TLD files in the same web app, with the
same <uri>. So, the domain name convention is a good one, but you don’t necessarily need to use that for all of your in-house development

As a developer, though, you do want to work out a scheme to give your libraries unique <uri> values, because <uri> names need to be unique for any given web app. You can’t, for example, have two TLD files in the same web app, with the same <uri>. So, the domain name convention is a good one, but you don’t necessarily need to use that for all of your in-house development..


**URI in <%@taglib %> is not location of the TLD file or the actual URL on the internet.. It's just convention to use the domain name so multiple TLDS in the same webapp couldn't get the Same name..

Badpractisce:If you don't specify the uri in the TLD file the Uri in the <%@taglib%>


Before JSP 2.0, the developer had to specify a mapping between the <uri> in the TLD and the actual location of the TLD file. So when a JSP page had a taglib directive like this:
The Deployment Descriptor (web.xml) had to tell the Container where the TLD file with a matching <uri> was located. You did that with a <taglib> element in the DD. <%@ taglib prefix=”mine” uri=”randomThings”%>

The OLD (before JSP 2.0) way to map a taglib uri to a TLD file

<jsp-config>
<taglib>
<taglib-uri>randomThings</taglib-uri>
<taglib-location>/WEB-INF/myFunctions.tld</taglib-location>
</taglib>
</jsp-config>

The NEW (JSP 2.0) way to map a taglib uri to a TLD file

The Container automatically builds a map between TLD files and <uri> names, so that when a JSP invokes a tag, the Container knows exactly where to find the TLD that describes the tag.

How? By looking through a specific set of locations where TLDs are allowed to live. When you deploy a web app, as long as you put the TLD in a place the Container will search, the Container will find the TLD and build a map for that tag library

If you do specify an explicit <taglib-location> in the DD (web.xml), a JSP 2.0 Container will use it! In fact, when the Container begins to build the <uri>-to-TLD map, the Container will look first in your DD to see if you’ve made any <taglib> entries, and if you have, it’ll use those to help construct the map. For the exam, you’re expected to know about <taglib-location>, even though it’s no longer required for JSP 2.0

The Container searches in several places to find TLD files—you don’t need to do anything except make sure your TLDs are in one of the right locations

1)Directly inside WEB-INF
2)Directly inside a sub-directory of WEB-INF
3)Inside the META-INF directory inside a JAR file that’s inside WEB-INF/lib
4)Inside a sub-directory of META-INF inside a JAR file that’s inside WEB-INF/lib

When a JSP uses more than one tag library

If you want to use more than one tag library in a JSP, do a separate taglib directive for each TLD. There a few issues to keep in mind...

Make sure the taglib uri names are unique. In other words, don’t put in more than one directive with the same uri value

Do NOT use a prefix that’s on the reserved list. The reserved prefixes are:jsp: jspx: java: javax: servlet: sun: sunw:


Example:A JavaBean Person has a property called address. The value of this property is another JavaBean Address with the following string properties: street1, street2, city, stateCode and zipCode. A controller servlet creates a session-scoped attribute called customer that is an instance of the Person bean. Which JSP code structures will set the city property of the customer attribute to the city request parameter? (Choose all that apply.)

<c:set target=”${sessionScope.customer.address}” property=”city” value=”${param.city}” />
<c:set target=”${sessionScope.customer.address}” property=”city”>${param.city}</c:set>


****<my:Tag2 a="47"/> Body can be empty,Scriptless,JSP it could be..Assume we didn't give the Body.

For the Tag: Can the Body can be made Mandatory to process the tag.


11. <select name=’styleId’>
12. <% BeerStyle[] styles = beerService.getStyles();
13. for ( int i=0; i < styles.length; i++ ) {
14. BeerStyle style = styles[i]; %>
15. <option value=’<%= style.getObjectID() %>’>
16. <%= style.getTitle() %>
17. </option>
18. <% } %>
19. </select>


<select name=’styleId’>
<c:forEach var=’style’ items=’${beerService.styles}’>
<option value=’${style.objectID}’>${style.title}</option>
</c:forEach>
</select>

					Sometimes JSTL and standard actions aren’t enough.

When you need something custom, and you don’t want to go back to scripting, you can write your own tag handlers. That way, your page designers can use
your tag in their pages, while all the hard work is done behind the scenes in your tag handler class. But there are three different ways to build your own tag handlers, so there’s a lot to learn. Of the three, two were introduced with JSP 2.0 to make your life easier (Simple Tags and Tag Files). But you still have to learn about Classic tags for that ridiculously rare occasion when neither of the other two will do what you want. Custom tag development gives you virtually unlimited power, if you can learn to wield


I like the idea of having reusable chunks, but <jsp:include> and <c:import> aren’t perfect. There’s no standard for directories to put the included files in, the JSP is hard to read, and the fact that you make new request parameters to send something to the included file feels wrong...

Sure, it works fine. But should you really have to create new request parameters just to give the included file some customizing information?
Aren’t request parameters supposed to represent form data sent from the client as part of the request? While there might be good reasons to add or change request parameters in your app, using them to send something to the included file isn’t the cleanest approach

Until JSP 2.0, there wasn’t a standard way to deploy included files—you could put the included pieces just about anywhere in the web app. And a JSP with a bunch of <jsp:include> or <c:import> tags isn’t the easiest thing to read. Wouldn’t it be better if the tag itself told you something about the thing being included? Wouldn’t it be nice to say something like: <x:logoHeader> or <x:navBar>


							Tag Files: like include, only better
					

With Tag Files, you can invoke reusable content using a custom tag instead of the generic <jsp:include> or <c:import>. You can think of Tag
Files as a kind of “tag handler lite”, because they let page developers create custom tags, without having to write a complicated Java tag handler class, but Tag Files are really just glorified includes

1)Take an included fi le (like “Header.jsp”) and rename it with a .tag extension.

<img src=”images/Web-Services.jpg” > <br> This is the entire file... remember, we stripped out the opening and closing <html> and <body> tags, so they
won’t be duplicated in the final JSP.

2)Put the tag file (“Header.tag”) in a directory named “tags” inside the “WEB-INF” directory

3)Put a taglib directive (with a tagdir attribute) in the JSP, and invoke the tag
<%@ taglib prefix=”myTags” tagdir=”/WEB-INF/tags” %> 
Use the “tagdir” attribute in the taglib directive, instead of the “uri” we use with TLDs for tag libraries

<myTags:Header/> The name of the tag is simply the name of the tag file! (minus the .tag extension)
------------------------------
So instead of:
<jsp:include page=”Header.jsp”/>
we now have:
<myTags:Header/>

To a Tag File, you don’t send request parameters, you send tag attributes

Invoking the tag from the JSP
-----------------------------
Before (using <jsp:param> to set a request parameter)
<jsp:include page=”Header.jsp”>
<jsp:param name=”subTitle” value=”We take the sting out of SOAP.” />
</jsp:include>

After (using a Tag with an attribute)
<myTags:Header subTitle=”We take the String out of SOAP” />

Using the attribute in the Tag File
-----------------------------------
Before (using a request param value)
<em><strong>${param.subTitle}</strong></em>

After (using a Tag File attribute)
<em><strong>${subTitle}</strong></em> <br>


All tag attributes have TAG scope. That’s right, just the tag. Once the tag is closed, the tag attributes go out of scope!

You have to be clear about these—the <jsp:include> <jsp:param> value goes in as a request parameter. That’s not the same as a request-scoped attribute, remember. The name/value pair for the <jsp:param> looks to the web-app as though it came in with a form submission. That’s one of the reasons we DON’T like using it—the value you meant to pass ONLY to the included fi le, ends up visible to any component in the web app that is a part of this request (such as servlets or JSPs to which the request is forwarded).

But the nice, clean thing about tag attributes for Tag Files is that they’re scoped to the tag itself. Just be sure you know the implications. This will NOT work:

<%@ taglib prefi x=”myTags” tagdir=”/WEB-INF/tags” %>
<html><body>
<myTags:Header subTitle=”We take the String out of SOAP” />
<br>
${subTitle}			This won’t work! The attribute is out of scope
</body></html>


Wait...something’s not right here. How does the person writing the JSP even KNOW that the tag has that attribute? Where’s the TLD that describes the attribute type?

With custom tags, including the JSTL, the tag attributes are defined in the TLD. Remember? This is the TLD from the custom <my:advice> tag from the last chapter

<attribute>
<name>user</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>

So, these are the things the developer who is using a tag needs to know. What’s the attribute name? Is it optional or required? Can it be an expression, or must it be only a String literal?

But while you do specify custom tag attributes in a TLD, you do NOT specify tag file attributes in a TLD

						Tag Files use the attribute directive

There’s a shiny new type of directive, and it’s just for Tag Files. Nothing else can use it. It’s just like the <attribute> sub-element in the <tag> section of the TLD for a custom tag.


Inside the Tag File (Header.tag)

<%@ attribute name=”subTitle” required=”true” rtexprvalue=”true” %>
<img src=”images/Web-Services.jpg” > <br>
<em><strong>${subTitle}</strong></em> <br>


Inside the JSP that uses the tag

<%@ taglib prefix=”myTags” tagdir=”/WEB-INF/tags” %>
<html><body>
<myTags:Header subTitle=”We take the String out of SOAP” />

What happens if you do NOT have the attribute when you use the tag

<myTags:Header /> You can’t do this... you can’t leave out the subTitle attribute because the tag file’s attribute directive says required=”true”.

				When an attribute value is really big


Imagine you have a tag attribute that might be as long as, say, a paragraph. Sticking that in the opening tag could get ugly. So, you can choose to put content in the body of the tag, and then use that as a kind of attribute.

This time we’ll take the subTitle attribute out of the tag, and instead make it the body of the <myTags:Header> tag.

Inside the JSP that uses the tag::
-----------------------------------
<%@ taglib prefix=”myTags” tagdir=”/WEB-INF/tags” %>
<myTags:Header>
We take the sting out of SOAP. OK, so it’s not Jini,<br> but we’ll help you get through it with the least<br> frustration and hair loss.
</myTags:Header>

Now we just give the tag a body, instead of putting all this as the value of an attribute in the opening tag

Inside the Tag File (Header.tag)
--------------------------------		We no longer need the attribute directive!

<img src=”images/Web-Services.jpg” > <br>
<em><strong><jsp:doBody/></strong></em> <br>

This says, “Take whatever is in the body of the tag used to invoke this tag file, and stick it here


But we’re back to the same problem we had before—without a TLD, where do you declare the body-content type?

Declaring body-content for a Tag File::
---------------------------------------
The only way to declare body-content type for a Tag File is with another new Tag File directive, the tag directive. The tag directive is the Tag File equivalent of the page directive in a JSP page, and it has a lot of the same attributes plus an important one you won’t find in page directive—body-content

For a custom tag, the <body-content> element inside the <tag> element of a TLD is mandatory! But a Tag File does not have to declare <body-content> if the default—scriptless—is acceptable.

****Note::You CANNOT use scripting code in the body of a Tag File tag...The body-content of a Tag File defaults to “scriptless”, so you don’t have to declare body-content unless you want one of the OTHER two options: “empty” (nothing in the tag body) or “tagdependent” (treats the body as plain text).


Inside the Tag File with a tag directive (Header.tag)


<%@ attribute name=”fontColor” required=”true” %>			Declaring the Bodytype and Attributes also here..
<%@ tag body-content=”tagdependent” %>
<img src=”images/Web-Services.jpg” > <br>
<em><strong><font color=”${fontColor}”><jsp:doBody/></font></strong></em> <br>  Using the Attributes and Body Here

Inside the JSP that uses the tag

<%@ taglib prefi x=”myTags” tagdir=”/WEB-INF/tags” %>
<html>								Mentioning the attributes and body as per declaration in the Tag File
<myTags:Header fontColor=”#660099”> We take the sting out of SOAP. OK, so it’s not Jini,<br> but we’ll help you get through it with the least<br>frustration and hair loss.
</myTags:Header>


Where the Container looks for Tag Files:
---------------------------------------
1)Directly inside WEB-INF/tags
2)Inside a sub-directory of WEB-INF/tags
3)Inside the META-INF/tags directory inside a JAR file that’s inside WEB-INF/lib
4)Inside a sub-directory of META-INF/tags inside a JAR file that’s inside WEB-INF/lib
5)IF the tag file is deployed in a JAR, there MUST be a TLD for the tag file.

Do we get the Resuable Contents from the external Dependencies?


Does the Tag File have access to the request and response implicit objects?
---------------------------------------------------------------------------
Yes! Remember, even though it’s a .tag file, it’s gonna end up as part of a JSP. You can use the implicit request and response objects (if you do scripting... the normal EL implicit objects are always there as well), and you have access to a JspContext as well.
You don’t have a ServletContext, though—a Tag File uses a JspContext instead of a ServletContext.

I thought on the opposite page you just said we could not do scripting in a Tag File!
No, that’s not exactly what we said. You can do scripting in a Tag File, but you can’t do scripting inside the body of the tag used to invoke the Tag File.

Can you combine Tag Files and TLDs for custom tags in the same directory?
Yes. In fact, if you make a TLD that references your Tag Files, the Container will consider both Tag Files and custom tags mentioned in the same TLD as belonging to the same library.

Hold on—I thought you said Tag Files didn’t have a TLD? Isn’t that why you have to use an attribute directive? Since you can’t declare the attribute in a TLD

Trick question. If you deploy your Tag Files in a JAR, they MUST have a TLD that describes their location. But it doesn’t describe attribute, body-content, etc. 

TLD entries for a Tag File describe only the location of the actual Tag File.
The TLD for a Tag File looks like this:
<taglib ....>
<tlib-version>1.0</tlib-version>
<uri>myTagLibrary</uri>
<tag-file>
<name>Header</name>
<path>/META-INF/tags/Header.tag</path>
</tag-file>
</taglib>

Why did they do it this way? Wouldn’t it be so much simpler to just have custom tags and Tag Files declared the same way in a TLD? But NO... instead they had to come up with this whole other thing where you have to use new directives for defining the attributes and body-content. So, why are tags and Tag Files done differently?

On one hand, yes, it would have been simpler if custom tags and Tag Files were declared in the same way, using a TLD. The question is, simpler for whom? For a custom tag developer, sure. But Tag Files were added to the spec with someone else in mind—page designers

Tag Files give non-Java developers a way to build custom tags without writing a Java class to handle the tag’s functionality. And not having to build a TLD for the Tag File just makes life easier for the Tag File developer. (Remember, Tag Files do need a TLD if the Tag File is deployed in the JAR, but a non-Java programmer might not be using JARs anyway.)


				When you need more than Tag Files..Sometimes you need Java

But sometimes you need more. Sometimes you need good old Java code, and you don’t want to do it from scriptlets, since that’s what you’re trying to prevent by using tags.

When you need Java, you need a custom tag handler. A tag handler, as opposed to a tag file, is simply a Java class that does the work of the tag. It’s a little like an EL function, except much more powerful and flexible. Where EL functions are nothing more than static methods, a tag handler class has access to tag attributes, the tag body, and even the page context so it can get scoped attributes and the request and response.


Custom tag handlers come in two flavors: Classic and Simple. Classic tags were all you had in the previous version of JSP, but with JSP 2.0, a new and much simpler model was added.

You’ll have a hard time coming up with reasons to use the classic model when you need a custom tag handler, because the simple model (especially combined with JSTL and tag files) can handle nearly anything you’d want to do. But we can’t dump the classic model.. Because its on Exam and Previous Old Projects..


****Tag files implement the tag functionality with another page (using JSP).

***Tag handlers implement the tag functionality with a special Java class


SimpleTagModel:
--------------
1)Write a class that extends SimpleTagSupport

public class SimpleTagTest1 extends SimpleTagSupport { // tag handler code here

	public void doTag() throws JspException, IOException {					2)Override the doTag Method
		getJspContext().getOut().print(“This is the lamest use of a custom tag”);
	}
}

3)Create a TLD for the tag
<tag>
<description>worst use of a custom tag</description>
<name>simple1</name>
<tag-class>foo.SimpleTagTest1</tag-class>
<body-content>empty</body-content> </tag>

4)Deploy the tag handler and TLD... Inside the WEB-INF/classes folder & tld inside WEB-INF directly

5)Deploy the tag handler and TLD

<%@ taglib prefi x=”myTags” uri=”simpleTags” %>
<html><body>
<myTags:simple1/>
</body></html>

Simple tag with a body:
-------------------
<%@ taglib prefix=”myTags” uri=”simpleTags” %>
<html><body>
Simple Tag 2:
<myTags:simple2>
This is the body
</myTags:simple2>
</body></html>


TagHandler Class:
-----------------
public class SimpleTagTest2 extends SimpleTagSupport {
	public void doTag() throws JspException, IOException {
		getJspBody().invoke(null);
	}
}
This says, “Process the body of the tag and print it to the response”. The null argument means the output goes to the response rather than some OTHER writer you pass in.

change in the Tld to reflect the BodyContent:<body-content>scriptless</body-content>

					The Simple tag API


JspTag interface((javax.servlet.jsp.tagext.JspTag))
	|	
	|// no methods, this interface is for
	|// organization and polymorphism
	|
	|

SimpleTag interface((javax.servlet.jsp.tagext.SimpleTag))
	|
	|
	|

void doTag()
JspTag getParent()		These are the lifecycle methods... the Container calls these whenever a tag is invoked. Can you guess the order in
				which these methods are called
void setJspBody(JspFragment)
void setJspContext(JspContext)
void setParent(JspTag parent)
	
      |
      |	

JspTag findAncestorWithClass (JspTag, Class)
JspFragment getJspBody()
JspContext getJspContext()

SimpleTagSupport implements the methods of SimpleTag (but the doTag() doesn’t do anything, so you must override it in your tag handler). It also adds three more convenience methods, including the most useful one—getJspBody().

The life of a Simple tag handler:
--------------------------------
When a JSP invokes a tag, a new instance of the tag handler class is instantiated, two or more methods are called on the handler, and when
the doTag() method completes, the handler object goes away.In other words, these handler objects are not reused.)

1)Load class
2)Instantiate class (no-arg constructor runs).
3)Call the setJspContext(JspContext) method.	This gives the handler a reference to a PageContext (a subclass of JspContext)
4)If the tag is nested (invoked from within another tag), call the setParent(JspTag) method..A nested tag can communicate with the other tags in which it’s nested
5)If the tag has attributes, call attribute setters
6)If the tag is NOT declared to have a <bodycontent> of empty, AND the tag has a body, call the setJspBody(JspFragment) method.If the tag has a body, the body comes in through this method, as an instance of JspFragment.
7)Call the doTag() method.


					What if the tag body uses an expression?
					----------------------------------------
Imagine you have a tag with a body that uses an EL expression for an attribute. Now imagine that the attribute doesn’t exist at the time you invoke the tag! In other words, the tag body depends on the tag handler to set the attribute. The example doesn’t do anything very useful, but it’s here to show you how it works in preparation for a bigger example

<myTags:simple3>
Message is: ${message}	At the point where the tag is invoked,“message” is NOT a scoped attribute! If you took this expression out of the
			tag, it would return null.
</myTags:simple3>

The tag handler doTag() method

public void doTag() throws JspException, IOException { 
getJspContext().setAttribute(“message”, “Wear sunscreen.”); 
getJspBody().invoke(null);
}

The tag handler sets an attribute and THEN invokes the body.



<table>
<myTags:simple4>
<tr><td>${movie}</td></tr>
</myTags:simple4>
</table>


Imagine that the tag handler has access to an array of String movie names, and you want to print one row for each movie name in the array.
In the browser, you’ll see something like

Monsoon Wedding
Saved!
Fahrenheit 9/11

Solution:
---------

String[] movies = {“Monsoon Wedding”, “Saved!”, “Fahrenheit 9/11”};
	public void doTag() throws JspException, IOException {
	for(int i = 0; i < movies.length; i++) {
	getJspContext().setAttribute(“movie”, movies[i]); Set the attribute value to be the next element in the array & then process the body again
	getJspBody().invoke(null);
}
}

If the tag needs an attribute, you declare it in the TLD, and provide a bean-style setter method in the tag handler class for each attribute.
If the tag invocation includes attributes, the Container invokes a setter method for each attribute

<table>
<myTags:simple5 movieList=”${movieCollection}”>
<tr>
<td>${movie.name}</td>				The tag Body needs to be repated/processed for the multiple times
<td>${movie.genre}</td>
</tr>
</myTags:simple5> </table>


public class SimpleTagTest5 extends SimpleTagSupport { 

	private List movieList;

	public void setMovieList(List movieList) {
		this.movieList=movieList;
	}
	public void doTag() throws JspException, IOException {
	Iterator i = movieList.iterator();
	while(i.hasNext()) {
	Movie movie = (Movie) i.next();
	getJspContext().setAttribute(“movie”, movie); getJspBody().invoke(null);
}
}

JSPFragment Object:
-------------------

The crucial thing you must remember about JspFragment is that it must NOT contain any scripting elements! It can contain template text, standard and custom actions, and EL expressions, but no scriptlets, declarations, or scripting expressions.

One cool thing is that since it’s an object, you can even pass the fragment around to other helper objects. And those objects, in turn, can get information from it by invoking the JspFragment’s other method—getJspContext(). And of course once you’ve got a context, you can ask for attributes. So the getJspContext() method is really a way for the tag body to get information to other objects.


Most of the time, though, you’ll use JspFragment simply to output the body of the tag to the response. You might, however, want
to get access to the contents of the body. Notice that JspFragment doesn’t have an access method like getContents() or getBody(). You can write the body to something, but you can’t directly get the body. If you do want access to the body, you can use the argument to the invoke() method to pass in a java.io.Writer, then use methods on that Writer to process the contents of the tag body


The invoke() method takes a Writer... pass null to send the body to the response output, or a Writer if you want direct access to the actual body contents.

Notice that JspFragment doesn’t have an access method like getContents() or getBody(). You can write the body to something, but you can’t directly get the
body. If you do want access to the body, you can use the argument to the invoke() method to pass in a java.io.Writer, then use methods on that Writer to process the contents of the tag body.


****getJspBody().invoke(null)--->It is the crucial method that need to be called for every Tag to put the output of the response on the webbrowser...

SkipPageException Stops Processing the Rest of Page:
--------------------------------------------------

Imagine you’re in a page that invokes the tag, and the tag depends on specific request attributes (that it gets from the JspContext available to the tag handler).Now imagine the tag can’t find the attributes it needs, and that the tag knows the rest of the page will never work if the tag can’t succeed. What do you do? You could have the tag throw a JspException, and that would kill the page... but what if it’s only the rest of the page that won’t work? In other words, what if you still want the first part of the page—the part of the page that’s evaluated before the tag invocation—to still appear as the response, but you don’t want the response to include anything still left to be processed after the tag throws an exception? No problem. That’s exactly why SkipPageException exists.


public void doTag() throws JspException, IOException {
	getJspContext().getOut().print(“Message from within doTag().<br>”);
	getJspContext().getOut().print(“About to throw a SkipPageException”);
	if (thingsDontWork) {
	throw new SkipPageException();	At this point, we decided that the rest of the tag AND the rest of the page should stop. Only the part of the page 						and the tag BEFORE the exception will appear in the response
	}
}	

<%@ taglib prefi x=”myTags” uri=”simpleTags” %>
<html><body>
About to invoke a tag that throws SkipPageException <br>
<myTags:simple6/>						The tag handled in the doTag() method above (that throws SkipPageException) 
<br>Back in the page after invoking the tag.
</body></html>

SkipPageException stops only the page that directly invoked the tag
-----------------------------------------------------------------

<html><body>
This is page (A) that includes another page (B). <br>
Doing the include now:<br>
<jsp:include page=”badTagInclude.jsp” />
<br>Back in page A after the include...
</body></html>

<%@ taglib prefi x=”myTags” uri=”simpleTags” %>
This is page B that invokes the tag that throws SkipPageException.
Invoking the tag now:<br>
<myTags:simple6/>
<br>Still in page B after the tag invocation...

public void doTag() throws JspException, IOException {
getJspContext().getOut().print(“Message from within doTag().<br>”);
getJspContext().getOut().print(“About to throw a SkipPageException”);
throw new SkipPageException();
}

If the page that invokes the tag was included from some other page, only the page that invokes the tag stops processing! The original page that did the include keeps going after the SkipPageException


What happens to a SimpleTag handler after it completes doTag()? Does the Container keep it around and reuse it?

No. SimpleTag handlers are never reused! Each tag handler instance takes care of a single invocation. So you never have to worry, for example, that instance variables in a SimpleTag handler won’t have the correct initial values. A SimpleTag handler object will always be initialized before any of its methods are called.

In a SimpleTag handler, if the tag is declared to have a body but it is invoked using an empty tag (since there’s no way to say that a body is required), is the setJspBody() still invoked?

No! The setJspBody() is invoked ONLY if these two things are true:
1) The tag is NOT declared in the TLD to have an empty body.
2) The tag is invoked with a body.
That means that even if the tag is declared to have a non-empty body, the setJspBody() method will not be called if the tag is invoked in either of these two ways:
<foo:bar /> (empty tag)
<foo:bar></foo:bar> (no body).


*****NOte:::The Simple tag’s doTag() method can set an attribute used by the body of the tag, by calling getJspContext().setAttribute() followed by getJspBody().invoke().

						Classic Tag Model
						------------------

Tag interface

int doEndTag()
Tag getParent()
int doStartTag()
void setPageContext(PageContext)
void setParent(Tag)
void release()

  |
  |
IterationTag interface	

int doAfterBody()						TagSupport class

  |								int doAfterBody()
  |								int doStartTag()
  |								int doEndTag()
  |								void setPageContext(PageContext)
  |								// more methods
  |
BodyTag interface

void doInitBody()
void setBodyContent(BodyContent)


								BodyTagSupport class

								int doStartTag()
								BodyContent getBodyContent()
								void doInitBody()
								void setBodyContent(BodyContent)
								// more methods...
									
This side (with the white boxes) is the SimpleTag API. The JspTag superinterface was added with JSP 2.0, but it doesn’t affect the Classic tag API.

A very small Classic tag handler


the differences won’t become painful until you try to process a tag with a body (but you’ll just have to wait for that).



Classic Tag One:<br>
<mine:classicOne />

<tag>
<description>ludicrous use of a Classic tag</description>
<name>classicOne</name>
<tag-class>foo.Classic1</tag-class>
<body-content>empty</body-content>
</tag>

There’s no way to know for certain that this <tag> is handled by a Classic tag handler, unless you know that foo.Classic1 class implements the Tag interface (instead of SimpleTag). We could completely replace the foo.Classic1 code to have it use a SimpleTag, and the TLD would not change


public class Classic1 extends TagSupport {

	public int doStartTag() throws JspException {
		JspWriter out = pageContext.getOut();
		try {
			out.println(“classic tag output”);
		} catch(IOException ex) {
			throw new JspException(“IOException- “ + ex.toString());       Here we must use a try/catch, because we can’t declare the 											IOException
		}
			return SKIP_BODY;			We have to return an int to tell the Container what to do next. Much more on this coming up
	}
}

By extending TagSupport, we’re implementing both Tag and IterationTag. Here we’re overriding only one method, doStartTag

The methods declare JspException, but NOT an IOException! (The SimpleTag doTag() declares IOException)

Classic tags inherit a pageContext member variable from TagSupport (in contrast to the getJspContext() method of SimpleTag).


This example overrides both the doStartTag() and doEndTag() methods, although it could accomplish the same output all within doStartTag(). The point of doEndTag() is that it’s called after the body is evaluated. We don’t show the TLD here, because it’s virtually identical to the previous one, except for some of the names. The tag is declared to have no attributes, and an empty body

<%@ taglib prefi x=”mine” uri=”KathyClassicTags” %>
<html><body>
Classic Tag Two:<br>
<mine:classicTwo />
</body></html>

public class Classic2 extends TagSupport {
	JspWriter out;
	public int doStartTag() throws JspException {
		out = pageContext.getOut();
		try {
			out.println(“in doStartTag()”);
		} catch(IOException ex) {
			throw new JspException(“IOException- “ + ex.toString());
		}
			return SKIP_BODY; 		//This says, “Don’t evaluate the body if there is one—just go straight to the doEndTag() method.”
		}

	public int doEndTag() throws JspException {
		try {
			out.println(“in doEndTag()”);
		} catch(IOException ex) {
			throw new JspException(“IOException- “ + ex.toString());
		}
		return EVAL_PAGE;		This says, “Evaluate the rest of the page” (as opposed	to SKIP_PAGE, which would be just like throwing a
						SkipPageException from a SimpleTag handler)
}



When a tag has a body: comparing Simple vs. Classic
---------------------------------------------------

Now it starts to look different from a SimpleTag. Remember, SimpleTag bodies are evaluated when (and if) you want by calling invoke() on the JspFragment thatencapsulates the body. But in Classic tags, the body is evaluated in between the doStartTag() and doEndTag() methods! Both of the examples below have the exact same behavior.

<html><body>
<myTags:simpleBody>
This is the body
</myTags:simpleBody>
</body></html>

// package and imports
public class SimpleTagTest extends SimpleTagSupport {
	public void doTag() throws JspException, IOException {
		getJspContext().getOut().print(“Before body.”);
		getJspBody().invoke(null);				This causes the body to be evaluated
		getJspContext().getOut().print(“After body.”);
}
}

ClassicTag

public int doStartTag() throws JspException {
	out = pageContext.getOut();
	try {							Before evaluating the Tag if you have anything to do then we should write here..
		out.println(“Before body.”);			Like the setting the attribute for the body contents before its evaulated
	} catch(IOException ex) {
		throw new JspException(“IOException- “ + ex.toString());  THIS is what causes the body to be evaluated in a Classic tag handler!
	}
		return EVAL_BODY_INCLUDE;
}							THIS is what causes the body to be evaluated in a Classic tag handler

public int doEndTag() throws JspException {
   try {						Once the Body is evlauated if you any other tasks that need to be perfomed it should be done
	out.println(“After body.”);			from here !!..
  } catch(IOException ex) {
	throw new JspException(“IOException- “ + ex.toString());
   }
	return EVAL_PAGE;
}

But how do you loop over the body? It looks like doStartTag() is called too early, and doEndTag() is too late, and I don’t have any way to keep re-invoking the body evaluation...


public class SimpleTagTest extends SimpleTagSupport {
	public void doTag() throws JspException, IOException {
		for(int i = 0; i < 3, i++) {
		getJspBody().invoke(null);		It’s easy to loop the body of a Simple tag; you just keep calling invoke() on the body, from within 							doTag().
	}
	}
}


public class ClassicTest extends TagSupport {
	public int doStartTag() throws JspException {
		return EVAL_BODY_INCLUDE;
	}
	public int doEndTag() throws JspException {
		return EVAL_PAGE;
}

But where do you loop over the body, if the body is evaluated in between the methods instead of IN a method like doTag()?

Classic tags have a different lifecycle:
---------------------------------------
Simple tags are simple—it’s all about doTag(). But with classic tags, there’s a doStartTag() and a doEndTag(). And that brings up an interesting problem—when and how is the body evaluated? There’s no doBody() method, but there is a doAfterBody() method that’s called after the body is evaluated and before the doEndTag() runs.

Load class
Instantiate class (no-arg constructor runs).
Call the setPageContext(PageContext) method.
If the tag is nested (invoked from within another tag), call the setParent(Tag) method.
If the tag has attributes, call attribute setters.
Call the doStartTag() method.

If the tag is NOT declared to have an empty body, AND the tag is NOT invoked with an empty body, AND the doStartTag() method returns
EVAL_BODY_INCLUDE, the body is evaluated

If the body content was evaluated, call the doAfterBody() method

Call the doEndTag() method.

	
***Note::doAfterBody() lets you do things AFTER the body runs, and unlike the other methods it can be invoked more than once

         doEndTag() is always called once, either after doStartTag() or after doAfterBody().

****How to stop the evaulation of the body for the firsttime? Need to throw the exception in doStartTag()


The Classic lifecycle depends on return values
----------------------------------------------

The doStartTag() and doEndTag() methods return an int. That int tells the Container what to do next. With doStartTag(), the question the Container
asks is, “Should I evaluate the body?” (assuming there is one, and assuming the TLD doesn’t declare the body as empty).


With doEndTag(), the Container asks, “Should I keep evaluating the rest of the calling page?” The return values are represented by constants declared in
the Tag and IterationTag interfaces

Returning SKIP_PAGE from doEndTag() is exactly like throwing a SkipPageException from a Simple tag! If a page included the page that invoked the tag, the current (included) page stops processing, but the including page continues...


						IterationTag lets you repeat the body
						-------------------------------------

When you write a tag handler that extends TagSupport, you get all the lifecycle methods from the Tag interface, plus the one method from IterationTag—doAfterBody(). Without doAfterBody(), you can’t iterate over the body because doStartTag() is too early, and doEndTag() is too late

But with doAfterBody(), your return value tells the Container whether it should repeat the body again (EVAL_BODY_AGAIN) or call the doEndTag() method (SKIP_BODY)

Default return values from TagSupport:
--------------------------------------

If you don’t override the TagSupport lifecycle methods that return an integer, be aware of the default values the TagSupport method implementations return. The TagSupport class assumes that your tag doesn’t have a body (by returning SKIP_BODY) from doStartTag()), and that if you DO have a body that’s evaluated, you want it evaluated only once (by returning SKIP_BODY from doAfterBody()). It also assumes that you want the rest of the page to evaluate (by returning EVAL-PAGE from doEndtag()).

doStartTag()  **SKIP_BODY EVAL_BODY_INCLUDE

doAfterBody()  **SKIP_BODY EVAL_BODY_AGAIN

doEndTag()   SKIP_PAGE  **EVAL_PAGE

doStartTag() and doEndTag() run exactly once.

You really must know this lifecycle for the exam. Don’t forget that doStartTag() and doEndTag() are always called, and they’re called only once, regardless of anything else that happens. But doAfterBody() can run from 0 to many times, depending on the return value of doStartTag() and previous doAfterBody() calls.

You MUST override doStartTag() if you want the tag body to be evaluated!!
------------------------------------------------------------------------

Think about it! The default return value from doStartTag() is SKIP_BODY, so if you want the body of your tag evaluated, and you extend TagSupport, you MUST override doStartTag() if for no other reason than to return EVAL_BODY_INCLUDE. With doAfterBody(), it should be obvious that if you want to iterate over the body, you have to override that method as well, since its return value is SKIP_BODY.


public class MyIteratorTag extends TagSupport { 

	String[] movies= new String[] {“Spiderman”, “Saved!”, “Amelie”}; 
	int movieCounter;
	
	public int doStartTag() throws JspException {
		movieCounter=0;
		pageContext.setAttribute(“movie”, movies[movieCounter]);
		movieCounter++;
		return EVAL_BODY_INCLUDE;	
	}
	public int doAfterBody() throws JspException {
	if (movieCounter < movies.length) {
		pageContext.setAttribute(“movie”, movies[movieCounter]);
		movieCounter++;
		return EVAL_BODY_AGAIN;
	} else {
		return SKIP_BODY;
	}
}
	public int doEndTag() throws JspException {
		return EVAL_PAGE; 
} 
	}

*********This doAfterBody() method was correct, but it runs only AFTER the body has already been processed once! Without the two extra lines in doStartTag(), the body is processed once without there being a movie attribute, so you get the empty cell

This seems stupid—there’s duplicate code in doStartTag() and doAfterBody().

Yes, there’s duplicate code. In this case, if you’re implementing TagSupport, and you want to set values the body can use, then you MUST set those attribute values in doStartTag(). You can’t wait until doAfterBody(), because by the time you get to doAfterBody(), the body has already been processed once.
Yes, it’s kind of stupid. Which is why SimpleTag is so much better. Of course if you were writing the code, you’d make a private method in your 
tag handler... say, setMovie(), and you’d call that method from both doStartTag() and doAfterBody(). But it’s still an awkward approach

***WHY are you setting the instance variable value for movieCounter INSIDE the doStartTag() method? Why can’t you just initialize it when you declare it?

Yikes! Unlike SimpleTag handlers, which are never reused, a Classic tag handler can be pooled and reused by the Container. That means you’d better reset your instance variable values with each new tag invocation (which means in doStartTag()). Otherwise, this code works the first time, but the next time
a JSP invokes it, the movieCounter variable will still have its last value, instead of 0!


The Container can reuse Classic tag handlers!
---------------------------------------------
Watch out—this is completely different from SimpleTag handlers, which are definitely NOT reused. That means you have to be very careful about instance
variables—you should reset them in doStartTag(). The Tag interface does have a release() method, but that’s called only when the tag handler instance is about to be removed by the Container. So don’t assume that release() is a way to reset the tag handler’s state in between tag invocations..


<form method=”POST” action=”SelectBeer.do”>
<p>Select beer characteristics:</p>
Color:
<select name=’color’ size=’1’ >
<option value=’light’> light </option>				----->We want the set of options in this <select> tag to come from the application
<option value=’amber’> amber </option>
<option value=’brown’> brown </option>
<option value=’dark’> dark </option>
</select>
<br><br>
<input type=”SUBMIT”>
</form>

If we make the options dynamic, they’ll be easier to update and change, without messing around with the HTML. Instead, we want the options to be generated from a Java List created in the web application. So here’s the custom tag we want to build


<form method=”POST” action=”SelectBeer.do”>
<p>Select beer characteristics:</p>
Color:
<formTags:select name=’color’ size=’1’optionsList=’${applicationScope.colorList}’ />
<br><br>
<input type=”SUBMIT”>
</form>

Our custom tag generates the list of options. The name and size tag attributes are “pass-through” values..With this tag, an app can change the options without hard-coding business data in an HTML form


Wait a minute... if our select tag is trying to mimic the standard HTML <select> tag, then we need to include attributes for all of the <select> tag attributes, not just name and size


The HTML <select> tag accepts many more tag attributes than just name and size:

Core attributes: id, class, style, and title
Internationalization attributes: lang and dir
Event attributes: onclick, ondblclick, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeyup, and onkeydown
Form attributes: name, disabled, multiple, size, tabindex, onfocus, onblur, and onchange


//setter methods for all the attributes here....

if ( this.id != null )
out.print(String.format(ATTR_TEMPLATE, “id”, this.id));
if ( this.styleClass != null )
out.print(String.format(ATTR_TEMPLATE, “class”, this.styleClass));
if ( this.style != null )
out.print(String.format(ATTR_TEMPLATE, “style”, this.style));
if ( this.title != null )
out.print(String.format(ATTR_TEMPLATE, “title”, this.title));
if ( this.lang != null )
out.print(String.format(ATTR_TEMPLATE, “lang”, this.lang));
if ( this.dir != null )
out.print(String.format(ATTR_TEMPLATE, “dir”, this.dir));


This solution sucks. And it’s tons of code to keep up with. Worse, what if we want to create a suite of custom tags to augment other HTML tags?!
The tag handler class must implement a setter method for each of the tag attributes declared in the TLD. But these setter methods aren’t really doing anything interesting. The values of these attributes are simply passed on to the output generated for the HTML <select> tag.
We could apply an design principle: “Encapsulate that which varies.”* In this case the set of optional HTML tag attributes is the thing that varies in this tag handler. One solution would be to put all of the attributes into a hashtable. This generalizes the tag object’s storage of attributes, but what about all these setter methods? We can’t get rid of them unless there’s a way to tell the JSP engine to set the tag attributes using a generic interface


Didn’t you know?!?!? The JSP spec provides an API just for this purpose. The DynamicAttribute interface is all you need


<<interface>>
DynamicAttributes
	+setDynamicAttribute(
		uri:String,
		name:String,
		value:Object) : void


SelectTagHandler extends  SimpleTagSupport implements DynamicAttributes{

	-optionsList:List
	-tagAttrs:Map<String,Object>		You will most likely store the dynamic attributes in a hashmap.
	
This setter method is used for every dynamic attribute. The name parameter is the name of the attribute. The value parameter is the
value of the attribute. The uri parameter is the XML namespace that defines the attribute. Normally, you can ignore this parameter.
	+setDynamicAttribute(
		uri:String,
		name:String,
		value:Object) : void
}


Our tag handler code using the DynamicAttributes interface


public class SelectTagHandler  extends SimpleTagSupport implements DynamicAttributes {

	public void setOptionsList(List value) {
		this.optionsList = value;
	}
	private List optionsList = null;
	// store the ‘name’ attribute
	public void setName(String value) {
		this.name = value;
	}
	private String name;
	// store all other (dynamic) attributes
	public void setDynamicAttribute(String uri, String name, Object value) {
		tagAttrs.put(name, value);
}
private Map<String,Object> tagAttrs = new HashMap<String,Object>();


There is a little bit of configuration in the TLD
--------------------------------------------------

<tag>
		<description>classicTag</description>
		<name>select</name>
		<tag-class>com.servlet.customtags.DynamicOptionsGenerator1</tag-class>
		<body-content>empty</body-content>
		<attribute>
			<name>optionsList</name>
			<required>true</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.util.List</type>
		</attribute>
		<dynamic-attributes>true</dynamic-attributes>
	</tag>


You were using a Simple tag. Does this work with Classic tags, too?

Yup, the DynamicAttributes interface can be implemented by a Classic tag in the same fashion as with a Simple tag. Even the configuration in the TLD file is the same.

Do dynamic attributes accept runtime expressions, like EL or <%= %> ?

Since in the Tag Handler we took the private Map<String,Object> tagAttrs = new HashMap<String,Object>();

Absolutely. By default every dynamic attribute may use EL or JSP expression tags to specify the value of the attribute. In fact, did you notice that the data type of the value parameter of the setDynamicAttribute() method is Object, and not String? This means that the value can evaluate to any Java object

What if I need to “compute” on data in a given dynamic attribute?

You can always inspect the name parameter and decide to perform some computation or transformation of the value of that attribute. But if you need that kind of functionality, then you should probably make that attribute explicit, and perform your computation in that attribute’s setter method.


What happens if the custom tag user enters an attribute name that is invalid?

This is the $64,000 question. Because the attribute names are not explicitly declared in the TLD, the JSP engine sends all other attributes to the tag handler using the setDynamicAttribute() method. The result is that the JSP author might mistype the name of a standard HTML attribute and never know it—at least until the browser failed to invoke the behavior of that attribute. So, the first solution Gary proposed (using explicit attributes with setters and TLD declarations) has merit. Can you think of other reasons why Gary’s solution is better than Kim’s?


What about Tag Files?

Tag Files can also include dynamic attributes. The mechanism is basically the same, but with Tag Files the JSP engine provides the Map object for you. You can then inspect or iterate over that map of attribute/value pairs using the forEach JSTL tag.

<%@ tag body-content=’empty’ dynamic-attributes=’tagAttrs’%>
<%@ attribute name=’optionsList’ type=’java.util.List’ required=’true’ rtexprvalue=’true’ %>
<%@ attribute name=’name’ required=’true’ %>
<%@ taglib uri=”http://java.sun.com/jsp/jstl/core” prefix=”c” %>
<select name=’${name}’ 
<c:forEach var=”attrEntry” items=”${tagAttrs}”>
${attrEntry.key}=’${attrEntry.value}’
</c:forEach>
>
<c:forEach var=”option” items=”${optionsList}”>
<option value=’${option}’> ${option} </option>
</c:forEach>
</select>

The value of the dynamic-attributes attribute is a page-scoped variable that holds a hashmap

Use the JSTL forEach custom tag to iterate over each entry in the dynamic attribute’s hashmap. Remember, the key of the entry is the attribute name,
and the value of the entry is the value of the attribute.


Bullet Points:
-------------

The DynamicAttributes interface allows the tag handler class to accept any number of tag attributes.....The tag declaration in the TLD must include the <dynamic-attributes> element....Explicit tag attributes must have a setter method...Typically, you will use a hashmap to store the dynamic attribute name/value pairs using the setDynamicAttribute() method.


Tag Files may also use dynamic attributes..Use the dynamic-attributes attribute of the tag directive...The value of dynamic-attributes holds a hashmap of the dynamic attributes...Typically, you will use the JSTL forEach custom action to iterate over this map.


But what if you DO need access to the body contents?

You’ll probably find that most of the time the lifecycle methods from the Tag and IterationTag interfaces, as provided by TagSupport, are enough. Between the three key methods (doStartTag(), doAfterBody(), and doEndTag()), you can do just about anything. Except...you don’t have direct access to the contents of the body. If you need access to the actual body contents, so that you can, say, use it in an expression or perhaps filter or alter it in some way, then extend BodyTagSupport instead of TagSupport, and you’ll have access to the BodyTag interface methods....


Extending BodyTagSupport gives you two more lifecycle methods from the BodyTag interface—setBodyContent() and doInitBody(). You can use these to do something with the actual CONTENTS of the body of the tag used to invoke the handler

When you implement BodyTag (by extending BodyTagSupport), you get two more lifecycle methods—setBodyContent() and doInitBody(). You also get one new return value for doStartTag(), EVAL_BODY_BUFFERED. That means there are now three possible return values for doStartTag(), instead of the two you get when you extend TagSupport

A change in the default return value for BodyTagSupport: New return value EVAL_BODY_BUFFERED., and it’s the default for BodyTagSupport. (Instead of SKIP_BODY, the default for TagSupport)


What happens if I return EVAL_BODY_BUFFERED even though the invoking tag is empty?

The setBodyContent() and doInitBody() method will not be called if the tag invoking the handler is empty! And by empty, we mean that the tag was
invoked using an empty tag <my:tag /> or with no content between the opening and closing tags <my:tag><my:tag>. The Container knows there’s no body this
time, and it just skips to the doEndTag() method, so this is usually not a problem

Unless the TLD declares the tag to have an empty body! If the TLD says <body-content>empty</body-content>, you don’t have a choice, and you must NOT
return EVAL_BODY_BUFFERED or EVAL_BODY_INCLUDE from doStartTag().


You don’t need to know all the details of using BodyTagSupport?

You don’t need to know all the details of using BodyTagSupport. For the exam (and probably for the rest of your JSP-development life), you need to know the lifecycle for BodyTagSupport, and how it differs from TagSupport. You need to know, for example, that if you do NOT extend BodyTagSupport or implement BodyTag, then you must NOT return EVAL_BODY_BUFFERED from doStartTag(). And you should know the two new methods from the BodyTag interface, but that’s about it..

Explicitly declaring that there is no Body!!

If the TLD for a tag declares an empty body, doStartTag() MUST return SKIP_BODY!

That might be obvious, but it means you have to be careful to keep your tag handler and TLD in sync. So, if you declare a tag in the TLD to have <body-content>empty</body-content>, then there is absolutely NO point in implementing BodyTag (or extending BodyTagSupport). That also means there is no point
in implementing IterationTag, but you get that automatically by extending TagSupport. The point is, you need to return SKIP_BODY from doStartTag() if your TLD declares an empty body for the tag, even IF you implement IterationTag or BodyTag.


						What if you have tags that work together?

you have a <mine:Menu> tag that builds a custom navigation bar. It needs menu items. So you use a <mine:MenuItem> tag nested within the <mine:Menu> tag, and the menu tag gets ahold (somehow) of the menu items and uses those items to build the navigation bar

<mine:Menu> Is having the TagHandler.. and it needs the attribute values of the <mine:Menu> Tag..


The big question is, how do the tags talk to one another? In other words, how does the Menu tag (the enclosing tag) get the attribute values from
the MenuItems (the inner/nested tags)?

Fortunately, there’s a mechanism for getting info to and from outer and inner tags, regardless of the depth of nesting. That means you can get
info from a deeply nested tag out to not just the tag’s immediate enclosing tag, but to any arbitrary tag up the tag nesting hierarchy.


A Tag can call its Parent Tag:


	 JSPTag		
	  /	\
	 /	 \
	/	  \
SimpleTag				Tag
  |	
JspTag getParent()			void setParent(Tag)
void setParent(JspTag parent)           Tag getParent()


<mine:OuterTag>
<mine:InnerTag />
</mine:OuterTag>

<mine:InnerTag> Handler class can access the OuterTag Details:
-------------------------------------------------------

Getting the parent tag in a Classic tag handler

public int doStartTag() throws JspException {

	OuterTag parent = (OuterTag) getParent();
	// do something with it
	return EVAL_BODY_INCLUDE;
}

Getting the parent tag in a Simple tag handler

public void doTag() throws JspException, IOException {
	OuterTag parent = (OuterTag) getParent();
	// do something with it
}

					Find out just how deep the nesting goes

You can walk your way up the ancestor tag chain by continuing to call getParent() on whatever is returned by getParent(). Because getParent() returns
either another tag (on which you can call getParent()), or null.

<mine:NestedLevel>
<mine:NestedLevel>
<mine:NestedLevel/>
</mine:NestedLevel>
</mine:NestedLevel>

import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;
import java.io.*;
	public class NestedLevelTag extends TagSupport {
	   private int nestLevel = 0;
	   public int doStartTag() throws JspException {
		nestLevel = 0;
		Tag parent = getParent();
		while (parent!=null) {
		parent = parent.getParent();
		nestLevel++;
	}
}
		try {
			pageContext.getOut().println(“<br>Tag nested level: “ + nestLevel);
	} catch(IOException ex) {
		throw new JspException(“IOException- “ + ex.toString());
	} 
		return EVAL_BODY_INCLUDE; 
	} }


					Simple tags can have Classic parents::
					-------------------------------------
Using the getParent() method, a Classic tag can access Classic tag parents, and a Simple tag can access either a Classic or Simple parent

Actually, Classic tags can't have Simple parents... getParent() from the classicTags can return the Tag... But we wnated the Type of JSPTag we cannot convert.. JSPTag tag =(JSPTag)tag

**Note:: Only from the ClassicTagHandlers we will have problem to call the getParent().. it shouldn't be nested or Parent should be only of Type ClassTag only

<mine:ClassicParent name=”ClassicParentTag”>
<mine:SimpleInner />
</mine:ClassicParent>

In the SimpleInner tag handler

public void doTag() throws JspException, IOException {
MyClassicParent parent = (MyClassicParent) getParent();
getJspContext().getOut().print(“Parent attribute is: “ + parent.getName());
}							

******Once you have a parent, you can call methods on it like any other Java object, so you can get attributes of the parent tag

In the ClassicParent tag handler

public class MyClassicParent extends TagSupport {
	private String name;
	public void setName(String name) {
	this.name=name;
	}
	public String getName() {
	return name;
	}
public int doStartTag() throws JspException {
return EVAL_BODY_INCLUDE; } }


Since there’s no automatic mechanism for the parent to find out about its child tags, you simply have to use the same design approach to get info to
the parent from the child as you do to get info from the parent to the child. You get a reference to the parent tag, and call methods. Only instead of getters, this time you’ll call some kind of set or add method.


In the child tag: MenuItem
--------------------------

public class MenuItem extends TagSupport {
	private String itemValue;
	public void setItemValue(String value) {
	itemValue=value;
  }
	public int doStartTag() throws JspException {
	return EVAL_BODY_INCLUDE;
   }
	public int doEndTag() throws JspException {
	Menu parent = (Menu) getParent();
	parent.addMenuItem(itemValue);
	return EVAL_PAGE;
   }
}


public class Menu extends TagSupport {
	private ArrayList items;
	public void addMenuItem(String item) {
	items.add(item);
    }
	public int doStartTag() throws JspException {  Don’t forget to reset the ArrayList in doStartTag(), since the tag handler might be reused by the 							Container
	items = new ArrayList();
	return EVAL_BODY_INCLUDE;			If you do not return EVAL_BODY_INCLUDE, the child tag’s will never be processed
}

addMenuItem is NOT an attribute setter method! This method exists ONLY so that a child tag can tell the parent tag about the child’s attribute value. (It’s called in between doStartTag() and doEndTag()).)


How will you prepare the dynamic menus using the JSP?

Lets say there are the dynamic values to be printed in the Navigation bar..That dynamic values comes from MenuItem tag. If you have collection you iterate 
over them...

<mine:Menu >
<mine:MenuItem itemValue=”Dogs” />		
<mine:MenuItem itemValue=”Cats” />
<mine:MenuItem itemValue=”Horses” />
</mine:Menu>

				Getting an arbitrary ancestor

There is another mechanism you can use if you want to, say, skip some nesting levels and go straight to a grandparent or something even further up the tag nesting hierarchy. The method is in both TagSupport and SimpleTagSupport (although they have slightly different behavior), and it’s called findAncestorWithClass().

Getting an immediate parent using getParent()
OuterTag parent = (OuterTag) getParent();

Getting an arbitrary ancestor using findAncestorWithClass()
WayOuterTag ancestor = (WayOuterTag) findAncestorWithClass(this, WayOuterTag.class);
							starting tag	the class of the tag you want


The Container walks the tag nesting hierarchy until it finds a tag that’s an instance of this class. It returns the first one, so there’s no way to say “skip the first tag you see that’s an instance of WayOuterTag.class and give me the second instance instead...” So if you really know for a fact that you wanted the second instance of a tag ancestor of that type, you’ll just have to get the return value of findAncestorWithClass(), and then call getParent() or findAncestorWithClass() on it.

You will not be tested on any details of using findAncestorWithClass().All you need to know for the exam is that it exists


						Using the PageContext API for tag handlers

This page is just a review from what you saw in the Script-free JSPs chapter, but it comes up again here because it’s crucial for a tag handler. A tag handler class, remember, is not a servlet or a JSP, so it doesn’t have automatic access to a bunch of implicit objects. But it does get a reference to a PageContext, and with it, it can get to all kinds of things it might need

Remember that while Simple tags get a reference to a JspContext and Classic tags get a reference to a PageContext,the Simple tag’s JspContext is usually
a PageContext instance. So if your Simple tag handler needs access to PageContext-specific methods or fields, you’ll have to cast it from a JspContext to
the PageContext it really is on the heap.


JspContext
   |
getAttribute(String name)
getAttribute(String name, int scope)
getAttributeNamesInScope(int scope)
findAttribute(String name)

  |
  |
APPLICATION_SCOPE
PAGE_SCOPE
REQUEST_SCOPE
SESSION_SCOPE	

getRequest()
getServletConfi g()
getServletContext()
getSession()


The one-arg getAttribute(String) is for page scope ONLY!
--------------------------------------------------------
There are TWO overloaded getAttribute() methods you can call on pageContext: a one-arg that takes a String, and a two-arg that takes a String and an int. The one-arg version works just like all the others—it’s for attributes bound TO the pageContext object. But the two-arg version can be used to get
an attribute from ANY of the four scopes


findAttribute() looks in EACH scope starting with PAGE_SCOPE.
------------------------------------------------------------
You can expect to be tested on this!! The difference between getAttribute(String) and findAttribute(String) can be dramatic—the getAttribute(String) method looks ONLY in page scope, while the findAttribute(STRING) will search all four scopes to fi nd a matching attribute, in the order of page, request, session, and application. It returns the first one it fi nds that matches the findAttribute(String) argument


Which directives and/or standard actions are applicable ONLY within tag files? (Choose all that apply.)

A. tag
B. page			-Option B is invalid because the page directive is never allowed in a tag file (pg 1-179).
C. jsp:body 		-Option C is invalid because the jsp:body action can appear in EITHER a tag file or JSP
D. jsp:doBody
E. jsp:invoke
F. taglib 		Option F is invalid because the taglib directive can appear in EITHER a tag file or JSP.


Which Simple tag mechanism will tell a JSP page to stop processing?

A)Throw a SkipPageException from the doTag method..

Which must be true if you want to use dynamic attributes for a Simple tag handler? (Choose all that apply)

A. Your Simple tag must NOT declare any static tag attributes.
**B. Your Simple tag must use the <dynamic-attributes> element in the TLD.
**C. Your Simple tag handler must implement the DynamicAttributes interface.
D. Your Simple tag should extend the DynamicSimpleTagSupport class, which provides default support for dynamic attributes
E. Your Simple tag CANNOT be used with the jsp:attribute standard action, because this action works only with static attributes


Which is true about tag files?A tag file must have the file extension of .tag or .tagx

A TLD file must be used to map the symbolic tag name to the actual tag file. This is invalid because tag files may be discovered by the container in several well-known locations. This container feature is optional

2. <my:tag1>
3. <%-- JSP content --%>
4. </my:tag1>

The tag handler for my:tag1 is Tag1Handler and extends TagSupport. What happens when the instance of Tag1Handler calls the getParent method? (Choose all that apply.)  The null value is returned.


Given a tag, simpleTag, whose handler is implemented using the Simple tag model and a tag, complexTag, whose handler is implemented using the Classic tag model. Both tags are declared to be non-empty and non-tag dependent in the TLD. Which JSP code snippets are valid uses of these tag? (Choose all that apply


A. <my:simpleTag>
<my:complexTag />		-Option A is correct; a Simple tag may include a Complex tag in the body as long as that tag contains no scripting code.
</my:simpleTag>

B. <my:simpleTag>
<%= displayText %>		-Option B is invalid because simple tags cannot have a body that includes a JSP expression tag
</my:simpleTag>

C. <my:simpleTag>
<%@ include file=”/WEB-INF/web/common/headerMenu.html” %>
</my:simpleTag>

-Option C is correct because the include directive is processed before the body of the simpleTag is converted into a JspFragment; however, the included content must also be non-scripting (which is why this example includes an HTML segment).

D. <my:simpleTag>
<my:complexTag>
<% i++; %> 		-Option D is not invalid because of the complexTag usage (as in Option A), but because the complexTag body has scripting code in it
</my:complexTag> 
</my:simpleTag>



Which are true about the Tag File model?

A. Each tag file must have a corresponding entry in a TLD file.
B. All directives allowed in JSP pages are allowed in Tag Files
C. All directives allowed in Tag Files are allowed in JSP pages
*D. The <jsp:doBody> standard action can only be used in Tag Files
*E. The allowable file extensions for Tag Files are .tag and .tagx.
*F. For each attribute declared and specified in a Tag File, the container creates a page-scoped attribute with the same name


-Option A is invalid because tag files need only to be placed in the appropriate location in order to be used.
-Option B is invalid because the page directive is not available in Tag File
-Option C is invalid because the tag, attribute, and variable directives are not available in JSP pages


Which are valid in tag files?

*A. <jsp:doBody />
*B. <jsp:invoke fragment=”frag” />
C. <%@ page import=”java.util.Date” %> -Option C is invalid because the page directive is not valid in tag files.
D. <%@ variable name-given=”date” variable-class=”java.util.Date” %>
E. <%@ attribute name=”name” value=”blank” type=”java.lang.String” %> -Option E is invalid because there is no value attribute defined for the attribute directive







					You can walk up, but you can’t walk down...

There’s a getParent() method, but there’s no getChild(). Yet the scenario we showed earlier was for an outer <my:Menu> tag that needed access to its nested <my:MenuItem> tags. What can we do? How can the parent tag get information about the child tags, when a child can get a reference to the parent, but the parent can’t ask for a reference to the child?


					Getting info from child to parent

We have two main ways in which tags can cooperate with one another:
1) The child tag needs info (like an attribute value) from its parent tag.
2) The parent tag needs info from each of its child tags

We’ve already seen how the first scenario works—the child tag gets a reference to its parent using getParent(), then calls getter methods on the parent. But what happens when the parent needs info from the child? We have to do the same thing. In other words, if the parent needs info from the child, it’s the child’s job to give it to the parent


						Deploying your web app
						------------------------

But where does everything go? So many directories, so many rules. What do you name your directories? What does the client think they’re named? What does the
client actually request, and how does the Container know where to look? How do you make certain that you don’t accidentally leave out a directory when you move the whole web app to a different machine? What happens if the client requests a directory instead of a specifi c file? How do you configure the DD for error pages, welcome files, and MIME types? It’s not as bad as it sounds...



Where will the CONTAINER look for things in the web app?
-------------------------------------------------------
Where will the Container look when the client requests an HTML page? A JSP page? A servlet? Something that doesn’t exist as an actual file (like, BeerTest.do)? Where will the Container look for tag handler classes? Where will the Container look for TLDs? Tag Files? JAR files? The Deployment Descriptor? Other classes my servlets depend on? Where does the Container look for “welcome” files ?


How does the CLIENT request things in the web app?
--------------------------------------------------
What does the client type into the browser to access an HTML page? A JSP page? A servlet? Something that doesn’t actually exist as a file? In which places can the client make a direct request, and in which places is the client restricted from direct access to a resource? What happens if the client types in a path to only a directory, not a specific file?


What goes where in a web app

In several chapters of this book, we’ve looked at the locations in which the various files must be placed. In the chapter on custom tags, for example, you saw that Tag Files must be deployed in /WEB-INF/tags or a subdirectory, or in a JAR file under /META-INF/tags or a subdirectory. If you put a Tag File anywhere else, the Container will either ignore it or treat it as static content ready to be served.

The Servlet and JSP specs have a lot of picky rules about where things go, and you really do need to know most of them. Since we’ve already covered most of this in one way or another, we use these first few pages as a test of your memory and understanding. Don’t skip it! Treat these next few pages as practice exam questions!
							Name the directories
							---------------------

To deploy a web app successfully, you MUST follow this structure. WEB-INF must be immediately under the application context (“MyTestApp” in this example). The “classes” directory must be immediately inside “WEB-INF”. The package structure for the classes must be immediately inside “classes”. The “lib” directory must be immediately inside “WEB-INF”, and the JAR fi le must be immediately inside “lib”. The “META-INF” directory must be immediately inside the JAR, and TLD files in a JAR must be somewhere under “META-INF” (they can be in any subdirectory, and “TLDs” is not required as a directory name). TLDs that are NOT in a JAR must be somewhere under “WEB-INF”. Tag Files (fi les with a .tag or .tagx extension) must be somewhere under “WEB-INF/tags” (unless they’re deployed in a JAR, in which case they must be somewhere under “META-INF/tags”).


The directory structure of a web app is intense. And everything has to be in exactly the right place. Moving a web app can hurt.
But there’s a solution, called a WAR file, which stands for Web ARchive. And if that sounds suspiciously like a JAR file (Java ARchive), that’s because a WAR is a JAR. A JAR with a .war extension instead of .jar.

A WAR file is simply a snapshot of your web app structure, in a nice portable, compressed form (it’s really just a JAR file). You jar up your entire web app structure (minus the web app context directory—the one that’s above WEB-INF), and give it a .war extension. But that does leave one problem—if you don’t include the specific web app directory (BeerApp, for example), how does the Container know the name/context of this web app

That depends on your Container. In Tomcat, the name of the WAR file becomes the web app name! Imagine you deploy BeerApp as a normal directory structure under tomcat/webapps/BeerApp. To deploy it as a WAR file, you jar up everything in the BeerApp directory (but not the BeerApp directory itself), then name the resulting JAR file BeerApp.war. Then you drop the BeerApp.war file into the tomcat/webapps directory. That’s it. Tomcat unpacks the WAR file, and creates the web app context directory using the name of the WAR file. But again, your Container may handle WAR deployment and naming differently. What matters to us here is what’s required by the spec, and the answer is—it makes almost no difference whether the app is deployed in or out of a WAR! In other words, you still need WEB-INF, web.xml, etc. Everything on the previous pages applies.

Almost everything. There is one thing you can do when you use a WAR file that you can’t do when you deploy without one—declare library dependencies


In a WAR file, you can declare library dependencies in the META-INF/MANIFEST.MF file, which gives you a deploy-time check for whether the Container can find the packages and classes your app depends on.That means you don’t have to wait until a resource is requested before the whole thing blows up because the Container doesn’t have a particular class in its classpath that the requested resource needs...

You will probably never put anything into the META-INF directory yourself, so you’ll probably never care whether your app is deployed as a WAR unless you do need to specify library dependencies in the MANIFEST.MF file.

						Making static content and JSPs directly accessible

When you deploy static HTML and JSPs, you can choose whether to make them directly accessible from outside the web app. By directly accessible, we mean that a client can enter the path to the resource into his browser, and the server will return the resource. But you can prevent direct access by putting files under WEB-INF or, if you’re deploying as a WAR file, under META-INF.

Valid request
http://www.wickedlysmart.com/MyTestApp/register/signUp.jsp --------> This is a directly accessible path in the web app

Invalid request (produces “404 Not Found” error)
http://www.wickedlysmart.com/MyTestApp/WEB-INF/process.jsp ---------->No! Nothing under WEB-INF can be directly accessed


If the server gets a client request for anything under WEB-INF or META-INF, the Container MUST respond with a 404 NOT FOUND error!


If you can’t serve content from WEB-INF or META-INF, what’s the point of putting pages there??!!

Think about that. You have Java classes and class members with package-level (default) access, right? These are classes and members not available to the “public”, but meant for internal use by other classes and members that are publicly exposed. It’s the same way for these non-accessible static content and JSPs. By putting them under WEB-INF (or, with a WAR file, META-INF), you’re protecting them from any direct access, while still allowing other parts of the web app to use them.

You might, for example, want to forward to or include a file while making sure that no client can directly request it. Chances are, if you want to protect a resource from direct access, you’ll use WEB-INF and not META-INF, but for the exam, you have to know that the rules apply to both


What about a META-INF directory inside a JAR file inside WEB-INF/lib? Does that have the same protection as META-INF inside the WAR file?

Well... yes. But the fact that the content is in META-INF is not the point. In this case, you’re talking about a JAR file inside the lib directory inside WEB-INF. And anything in WEB-INF is protected from direct access! So, it doesn’t matter where under WEB-INF the content is, it’s still protected. When we say that META-INF is protected, we’re really talking about META-INF inside a WAR file, because the META-INF inside WEB-INF/lib JAR files is always protected anyway by virtue of being under WEB-INF.


On an earlier page you mentioned putting library dependencies in the META-INF/MANIFEST.MF file. Are you required to do that? Isn’t everything in the WEB-INF/lib jar files and the WEB-INF/classes directory automatically on the classpath for this application?

Yes, classes you deploy in/with the web app, by using the WEB-INF/classes directory or a JAR in WEB-INF/lib, are available and you don’t have to do or say
anything. They just work. But... you might have a Container with optional packages on its classpath, and maybe you’re depending on some of those packages. Or maybe you’re depending on a particular version of a library! The MANIFEST.MF file gives you a place to tell the Container about the optional libraries you must have access to. If the Container can’t provide them, it won’t let you successfully deploy the application. Which is a lot better than if you deploy and then find out later, at request time, when you get some horrible (or worse—subtle) runtime error


How does the Container access the content inside JAR files in WEB-INF/lib?

The Container automatically puts the JAR file into its classpath, so classes for servlets, listeners, beans, etc. are available exactly as they are if you put the classes (in their correct package directory structure, of course) within the WEB-INF/classes directory. In other words, it doesn’t matter whether the classes are in or out of a JAR as long as they’re in the right locations. Keep in mind, though, that the Container will always look for classes in the WEB-INF/classes directory before it looks inside JAR files in WEB-INF/lib.

OK, that explains class files, but what about other kinds of files? What if I need to access a text file that’s deployed in a JAR in WEB-INF/lib?

This is different. If your web app code needs direct access to a resource (text file, JPEG, etc.) that’s inside a JAR, you need to use the getResource() or getResourceAs Stream() methods of the classloader—this is just plain old J2SE, not specific to servlets

Now, you might recognize those two methods (getResource() and getResourceAsStream()), because they exist also in the ServletContext API. The difference is, the methods inside ServletContext work only for resources within the web app that are not deployed within a JAR file.

For the exam, you need to know that you can use the standard J2SE mechanism for getting resources from JAR files, but you do not need to know any details

	
						Servlet mappings can be “fake”

The URL pattern you put into a servlet mapping can be completely made-up. Imaginary. Fake. Just a logical name you want to give clients. Clients who have no business knowing anything about the real physical structure of your web app

With servlet mappings, you have two structures to organize: the real physical directory and file structure in which your web app resources live, and the virtual/logical structure

The virtual/logical structure exists simply because you SAY it exists!


The THREE types of <url-pattern> elements

1) EXACT match: <url-pattern>/Beer/SelectBeer.do</url-pattern>

2)DIRECTORY match:<url-pattern>/Beer/*</url-pattern>

3)EXTENSION match:<url-pattern>*.do</url-pattern>


Key rules about servlet mappings:
--------------------------------

1) The Container looks for matches in the order shown on the opposite page. In other words, it looks first for an exact match. If it can’t find an exact match, it looks for a directory match. If it can’t find a directory match, it looks for an extension match

2) If a request matches more than one directory <url-pattern>, the Container chooses the longest mapping. In other words, a request for /foo/bar/myStuff.do will map to the <url-pattern> /foo/bar/* even though it also matches the <url-pattern> /foo/*. The most specific match always wins.

Lets say we have three Url Patterns Configured:
----------------------------------------------

<url-pattern>*.do</url-pattern>   DeployTestOne

<url-pattern>/fooStuff/bar</url-pattern> DeployTestTwo

<url-pattern>/fooStuff/*</url-pattern>  DeployTestThree
-------------------------------------------------------------------------------------------------------------------
http://localhost:8080/MapTest/blue.do   Container choice: DeployTestOne  (matched the *.do extension pattern)

http://localhost:8080/MapTest/fooStuff/bar Container choice: DeployTestTwo (exact match with /fooStuff/bar pattern)

http://localhost:8080/MapTest/fooStuff/bar/blue.do Container choice: DeployTestThree (matched the /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fooStuff/blue.do Container choice: DeployTestThree (matched /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fred/blue.do  Container choice: DeployTestOne (matched the *.do extension pattern)

http://localhost:8080/MapTest/fooStuff   Container choice: DeployTestThree  (matched the /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fooStuff/bar/foo.fo Container choice: DeployTestThree (matched the /fooStuff/* directory pattern)

http://localhost:8080/MapTest/fred/blue.fo Container choice: 404 NOT FOUND (doesn’t match ANYTHING)
-------------------------------------------------------------------------------------------------------------------

You already know that if you type in the name of a web site and you don’t specify a specific file, you (usually) still get something back. Entering http://www.oreilly.com into your browser takes you to the O’Reilly web site, and even though you didn’t name a specific resource (like “home.html”, for example), you still get a default page.

You can configure your server to define a default page for the entire site, but we’re concerned here with default (also known as “welcome”) pages for individual web apps. You configure welcome pages in the DD, and that DD determines what the Container chooses when the client enters a partial URL—a
URL that includes a directory, for example, but not a specific resource in the directory..

In other words, what happens if the client request comes in for:

http://www.wickedlysmart.com/foo/bar  and “bar” is simply a directory, and you don’t have a specific servlet mapped to this URL pattern. What will the client see?

<web-app ...>
< welcome-file-list>
<welcome-file>index.html</welcome-file>
<welcome-file>default.jsp</welcome-file>
</welcome-file-list>
</web-app>


Imagine you have a web app where several different directories have their own default HTML page, named “index.html”. But some directories use a “default.jsp” instead. It would be a huge pain if you had to specify a specific default page or JSP for each directory that needs one. Instead, you specify a list, in order, of the pages you want the Container to look for in whatever directory the partial request is for. In other words, no matter
which directory is requested, the Container always looks through the same list—the one and only <welcome-file-list>. 

The Container will pick the first match it finds, starting with the first welcome file listed in the <welcome-file-list>.

The files in the <welcome-file> element do NOT start with a slash!

Don’t be confused. The way in which the Container matches and chooses welcome files is not the same as the way in which it matches URL patterns. If you put the slash in front of the file name, you’ll be violating the spec, and bad things will happen...

					Configuring error pages in the DD

Sure, you want to be friendly when the user doesn’t know the exact resource to ask for when they get to your site or web app, so you specify default/welcome files. But you also want to be friendly when things go wrong. We already looked at this in the chapter on Using Custom Tags, so this is just a review

Declaring a catch-all error page:
--------------------------------

This applies to everything in your web app—not just JSPs.

<error-page>
<exception-type>java.lang.Throwable</exception-type>
<location>/errorPage.jsp</location>
</error-page>

(FYI: you can override this in individual JSPs by adding a page directive with an errorPage attribute.)

Declaring an error page based on an HTTP status code:

This configures an error page that’s called only when the status code for the response is “404” (file not found)

<error-page>
<error-code>404</error-code>
<location>/notFoundError.jsp</location>
</error-page>

You can’t use <error-code> and <exception-type> together!

You can configure an error page based on the HTTP status code OR based on the exception type thrown, but you CANNOT have both in the same <error-page> tag.


What are you allowed to declare as an exception type in <exception-type>?

Anything that’s a Throwable, so that includes java.lang.Error, runtime exceptions, and any checked exception (as long as the checked exception class is on the Container’s classpath, of course).

Speaking of error handling, can you programmatically generate error codes yourself?

Yes, you can. You can invoke the sendError() method on the HttpServletResponse, and it’ll tell the Container to generate that error just as if the Container generated the error on its own. And if you’ve configured an error page to be sent to the client based on that error code, that’s what the client will get. And by the way, “error” codes are also known as “status” codes, so if you see either one, they mean the same thing—HTTP codes for errors.

How about an example of generating your own error code?

response.sendError(HttpServletResponse.SC_FORBIDDEN);  which is the same as: response.sendError(403);

If you look in the HttpServletResponse interface, you’ll see a bunch of constants defined for the common HTTP error/status codes. Keep in mind that for the exam, you don’t need to memorize the status codes! It’s enough to simply know that you can generate error codes, that the method is response.sendError(), and that in terms of the error pages you’ve defined in the DD, or any other error-handling you do in your JSPs, there’s no difference between Container-generated and programmer-generated HTTP errors. A 403 is a 403 regardless of WHO sends the error. Oh yeah, there’s also an overloaded two-argument
version of sendError() that takes an int and a String message


						Configuring servlet initialization in the DD

You already know that servlets, by default, are initialized at first request. That means the first client suffers the pain of class loading, instantiation, and initialization (setting a ServletContext, invoking listeners, etc.), before the Container can do what it normally does—allocate a thread and invoke the servlet’s service() method

If you want servlets to be loaded at deploy time (or at server restart time) rather than on first request, use the <load-on-startup> element in the DD. Any non-negative value for <load-on-startup> tells the Container to initialize the servlet when the app is deployed (or any time the server restarts).

If you have multiple servlets that you want preloaded, and you want to control the order in which they’re initialized, the value of <load-on-startup> determines the order! In other words, any non-negative value means load early, but the order in which servlets are loaded is based on the value of the different <load-on-startup> elements

Values greater than one do not affect the number of servlet instances!

The value you use: <load-on-startup>4</load-on-startup> does NOT mean “load four instances of the servlet”. It means that this servlet should be loaded only AFTER servlets with a <load-on-startup> number less than four are loaded. And what if there’s more than one servlet with a <load-on-startup> of 4?
The Container loads servlets with the same value in the order in which the servlets are declared in the DD.


Wouldn’t you ALWAYS want to do this? Shouldn’t everyone just use <load-on-startup>1</load-on-startup> by default?

To answer that question, you ask yourself, “How many servlets do I have in my app, and how likely is it that they’ll all be used?” And you’ll also
need to ask, “How long does it take each servlet to load?” Some servlets are rarely used, so you might want to conserve resources by not loading the rarely-used servlets in advance. But some servlets take so painfully long to initialize (like the Struts ActionServlet), that you don’t want even a single
client to experience that much latency. So, only you can decide, and you’ll probably decide on a servlet-by-servlet basis, evaluating both the pain level
and likelihood of use for each servlet


					Making an XML-compliant JSP: a JSP Document


The exam doesn’t require you to be an XML expert, but you do have to know two things: the syntax for the key DD elements, and the basics of making what’s known as a JSP Document. (“As opposed to what? If a normal JSP isn’t a document, what is it?” That’s what you’re asking, right? Think of it this way—a normal JSP is a page, unless it’s written with the XML alternatives to normal JSP syntax, in which case it becomes a document.

Normal JSP page syntax								JSP document syntax
-------------------------------------------------------------------------------------------------------------------------------
<%@ page import=”java.util.*” %>						<jsp:directive.page import=”java.util.*”/>

<%! int y = 3; %>								<jsp:declaration>int y = 3;</jsp:declaration>

<% list.add(“Fred”); %>								<jsp:scriptlet>list.add(“Fred”);</jsp:scriptlet>

There is no spoon.								<jsp:text>There is no spoon.</jsp:text>

<%= it.next() %>								<jsp:expression>it.next()</jsp:expression>


We aren’t going to say any more about it because writing XML-compliant JSP documents is probably not something you’ll do. The XML syntax is used mainly by tools, and the table above just shows you how the tool would transform your normal JSP syntax into an XML document. There IS more you have to know if you write this by hand—the whole document, for example, is usually enclosed in a <jsp:root> tag (which includes some other stuff), and the taglib directives go inside the <jsp:root> opening tag, rather than as a <jsp:directive>. But everything that might be on the exam is in the table above. So relax.



							Memorizing the EJB-related DD tags
							----------------------------------

This exam is about web components, not business components (although in the Patterns chapter, you’ll see a few things about business components). But if you’re deploying a J2EE app, complete with Enterprise JavaBeans (EJBs) in the business tier, some of your web components will probably need to lookup and access the enterprise beans. If you’re deploying an app in a full J2EE-compliant Container(one that has an EJB Container as well), you can define references to EJBs in the DD. You don’t have to know anything about EJBs for this exam, other than what you declare in the DD, so we won’t waste your time explaining it here

<ejb-local-ref>
<ejb-ref-name>ejb/Customer</ejb-ref-name>		The JNDI lookup name you’ll use in code
<ejb-ref-type>Entity</ejb-ref-type>
<local-home>com.wickedlysmart.CustomerHome</local-home>  These must be fully-qualified names of the bean’s exposed interfaces
<local>com.wickedlysmart.Customer</local>
</ejb-local-ref>

A LOCAL bean means the client (in this case, a servlet) and the bean must be running in the same JVM

A REMOTE bean means the client (in this case, a servlet) and the bean can be running in different JVMs (possibly on different physical machines as well).

Reference to a remote bean JVM
<ejb-ref>
<ejb-ref-name>ejb/LocalCustomer</ejb-ref-name>
<ejb-ref-type>Entity</ejb-ref-type>
<home>com.wickedlysmart.CustomerHome</home>				local-home home  local remote
<remote>com.wickedlysmart.Customer</remote>
</ejb-ref>

The <ejb-ref-name> that lists the logical lookup name you’ll use in code to perform a JNDI lookup on an enterprise bean’s home interface 

The <ejb-ref-type> describes whether this is an Entity or Session bean. Those two elements, the lookup name and the bean type, don’t depend on whether the bean is local (running in the same JVM as the web component), or remote(potentially running in a different JVM).

But... look at the other elements starting with the outer tags: <ejb-local-ref> and <ejb-ref>. You might be tempted to think that it’s:
<ejb-local-ref>
<ejb-remote-ref>

But NO! For remote beans, it’s just:
<ejb-ref>          Right! There’s no “remote” in the tag.

In other words, the local reference says it’s local, but the remote reference does NOT include the word “remote” in its tag element name. Why? Because at the time <ejb-ref> was first defined, there was no such thing as “local” EJBs. Since ALL enterprise beans were “remote”, there was no need to differentiate between local and remote, so no need to put “remote” in the name of the tag..This also explains the OTHER tag naming inconsistency—the name of the tag for the bean’s home interface. A local bean uses:

<local-home> but a remote bean does NOT use: <remote-home> For remote beans, it’s just: <home>

					Memorizing the JNDI <env-entry> DD tag
					--------------------------------------

Think of an environment entry as being something like a deploy-time constant that your app can use, much like servlet and context init parameters. In other words, a way for the deployer to pass values into the servlet (or in this case, an EJB as well if this is deployed as part of an enterprise application in a fully J2EE-compliant server).

At deploy time, the Container reads the DD and makes a JNDI entry (again, assuming this is a fully J2EE-compliant app, and not just a server with only a web Container), using the name and value you supply in this DD tag.At runtime, a component in the application can look up the value in JNDI, using the name listed in the DD. You probably won’t care about <env-entry> unless you’re also developing with EJBs, so the only reason you need to memorize this is for the exam.

<env-entry>
<env-entry-name>rates/discountRate</env-entry-name>
<env-entry-type>java.lang.Integer</env-entry-type> This can be any type that takes a single String as a constructor parameter (or a single Character if
							it’s java.lang.Character).
<env-entry-value>10</env-entry-value> This will be passed in as a String (or a single Character if the <env-entry-type> is java.lang.Character
</env-entry>

The <env-entry-type> must NOT be a primitive!


When you see an <env-entry-value> that’s an integer value (like the example above), you might think that the <env-entry-type> can be a primitive. But that would be... wrong. You also might be tempted to think that you can have only Strings and wrappers, but that’s wrong too—you can use any type that takes a single String in its constructor (or a single Character for a Character type

					Memorizing the < mime-mapping> DD tag


You can configure a mapping between an extension and a mime type in the DD. This will probably be the easiest tag to remember, because it just makes
sense—you map between an extension and a mime-type, and guess what? In a rare moment of simplicity and clarity, they named the tag sub-elements
“extension” and “mime-type”. That means you have to remember only one thing—that the tag elements are named for exactly what they are

<mime-mapping>
<extension>mpg</extension>			Do NOT include the dot “.”!
<mime-type>video/mpeg</mime-type>
</mime-mapping>


It’s just the characters that make up the extension, not the “.” that separates the fi le name from theextension.


HTML and JSPs (That you want to be directly accessible.)
------------------------------------------------------
Client-accessible HTML and JSPs can be anywhere under the root of the web app or any of its subdirectories, EXCEPT they cannot be under WEB-INF (including subdirectories). In a WAR file, they can’t be under META-INF (including subdirectories

HTML and JSPs (That you want to “hide” from direct client access.)
------------------------------------------------------------------
Pages under WEB-INF (or META-INF in a WAR file) cannot be directly accessed by clients

TLDs(.tld)
----------
If NOT inside a JAR, TLD files must be somewhere under WEB-INF or a subdirectory of WEB-INF. If deployed in a JAR, TLD files must be somewhere under META-INF, or a subdirectory of META-INF.

Tag Files (.tag or .tagx)
--------------------------
If NOT deployed inside a JAR, Tag Files must be inside WEB-INF/tags, or a subdirectory of WEB-INF/tags. If deployed in a JAR, Tag Files must be in META-INF/tags, or a subdirectory of META-INF/tags. Note: Tag Files deployed in a JAR must have a TLD in the JAR.

Servlet classes
---------------

Servlet classes must be in a directory structure matching the package structure, placed directory under WEB-INF/classes (for example, class com.example.Ring would be inside WEB-INF/classes/com/example), or in the appropriate package directories within a JAR inside WEB-INF/lib).

Tag Handler classes:Actually ALL classes used by the web-app (unless they’re part of the class libraries on the classpath) must follow the same rules as ------------------
servlet classes—inside WEB-INF/classes, in a directory structure matching the package (or in the appropriate package directories within a JAR inside WEB-INF/lib).

JAR files:   JAR files must be inside the WEB-INF/lib directory.
----------










































































Throughout this book we’re using Tomcat as both the web Server and the web Container. In the real world, you probably use a more robust Web Server (like Apache) configured with a Web Container (like Tomcat).

Microservices Architecture:
--------------------------
LoadBalancers handling the Multiple requests to different instances..

Remote calls will always has to be the HTTP Calls.. Our entire business is split into the multiple modules or services as many as possible & deployed.

So we get the facility to rescale the services into number of instances..In overall the we get the good Application perfomance

Loadbalancers will now care of forwarding the request's based on the requesttype to a specific instance/service where the service is located/deployed..

Different HandlerMapping are given to Map differently in the Spring Applications !..

SpringBoot Profiles,Spring Dev Tools,Spring Boot CLI,Spring Boot Actuator Concepts,Spring Boot AutoConfiguration


>>>>>>> origin/main
